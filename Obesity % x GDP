{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "33dd73dd59914d8eacff790b9fd12e9c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [
              "widget-interact"
            ],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_ae9e26f122164073beee5e8b184fba82",
              "IPY_MODEL_27f9c468cdbe4e55913441db7f9b7f1d"
            ],
            "layout": "IPY_MODEL_fa443dc0cbcf4c01825d73271aa27d59"
          }
        },
        "ae9e26f122164073beee5e8b184fba82": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "Afghanistan",
              "Albania",
              "Algeria",
              "Andorra",
              "Angola",
              "Antigua and Barbuda",
              "Argentina",
              "Armenia",
              "Australia",
              "Austria",
              "Azerbaijan",
              "Bahamas",
              "Bahrain",
              "Bangladesh",
              "Barbados",
              "Belarus",
              "Belgium",
              "Belize",
              "Benin",
              "Bhutan",
              "Bolivia (Plurinational State of)",
              "Bosnia and Herzegovina",
              "Botswana",
              "Brazil",
              "Brunei Darussalam",
              "Bulgaria",
              "Burkina Faso",
              "Burundi",
              "Cabo Verde",
              "Cambodia",
              "Cameroon",
              "Canada",
              "Central African Republic",
              "Chad",
              "Chile",
              "China",
              "Colombia",
              "Comoros",
              "Congo",
              "Cook Islands",
              "Costa Rica",
              "Croatia",
              "Cuba",
              "Cyprus",
              "Czechia",
              "CÃ´te d'Ivoire",
              "Democratic People's Republic of Korea",
              "Democratic Republic of the Congo",
              "Denmark",
              "Djibouti",
              "Dominica",
              "Dominican Republic",
              "Ecuador",
              "Egypt",
              "El Salvador",
              "Equatorial Guinea",
              "Eritrea",
              "Estonia",
              "Eswatini",
              "Ethiopia",
              "Fiji",
              "Finland",
              "France",
              "Gabon",
              "Gambia",
              "Georgia",
              "Germany",
              "Ghana",
              "Greece",
              "Grenada",
              "Guatemala",
              "Guinea",
              "Guinea-Bissau",
              "Guyana",
              "Haiti",
              "Honduras",
              "Hungary",
              "Iceland",
              "India",
              "Indonesia",
              "Iran (Islamic Republic of)",
              "Iraq",
              "Ireland",
              "Israel",
              "Italy",
              "Jamaica",
              "Japan",
              "Jordan",
              "Kazakhstan",
              "Kenya",
              "Kiribati",
              "Kuwait",
              "Kyrgyzstan",
              "Lao People's Democratic Republic",
              "Latvia",
              "Lebanon",
              "Lesotho",
              "Liberia",
              "Libya",
              "Lithuania",
              "Luxembourg",
              "Madagascar",
              "Malawi",
              "Malaysia",
              "Maldives",
              "Mali",
              "Malta",
              "Marshall Islands",
              "Mauritania",
              "Mauritius",
              "Mexico",
              "Micronesia (Federated States of)",
              "Monaco",
              "Mongolia",
              "Montenegro",
              "Morocco",
              "Mozambique",
              "Myanmar",
              "Namibia",
              "Nauru",
              "Nepal",
              "Netherlands",
              "New Zealand",
              "Nicaragua",
              "Niger",
              "Nigeria",
              "Niue",
              "Norway",
              "Oman",
              "Pakistan",
              "Palau",
              "Panama",
              "Papua New Guinea",
              "Paraguay",
              "Peru",
              "Philippines",
              "Poland",
              "Portugal",
              "Qatar",
              "Republic of Korea",
              "Republic of Moldova",
              "Republic of North Macedonia",
              "Romania",
              "Russian Federation",
              "Rwanda",
              "Saint Kitts and Nevis",
              "Saint Lucia",
              "Saint Vincent and the Grenadines",
              "Samoa",
              "San Marino",
              "Sao Tome and Principe",
              "Saudi Arabia",
              "Senegal",
              "Serbia",
              "Seychelles",
              "Sierra Leone",
              "Singapore",
              "Slovakia",
              "Slovenia",
              "Solomon Islands",
              "Somalia",
              "South Africa",
              "South Sudan",
              "Spain",
              "Sri Lanka",
              "Sudan",
              "Sudan (former)",
              "Suriname",
              "Sweden",
              "Switzerland",
              "Syrian Arab Republic",
              "Tajikistan",
              "Thailand",
              "Timor-Leste",
              "Togo",
              "Tonga",
              "Trinidad and Tobago",
              "Tunisia",
              "Turkey",
              "Turkmenistan",
              "Tuvalu",
              "Uganda",
              "Ukraine",
              "United Arab Emirates",
              "United Kingdom of Great Britain and Northern Ireland",
              "United Republic of Tanzania",
              "United States of America",
              "Uruguay",
              "Uzbekistan",
              "Vanuatu",
              "Venezuela (Bolivarian Republic of)",
              "Viet Nam",
              "Yemen",
              "Zambia",
              "Zimbabwe"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "pais",
            "description_tooltip": null,
            "disabled": false,
            "index": 23,
            "layout": "IPY_MODEL_6332bf3aa7864a40897cd528c58503ef",
            "style": "IPY_MODEL_41e7eab1d20047b09782c624b0b73ca6"
          }
        },
        "27f9c468cdbe4e55913441db7f9b7f1d": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_5555e18a5d2e4db99b7e3e71dbcab3be",
            "msg_id": "",
            "outputs": [
              {
                "output_type": "display_data",
                "data": {
                  "text/plain": "<Figure size 1000x600 with 1 Axes>",
                  "image/png": "\n"
                },
                "metadata": {}
              }
            ]
          }
        },
        "fa443dc0cbcf4c01825d73271aa27d59": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6332bf3aa7864a40897cd528c58503ef": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "41e7eab1d20047b09782c624b0b73ca6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5555e18a5d2e4db99b7e3e71dbcab3be": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "730db4340a12420dbd6ad91c2c824c10": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [
              "widget-interact"
            ],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_d848eb6514e84b168ace505e1ac29412",
              "IPY_MODEL_94e5004ce7ab4b9aa3811ca2e9fd84b8"
            ],
            "layout": "IPY_MODEL_47f06373879f47be8a31c1bb6c434d36"
          }
        },
        "d848eb6514e84b168ace505e1ac29412": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "1900",
              "1910",
              "1920",
              "1930",
              "1940",
              "1950",
              "1960",
              "1970",
              "1980",
              "1990",
              "2000",
              "2010"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "decada",
            "description_tooltip": null,
            "disabled": false,
            "index": 0,
            "layout": "IPY_MODEL_a1860df0825d47ce89989d587e1ebaa4",
            "style": "IPY_MODEL_6552f3934d7840cf99c1bd58b220527c"
          }
        },
        "94e5004ce7ab4b9aa3811ca2e9fd84b8": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_d0a4fd2d5ce5460097b7331e3e76cbd3",
            "msg_id": "",
            "outputs": [
              {
                "output_type": "display_data",
                "data": {
                  "text/plain": "<Figure size 1000x600 with 1 Axes>",
                  "image/png": "\n"
                },
                "metadata": {}
              }
            ]
          }
        },
        "47f06373879f47be8a31c1bb6c434d36": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a1860df0825d47ce89989d587e1ebaa4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6552f3934d7840cf99c1bd58b220527c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d0a4fd2d5ce5460097b7331e3e76cbd3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2e5119e96ebe4aba9adf63dd3895bf54": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [
              "widget-interact"
            ],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_f7ab767d271248e78f6bd410eac62621",
              "IPY_MODEL_ed1e382a71f547eea530d437d26e5f1d"
            ],
            "layout": "IPY_MODEL_9c755ac41a624ff389b3665756709437"
          }
        },
        "f7ab767d271248e78f6bd410eac62621": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "Afghanistan",
              "Albania",
              "Algeria",
              "Andorra",
              "Angola",
              "Antigua and Barbuda",
              "Argentina",
              "Armenia",
              "Australia",
              "Austria",
              "Azerbaijan",
              "Bahamas",
              "Bahrain",
              "Bangladesh",
              "Barbados",
              "Belarus",
              "Belgium",
              "Belize",
              "Benin",
              "Bhutan",
              "Bolivia",
              "Bosnia and Herzegovina",
              "Botswana",
              "Brazil",
              "Brunei",
              "Bulgaria",
              "Burkina Faso",
              "Burundi",
              "Cambodia",
              "Cameroon",
              "Canada",
              "Cape Verde",
              "Chad",
              "Chile",
              "China",
              "Colombia",
              "Comoros",
              "Congo, Rep.",
              "Costa Rica",
              "Cote d'Ivoire",
              "Croatia",
              "Cuba",
              "Cyprus",
              "Czech Rep.",
              "Denmark",
              "Djibouti",
              "Dominica",
              "Ecuador",
              "Egypt",
              "El Salvador",
              "Equatorial Guinea",
              "Eritrea",
              "Estonia",
              "Ethiopia",
              "Fiji",
              "Finland",
              "France",
              "Gabon",
              "Gambia",
              "Georgia",
              "Germany",
              "Ghana",
              "Greece",
              "Greenland",
              "Grenada",
              "Guatemala",
              "Guinea",
              "Guinea-Bissau",
              "Guyana",
              "Haiti",
              "Honduras",
              "Hungary",
              "Iceland",
              "India",
              "Indonesia",
              "Iran",
              "Iraq",
              "Ireland",
              "Israel",
              "Italy",
              "Jamaica",
              "Japan",
              "Jordan",
              "Kazakhstan",
              "Kenya",
              "Kiribati",
              "Korea, Dem. Rep.",
              "Korea, Rep.",
              "Kosovo",
              "Kuwait",
              "Kyrgyzstan",
              "Laos",
              "Latvia",
              "Lebanon",
              "Lesotho",
              "Liberia",
              "Libya",
              "Liechtenstein",
              "Lithuania",
              "Luxembourg",
              "Macedonia, FYR",
              "Madagascar",
              "Malawi",
              "Malaysia",
              "Maldives",
              "Mali",
              "Malta",
              "Marshall Islands",
              "Mauritania",
              "Mauritius",
              "Mexico",
              "Micronesia, Fed. Sts.",
              "Moldova",
              "Monaco",
              "Mongolia",
              "Montenegro",
              "Morocco",
              "Mozambique",
              "Myanmar",
              "Namibia",
              "Nauru",
              "Nepal",
              "Netherlands",
              "New Zealand",
              "Nicaragua",
              "Niger",
              "Nigeria",
              "Norway",
              "Oman",
              "Pakistan",
              "Palau",
              "Panama",
              "Papua New Guinea",
              "Paraguay",
              "Peru",
              "Philippines",
              "Poland",
              "Portugal",
              "Qatar",
              "Romania",
              "Russia",
              "Rwanda",
              "Saint Kitts and Nevis",
              "Saint Lucia",
              "Saint Vincent and the Grenadines",
              "Samoa",
              "San Marino",
              "Sao Tome and Principe",
              "Saudi Arabia",
              "Senegal",
              "Serbia",
              "Seychelles",
              "Sierra Leone",
              "Singapore",
              "Slovak Republic",
              "Slovenia",
              "Solomon Islands",
              "Somalia",
              "South Africa",
              "South Sudan",
              "Spain",
              "Sri Lanka",
              "Sudan",
              "Suriname",
              "Swaziland",
              "Sweden",
              "Switzerland",
              "Syria",
              "Taiwan",
              "Tajikistan",
              "Tanzania",
              "Thailand",
              "Timor-Leste",
              "Togo",
              "Tonga",
              "Trinidad and Tobago",
              "Tunisia",
              "Turkey",
              "Turkmenistan",
              "Tuvalu",
              "Uganda",
              "Ukraine",
              "United Arab Emirates",
              "United Kingdom",
              "United States",
              "Uruguay",
              "Uzbekistan",
              "Vanuatu",
              "Venezuela",
              "Vietnam",
              "Yemen, Rep.",
              "Zambia",
              "Zimbabwe"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "pais",
            "description_tooltip": null,
            "disabled": false,
            "index": 0,
            "layout": "IPY_MODEL_f02f8fa32af94420b1d614964fd21749",
            "style": "IPY_MODEL_411efc5aa5104021b6f2e4a221405dee"
          }
        },
        "ed1e382a71f547eea530d437d26e5f1d": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_675ab026de094e9f898705eeab27d1a6",
            "msg_id": "",
            "outputs": [
              {
                "output_type": "display_data",
                "data": {
                  "text/plain": "<Figure size 1200x600 with 1 Axes>",
                  "image/png": "\n"
                },
                "metadata": {}
              }
            ]
          }
        },
        "9c755ac41a624ff389b3665756709437": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f02f8fa32af94420b1d614964fd21749": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "411efc5aa5104021b6f2e4a221405dee": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "675ab026de094e9f898705eeab27d1a6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d07506676a7c430ba6d6c6deeb4fd5a6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [
              "widget-interact"
            ],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_dd5cea396f91418e86a1bd4507f2f246",
              "IPY_MODEL_9f7e325810a24fde95559f57d0213656"
            ],
            "layout": "IPY_MODEL_e6c488c9cd4641bfbd21fdd61c2455a4"
          }
        },
        "dd5cea396f91418e86a1bd4507f2f246": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "Afghanistan",
              "Albania",
              "Algeria",
              "Andorra",
              "Angola",
              "Antigua and Barbuda",
              "Argentina",
              "Armenia",
              "Australia",
              "Austria",
              "Azerbaijan",
              "Bahamas",
              "Bahrain",
              "Bangladesh",
              "Barbados",
              "Belarus",
              "Belgium",
              "Belize",
              "Benin",
              "Bhutan",
              "Bolivia (Plurinational State of)",
              "Bosnia and Herzegovina",
              "Botswana",
              "Brazil",
              "Brunei Darussalam",
              "Bulgaria",
              "Burkina Faso",
              "Burundi",
              "Cabo Verde",
              "Cambodia",
              "Cameroon",
              "Canada",
              "Central African Republic",
              "Chad",
              "Chile",
              "China",
              "Colombia",
              "Comoros",
              "Congo",
              "Cook Islands",
              "Costa Rica",
              "Croatia",
              "Cuba",
              "Cyprus",
              "Czechia",
              "CÃ´te d'Ivoire",
              "Democratic People's Republic of Korea",
              "Democratic Republic of the Congo",
              "Denmark",
              "Djibouti",
              "Dominica",
              "Dominican Republic",
              "Ecuador",
              "Egypt",
              "El Salvador",
              "Equatorial Guinea",
              "Eritrea",
              "Estonia",
              "Eswatini",
              "Ethiopia",
              "Fiji",
              "Finland",
              "France",
              "Gabon",
              "Gambia",
              "Georgia",
              "Germany",
              "Ghana",
              "Greece",
              "Grenada",
              "Guatemala",
              "Guinea",
              "Guinea-Bissau",
              "Guyana",
              "Haiti",
              "Honduras",
              "Hungary",
              "Iceland",
              "India",
              "Indonesia",
              "Iran (Islamic Republic of)",
              "Iraq",
              "Ireland",
              "Israel",
              "Italy",
              "Jamaica",
              "Japan",
              "Jordan",
              "Kazakhstan",
              "Kenya",
              "Kiribati",
              "Kuwait",
              "Kyrgyzstan",
              "Lao People's Democratic Republic",
              "Latvia",
              "Lebanon",
              "Lesotho",
              "Liberia",
              "Libya",
              "Lithuania",
              "Luxembourg",
              "Madagascar",
              "Malawi",
              "Malaysia",
              "Maldives",
              "Mali",
              "Malta",
              "Marshall Islands",
              "Mauritania",
              "Mauritius",
              "Mexico",
              "Micronesia (Federated States of)",
              "Monaco",
              "Mongolia",
              "Montenegro",
              "Morocco",
              "Mozambique",
              "Myanmar",
              "Namibia",
              "Nauru",
              "Nepal",
              "Netherlands",
              "New Zealand",
              "Nicaragua",
              "Niger",
              "Nigeria",
              "Niue",
              "Norway",
              "Oman",
              "Pakistan",
              "Palau",
              "Panama",
              "Papua New Guinea",
              "Paraguay",
              "Peru",
              "Philippines",
              "Poland",
              "Portugal",
              "Qatar",
              "Republic of Korea",
              "Republic of Moldova",
              "Republic of North Macedonia",
              "Romania",
              "Russian Federation",
              "Rwanda",
              "Saint Kitts and Nevis",
              "Saint Lucia",
              "Saint Vincent and the Grenadines",
              "Samoa",
              "San Marino",
              "Sao Tome and Principe",
              "Saudi Arabia",
              "Senegal",
              "Serbia",
              "Seychelles",
              "Sierra Leone",
              "Singapore",
              "Slovakia",
              "Slovenia",
              "Solomon Islands",
              "Somalia",
              "South Africa",
              "South Sudan",
              "Spain",
              "Sri Lanka",
              "Sudan",
              "Sudan (former)",
              "Suriname",
              "Sweden",
              "Switzerland",
              "Syrian Arab Republic",
              "Tajikistan",
              "Thailand",
              "Timor-Leste",
              "Togo",
              "Tonga",
              "Trinidad and Tobago",
              "Tunisia",
              "Turkey",
              "Turkmenistan",
              "Tuvalu",
              "Uganda",
              "Ukraine",
              "United Arab Emirates",
              "United Kingdom of Great Britain and Northern Ireland",
              "United Republic of Tanzania",
              "United States of America",
              "Uruguay",
              "Uzbekistan",
              "Vanuatu",
              "Venezuela (Bolivarian Republic of)",
              "Viet Nam",
              "Yemen",
              "Zambia",
              "Zimbabwe"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "country",
            "description_tooltip": null,
            "disabled": false,
            "index": 0,
            "layout": "IPY_MODEL_cf28a66e6b9949188b9cdf6db5d29204",
            "style": "IPY_MODEL_4d07d28f5ba74ec9a57d037f7515b1c5"
          }
        },
        "9f7e325810a24fde95559f57d0213656": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_d24cddc667ba447dbc936b42fb67e523",
            "msg_id": "",
            "outputs": [
              {
                "output_type": "display_data",
                "data": {
                  "text/plain": "<Figure size 1200x600 with 2 Axes>",
                  "image/png": "\n"
                },
                "metadata": {}
              }
            ]
          }
        },
        "e6c488c9cd4641bfbd21fdd61c2455a4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cf28a66e6b9949188b9cdf6db5d29204": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4d07d28f5ba74ec9a57d037f7515b1c5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d24cddc667ba447dbc936b42fb67e523": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vinymendes/A3-Banco-de-dados/blob/main/A3_BigData.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Limpeza arquivo data.csv\n",
        "\n"
      ],
      "metadata": {
        "id": "ekz1EjZl7DyJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import pandas as pd\n",
        "for dirname, _, filenames in os.walk('/content/data.csv'):\n",
        "    for filename in filenames:\n",
        "        print(os.path.join(dirname, filename))"
      ],
      "metadata": {
        "id": "GcB13-jE7FW9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_csv('/content/data.csv', header=0, skiprows= range(1,3))\n",
        "df_copia = data.copy()"
      ],
      "metadata": {
        "id": "j0-gQB0i7LiF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mnXv0OqT7Nww",
        "outputId": "545cc3de-07bb-4fee-b50b-3a2505063d75"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(196, 127)"
            ]
          },
          "metadata": {},
          "execution_count": 112
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 759
        },
        "id": "yebQQ81e7RXH",
        "outputId": "03f0e167-0670-44cd-ccc6-77cc87ba3605"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Unnamed: 0              2016            2016.1            2016.2  \\\n",
              "0              Country        Both sexes              Male            Female   \n",
              "1          Afghanistan     5.5 [3.4-8.1]     3.2 [1.3-6.4]    7.6 [4.3-12.4]   \n",
              "2              Albania  21.7 [17.0-26.7]  21.6 [14.8-29.0]  21.8 [15.3-28.9]   \n",
              "3              Algeria  27.4 [22.5-32.7]  19.9 [13.6-27.1]  34.9 [27.6-42.7]   \n",
              "4              Andorra  25.6 [20.1-31.3]  25.9 [18.0-34.3]  25.3 [17.7-33.7]   \n",
              "5               Angola    8.2 [5.1-12.2]     4.0 [1.6-7.9]   12.1 [6.8-19.0]   \n",
              "6  Antigua and Barbuda  18.9 [13.8-24.6]   11.6 [6.4-18.6]  25.9 [17.6-35.2]   \n",
              "7            Argentina  28.3 [23.4-33.5]  27.3 [20.5-35.0]  29.0 [22.5-36.0]   \n",
              "8              Armenia  20.2 [15.7-24.8]  17.1 [11.1-24.0]  23.0 [16.6-29.9]   \n",
              "9            Australia  29.0 [25.3-32.9]  29.6 [24.2-35.3]  28.4 [23.1-33.9]   \n",
              "\n",
              "               2015            2015.1            2015.2              2014  \\\n",
              "0        Both sexes              Male            Female        Both sexes   \n",
              "1     5.2 [3.3-7.7]     3.0 [1.3-6.0]    7.3 [4.1-11.8]     4.9 [3.1-7.3]   \n",
              "2  21.1 [16.6-26.0]  20.9 [14.4-28.1]  21.3 [15.1-28.1]  20.5 [16.2-25.1]   \n",
              "3  26.7 [21.9-31.8]  19.2 [13.2-26.1]  34.2 [27.1-41.7]  26.0 [21.4-30.9]   \n",
              "4  25.4 [20.1-31.0]  25.5 [17.8-33.8]  25.2 [17.7-33.4]  25.2 [20.0-30.7]   \n",
              "5    7.9 [4.9-11.7]     3.8 [1.5-7.3]   11.6 [6.5-18.2]    7.5 [4.7-11.2]   \n",
              "6  18.4 [13.5-23.8]   11.2 [6.2-17.8]  25.3 [17.3-34.3]  18.0 [13.2-23.1]   \n",
              "7  27.8 [23.2-32.7]  26.8 [20.2-34.1]  28.5 [22.3-35.1]  27.3 [22.9-32.0]   \n",
              "8  19.7 [15.4-24.2]  16.6 [10.9-23.3]  22.6 [16.4-29.1]  19.2 [15.1-23.6]   \n",
              "9  28.4 [24.9-32.1]  28.9 [23.9-34.3]  27.9 [23.0-33.1]  27.9 [24.6-31.4]   \n",
              "\n",
              "             2014.1            2014.2  ...            1978.2             1977  \\\n",
              "0              Male            Female  ...            Female       Both sexes   \n",
              "1     2.8 [1.2-5.6]    7.0 [4.0-11.3]  ...     0.9 [0.3-2.2]    0.6 [0.2-1.2]   \n",
              "2  20.2 [13.9-27.3]  20.8 [14.9-27.4]  ...    9.1 [4.6-15.5]   6.8 [4.0-10.7]   \n",
              "3  18.5 [12.7-25.0]  33.6 [26.7-40.7]  ...   11.8 [6.5-18.6]   7.4 [4.3-11.3]   \n",
              "4  25.2 [17.6-33.3]  25.1 [17.8-33.1]  ...  17.5 [10.9-25.3]  14.0 [9.6-19.1]   \n",
              "5     3.6 [1.4-6.9]   11.1 [6.2-17.5]  ...     1.6 [0.5-3.7]    0.9 [0.3-2.0]   \n",
              "6   10.8 [6.1-17.1]  24.8 [17.1-33.5]  ...    9.6 [5.0-16.1]    6.0 [3.4-9.5]   \n",
              "7  26.2 [20.0-33.1]  28.1 [22.1-34.4]  ...   14.1 [9.0-20.5]  11.8 [8.2-16.0]   \n",
              "8  16.1 [10.6-22.7]  22.1 [16.1-28.3]  ...   10.5 [5.7-16.9]   7.9 [4.8-11.9]   \n",
              "9  28.3 [23.6-33.4]  27.4 [22.8-32.2]  ...   12.0 [8.7-15.7]  11.0 [8.6-13.8]   \n",
              "\n",
              "            1977.1            1977.2             1976           1976.1  \\\n",
              "0             Male            Female       Both sexes             Male   \n",
              "1    0.2 [0.0-0.7]     0.9 [0.3-2.1]    0.5 [0.2-1.1]    0.2 [0.0-0.7]   \n",
              "2    4.8 [2.0-9.3]    8.9 [4.3-15.4]   6.7 [3.8-10.6]    4.6 [1.8-9.2]   \n",
              "3    3.1 [1.2-6.2]   11.4 [6.2-18.4]   7.2 [4.1-11.1]    2.9 [1.1-6.1]   \n",
              "4  10.7 [5.6-17.4]  16.9 [10.4-24.8]  13.5 [9.1-18.6]  10.2 [5.2-16.9]   \n",
              "5    0.3 [0.0-0.9]     1.5 [0.4-3.6]    0.9 [0.3-2.0]    0.3 [0.0-0.9]   \n",
              "6    2.5 [0.9-5.4]    9.3 [4.7-15.9]    5.8 [3.2-9.3]    2.4 [0.8-5.3]   \n",
              "7   9.6 [5.2-15.4]   13.8 [8.6-20.3]  11.5 [7.8-15.8]   9.3 [4.9-15.3]   \n",
              "8    4.9 [2.0-9.3]   10.2 [5.3-16.7]   7.6 [4.5-11.7]    4.7 [1.8-9.1]   \n",
              "9  10.3 [7.0-14.1]   11.7 [8.3-15.6]  10.8 [8.2-13.5]  10.0 [6.6-14.0]   \n",
              "\n",
              "            1976.2             1975          1975.1           1975.2  \n",
              "0           Female       Both sexes            Male           Female  \n",
              "1    0.8 [0.2-2.0]    0.5 [0.2-1.1]   0.2 [0.0-0.6]    0.8 [0.2-2.0]  \n",
              "2   8.8 [4.1-15.4]   6.5 [3.6-10.5]   4.4 [1.7-9.2]   8.6 [3.9-15.4]  \n",
              "3  11.1 [5.8-18.2]   6.9 [3.9-10.9]   2.8 [1.0-6.0]  10.7 [5.5-18.0]  \n",
              "4  16.4 [9.8-24.4]  12.9 [8.6-18.1]  9.7 [4.7-16.3]  15.8 [9.2-23.9]  \n",
              "5    1.4 [0.4-3.5]    0.8 [0.3-1.9]   0.2 [0.0-0.8]    1.4 [0.4-3.4]  \n",
              "6   9.1 [4.4-15.7]    5.6 [3.0-9.1]   2.3 [0.8-5.1]   8.8 [4.1-15.6]  \n",
              "7  13.5 [8.1-20.2]  11.2 [7.5-15.7]  9.0 [4.6-15.2]  13.2 [7.7-20.1]  \n",
              "8   9.8 [5.0-16.5]   7.3 [4.2-11.5]   4.5 [1.7-8.9]   9.5 [4.7-16.2]  \n",
              "9  11.5 [8.0-15.4]  10.5 [7.9-13.4]  9.7 [6.2-13.9]  11.2 [7.6-15.2]  \n",
              "\n",
              "[10 rows x 127 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a5f840ca-98a5-403a-b739-d31ff9b93ff7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>2016</th>\n",
              "      <th>2016.1</th>\n",
              "      <th>2016.2</th>\n",
              "      <th>2015</th>\n",
              "      <th>2015.1</th>\n",
              "      <th>2015.2</th>\n",
              "      <th>2014</th>\n",
              "      <th>2014.1</th>\n",
              "      <th>2014.2</th>\n",
              "      <th>...</th>\n",
              "      <th>1978.2</th>\n",
              "      <th>1977</th>\n",
              "      <th>1977.1</th>\n",
              "      <th>1977.2</th>\n",
              "      <th>1976</th>\n",
              "      <th>1976.1</th>\n",
              "      <th>1976.2</th>\n",
              "      <th>1975</th>\n",
              "      <th>1975.1</th>\n",
              "      <th>1975.2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Country</td>\n",
              "      <td>Both sexes</td>\n",
              "      <td>Male</td>\n",
              "      <td>Female</td>\n",
              "      <td>Both sexes</td>\n",
              "      <td>Male</td>\n",
              "      <td>Female</td>\n",
              "      <td>Both sexes</td>\n",
              "      <td>Male</td>\n",
              "      <td>Female</td>\n",
              "      <td>...</td>\n",
              "      <td>Female</td>\n",
              "      <td>Both sexes</td>\n",
              "      <td>Male</td>\n",
              "      <td>Female</td>\n",
              "      <td>Both sexes</td>\n",
              "      <td>Male</td>\n",
              "      <td>Female</td>\n",
              "      <td>Both sexes</td>\n",
              "      <td>Male</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>5.5 [3.4-8.1]</td>\n",
              "      <td>3.2 [1.3-6.4]</td>\n",
              "      <td>7.6 [4.3-12.4]</td>\n",
              "      <td>5.2 [3.3-7.7]</td>\n",
              "      <td>3.0 [1.3-6.0]</td>\n",
              "      <td>7.3 [4.1-11.8]</td>\n",
              "      <td>4.9 [3.1-7.3]</td>\n",
              "      <td>2.8 [1.2-5.6]</td>\n",
              "      <td>7.0 [4.0-11.3]</td>\n",
              "      <td>...</td>\n",
              "      <td>0.9 [0.3-2.2]</td>\n",
              "      <td>0.6 [0.2-1.2]</td>\n",
              "      <td>0.2 [0.0-0.7]</td>\n",
              "      <td>0.9 [0.3-2.1]</td>\n",
              "      <td>0.5 [0.2-1.1]</td>\n",
              "      <td>0.2 [0.0-0.7]</td>\n",
              "      <td>0.8 [0.2-2.0]</td>\n",
              "      <td>0.5 [0.2-1.1]</td>\n",
              "      <td>0.2 [0.0-0.6]</td>\n",
              "      <td>0.8 [0.2-2.0]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Albania</td>\n",
              "      <td>21.7 [17.0-26.7]</td>\n",
              "      <td>21.6 [14.8-29.0]</td>\n",
              "      <td>21.8 [15.3-28.9]</td>\n",
              "      <td>21.1 [16.6-26.0]</td>\n",
              "      <td>20.9 [14.4-28.1]</td>\n",
              "      <td>21.3 [15.1-28.1]</td>\n",
              "      <td>20.5 [16.2-25.1]</td>\n",
              "      <td>20.2 [13.9-27.3]</td>\n",
              "      <td>20.8 [14.9-27.4]</td>\n",
              "      <td>...</td>\n",
              "      <td>9.1 [4.6-15.5]</td>\n",
              "      <td>6.8 [4.0-10.7]</td>\n",
              "      <td>4.8 [2.0-9.3]</td>\n",
              "      <td>8.9 [4.3-15.4]</td>\n",
              "      <td>6.7 [3.8-10.6]</td>\n",
              "      <td>4.6 [1.8-9.2]</td>\n",
              "      <td>8.8 [4.1-15.4]</td>\n",
              "      <td>6.5 [3.6-10.5]</td>\n",
              "      <td>4.4 [1.7-9.2]</td>\n",
              "      <td>8.6 [3.9-15.4]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Algeria</td>\n",
              "      <td>27.4 [22.5-32.7]</td>\n",
              "      <td>19.9 [13.6-27.1]</td>\n",
              "      <td>34.9 [27.6-42.7]</td>\n",
              "      <td>26.7 [21.9-31.8]</td>\n",
              "      <td>19.2 [13.2-26.1]</td>\n",
              "      <td>34.2 [27.1-41.7]</td>\n",
              "      <td>26.0 [21.4-30.9]</td>\n",
              "      <td>18.5 [12.7-25.0]</td>\n",
              "      <td>33.6 [26.7-40.7]</td>\n",
              "      <td>...</td>\n",
              "      <td>11.8 [6.5-18.6]</td>\n",
              "      <td>7.4 [4.3-11.3]</td>\n",
              "      <td>3.1 [1.2-6.2]</td>\n",
              "      <td>11.4 [6.2-18.4]</td>\n",
              "      <td>7.2 [4.1-11.1]</td>\n",
              "      <td>2.9 [1.1-6.1]</td>\n",
              "      <td>11.1 [5.8-18.2]</td>\n",
              "      <td>6.9 [3.9-10.9]</td>\n",
              "      <td>2.8 [1.0-6.0]</td>\n",
              "      <td>10.7 [5.5-18.0]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Andorra</td>\n",
              "      <td>25.6 [20.1-31.3]</td>\n",
              "      <td>25.9 [18.0-34.3]</td>\n",
              "      <td>25.3 [17.7-33.7]</td>\n",
              "      <td>25.4 [20.1-31.0]</td>\n",
              "      <td>25.5 [17.8-33.8]</td>\n",
              "      <td>25.2 [17.7-33.4]</td>\n",
              "      <td>25.2 [20.0-30.7]</td>\n",
              "      <td>25.2 [17.6-33.3]</td>\n",
              "      <td>25.1 [17.8-33.1]</td>\n",
              "      <td>...</td>\n",
              "      <td>17.5 [10.9-25.3]</td>\n",
              "      <td>14.0 [9.6-19.1]</td>\n",
              "      <td>10.7 [5.6-17.4]</td>\n",
              "      <td>16.9 [10.4-24.8]</td>\n",
              "      <td>13.5 [9.1-18.6]</td>\n",
              "      <td>10.2 [5.2-16.9]</td>\n",
              "      <td>16.4 [9.8-24.4]</td>\n",
              "      <td>12.9 [8.6-18.1]</td>\n",
              "      <td>9.7 [4.7-16.3]</td>\n",
              "      <td>15.8 [9.2-23.9]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Angola</td>\n",
              "      <td>8.2 [5.1-12.2]</td>\n",
              "      <td>4.0 [1.6-7.9]</td>\n",
              "      <td>12.1 [6.8-19.0]</td>\n",
              "      <td>7.9 [4.9-11.7]</td>\n",
              "      <td>3.8 [1.5-7.3]</td>\n",
              "      <td>11.6 [6.5-18.2]</td>\n",
              "      <td>7.5 [4.7-11.2]</td>\n",
              "      <td>3.6 [1.4-6.9]</td>\n",
              "      <td>11.1 [6.2-17.5]</td>\n",
              "      <td>...</td>\n",
              "      <td>1.6 [0.5-3.7]</td>\n",
              "      <td>0.9 [0.3-2.0]</td>\n",
              "      <td>0.3 [0.0-0.9]</td>\n",
              "      <td>1.5 [0.4-3.6]</td>\n",
              "      <td>0.9 [0.3-2.0]</td>\n",
              "      <td>0.3 [0.0-0.9]</td>\n",
              "      <td>1.4 [0.4-3.5]</td>\n",
              "      <td>0.8 [0.3-1.9]</td>\n",
              "      <td>0.2 [0.0-0.8]</td>\n",
              "      <td>1.4 [0.4-3.4]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Antigua and Barbuda</td>\n",
              "      <td>18.9 [13.8-24.6]</td>\n",
              "      <td>11.6 [6.4-18.6]</td>\n",
              "      <td>25.9 [17.6-35.2]</td>\n",
              "      <td>18.4 [13.5-23.8]</td>\n",
              "      <td>11.2 [6.2-17.8]</td>\n",
              "      <td>25.3 [17.3-34.3]</td>\n",
              "      <td>18.0 [13.2-23.1]</td>\n",
              "      <td>10.8 [6.1-17.1]</td>\n",
              "      <td>24.8 [17.1-33.5]</td>\n",
              "      <td>...</td>\n",
              "      <td>9.6 [5.0-16.1]</td>\n",
              "      <td>6.0 [3.4-9.5]</td>\n",
              "      <td>2.5 [0.9-5.4]</td>\n",
              "      <td>9.3 [4.7-15.9]</td>\n",
              "      <td>5.8 [3.2-9.3]</td>\n",
              "      <td>2.4 [0.8-5.3]</td>\n",
              "      <td>9.1 [4.4-15.7]</td>\n",
              "      <td>5.6 [3.0-9.1]</td>\n",
              "      <td>2.3 [0.8-5.1]</td>\n",
              "      <td>8.8 [4.1-15.6]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Argentina</td>\n",
              "      <td>28.3 [23.4-33.5]</td>\n",
              "      <td>27.3 [20.5-35.0]</td>\n",
              "      <td>29.0 [22.5-36.0]</td>\n",
              "      <td>27.8 [23.2-32.7]</td>\n",
              "      <td>26.8 [20.2-34.1]</td>\n",
              "      <td>28.5 [22.3-35.1]</td>\n",
              "      <td>27.3 [22.9-32.0]</td>\n",
              "      <td>26.2 [20.0-33.1]</td>\n",
              "      <td>28.1 [22.1-34.4]</td>\n",
              "      <td>...</td>\n",
              "      <td>14.1 [9.0-20.5]</td>\n",
              "      <td>11.8 [8.2-16.0]</td>\n",
              "      <td>9.6 [5.2-15.4]</td>\n",
              "      <td>13.8 [8.6-20.3]</td>\n",
              "      <td>11.5 [7.8-15.8]</td>\n",
              "      <td>9.3 [4.9-15.3]</td>\n",
              "      <td>13.5 [8.1-20.2]</td>\n",
              "      <td>11.2 [7.5-15.7]</td>\n",
              "      <td>9.0 [4.6-15.2]</td>\n",
              "      <td>13.2 [7.7-20.1]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Armenia</td>\n",
              "      <td>20.2 [15.7-24.8]</td>\n",
              "      <td>17.1 [11.1-24.0]</td>\n",
              "      <td>23.0 [16.6-29.9]</td>\n",
              "      <td>19.7 [15.4-24.2]</td>\n",
              "      <td>16.6 [10.9-23.3]</td>\n",
              "      <td>22.6 [16.4-29.1]</td>\n",
              "      <td>19.2 [15.1-23.6]</td>\n",
              "      <td>16.1 [10.6-22.7]</td>\n",
              "      <td>22.1 [16.1-28.3]</td>\n",
              "      <td>...</td>\n",
              "      <td>10.5 [5.7-16.9]</td>\n",
              "      <td>7.9 [4.8-11.9]</td>\n",
              "      <td>4.9 [2.0-9.3]</td>\n",
              "      <td>10.2 [5.3-16.7]</td>\n",
              "      <td>7.6 [4.5-11.7]</td>\n",
              "      <td>4.7 [1.8-9.1]</td>\n",
              "      <td>9.8 [5.0-16.5]</td>\n",
              "      <td>7.3 [4.2-11.5]</td>\n",
              "      <td>4.5 [1.7-8.9]</td>\n",
              "      <td>9.5 [4.7-16.2]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Australia</td>\n",
              "      <td>29.0 [25.3-32.9]</td>\n",
              "      <td>29.6 [24.2-35.3]</td>\n",
              "      <td>28.4 [23.1-33.9]</td>\n",
              "      <td>28.4 [24.9-32.1]</td>\n",
              "      <td>28.9 [23.9-34.3]</td>\n",
              "      <td>27.9 [23.0-33.1]</td>\n",
              "      <td>27.9 [24.6-31.4]</td>\n",
              "      <td>28.3 [23.6-33.4]</td>\n",
              "      <td>27.4 [22.8-32.2]</td>\n",
              "      <td>...</td>\n",
              "      <td>12.0 [8.7-15.7]</td>\n",
              "      <td>11.0 [8.6-13.8]</td>\n",
              "      <td>10.3 [7.0-14.1]</td>\n",
              "      <td>11.7 [8.3-15.6]</td>\n",
              "      <td>10.8 [8.2-13.5]</td>\n",
              "      <td>10.0 [6.6-14.0]</td>\n",
              "      <td>11.5 [8.0-15.4]</td>\n",
              "      <td>10.5 [7.9-13.4]</td>\n",
              "      <td>9.7 [6.2-13.9]</td>\n",
              "      <td>11.2 [7.6-15.2]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10 rows Ã 127 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a5f840ca-98a5-403a-b739-d31ff9b93ff7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a5f840ca-98a5-403a-b739-d31ff9b93ff7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a5f840ca-98a5-403a-b739-d31ff9b93ff7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2bbfd0d5-d4d5-4abd-82f3-4f08213f6d9b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2bbfd0d5-d4d5-4abd-82f3-4f08213f6d9b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2bbfd0d5-d4d5-4abd-82f3-4f08213f6d9b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data"
            }
          },
          "metadata": {},
          "execution_count": 113
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Renomear a coluna 'Unnamed: 0' para 'Country'\n",
        "df_copia.rename(columns={'Unnamed: 0': 'Country'}, inplace=True)\n",
        "\n",
        "# Derreter o DataFrame\n",
        "df_melt = df_copia.melt(id_vars='Country', var_name='Year_Sex', value_name='Obesity')\n",
        "\n",
        "# Dividir a coluna 'Year_Sex' em duas colunas separadas 'Year' e 'Sex'\n",
        "df_melt[['Year', 'Sex']] = df_melt['Year_Sex'].str.split('.', expand=True)\n",
        "\n",
        "# Mapear os valores na coluna 'Sex' para os respectivos sexos\n",
        "sex_mapping = {'1': 'Male', '2': 'Female', None: 'Both sexes'}\n",
        "df_melt['Sex'] = df_melt['Sex'].map(sex_mapping)\n",
        "\n",
        "# Agora, podemos remover a coluna 'Year_Sex' jÃ¡ que nÃ£o precisamos mais dela\n",
        "df_melt = df_melt.drop(columns='Year_Sex')\n",
        "df_sorted = df_melt.sort_values(['Country', 'Year'])\n",
        "df_sorted"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "zzzyzZV07epB",
        "outputId": "ba6b71eb-977c-4696-9e95-1278b7df3509"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Country           Obesity  Year         Sex\n",
              "24109  Afghanistan     0.5 [0.2-1.1]  1975  Both sexes\n",
              "24305  Afghanistan     0.2 [0.0-0.6]  1975        Male\n",
              "24501  Afghanistan     0.8 [0.2-2.0]  1975      Female\n",
              "23521  Afghanistan     0.5 [0.2-1.1]  1976  Both sexes\n",
              "23717  Afghanistan     0.2 [0.0-0.7]  1976        Male\n",
              "...            ...               ...   ...         ...\n",
              "979       Zimbabwe     4.5 [2.4-7.6]  2015        Male\n",
              "1175      Zimbabwe  24.8 [18.9-31.3]  2015      Female\n",
              "195       Zimbabwe  15.5 [12.0-19.2]  2016  Both sexes\n",
              "391       Zimbabwe     4.7 [2.5-8.0]  2016        Male\n",
              "587       Zimbabwe  25.3 [19.1-32.0]  2016      Female\n",
              "\n",
              "[24696 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bd8a8e0d-5e29-43a2-85d4-ff4ae58971f4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Obesity</th>\n",
              "      <th>Year</th>\n",
              "      <th>Sex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>24109</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.5 [0.2-1.1]</td>\n",
              "      <td>1975</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24305</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.2 [0.0-0.6]</td>\n",
              "      <td>1975</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24501</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.8 [0.2-2.0]</td>\n",
              "      <td>1975</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23521</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.5 [0.2-1.1]</td>\n",
              "      <td>1976</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23717</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.2 [0.0-0.7]</td>\n",
              "      <td>1976</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>979</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>4.5 [2.4-7.6]</td>\n",
              "      <td>2015</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1175</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>24.8 [18.9-31.3]</td>\n",
              "      <td>2015</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>195</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>15.5 [12.0-19.2]</td>\n",
              "      <td>2016</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>391</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>4.7 [2.5-8.0]</td>\n",
              "      <td>2016</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>587</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>25.3 [19.1-32.0]</td>\n",
              "      <td>2016</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>24696 rows Ã 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bd8a8e0d-5e29-43a2-85d4-ff4ae58971f4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bd8a8e0d-5e29-43a2-85d4-ff4ae58971f4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bd8a8e0d-5e29-43a2-85d4-ff4ae58971f4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8e61fe16-6ffc-4382-a153-728041799fdb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8e61fe16-6ffc-4382-a153-728041799fdb')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8e61fe16-6ffc-4382-a153-728041799fdb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_13ff0ced-a50f-4708-9179-b56a362517c4\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_sorted')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_13ff0ced-a50f-4708-9179-b56a362517c4 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_sorted');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_sorted",
              "summary": "{\n  \"name\": \"df_sorted\",\n  \"rows\": 24696,\n  \"fields\": [\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 196,\n        \"samples\": [\n          \"Qatar\",\n          \"Monaco\",\n          \"Belgium\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Obesity\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 16378,\n        \"samples\": [\n          \"1.6 [0.8-2.7]\",\n          \"7.3 [4.5-10.9]\",\n          \"7.9 [5.3-10.9]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 42,\n        \"samples\": [\n          \"2000\",\n          \"1988\",\n          \"1983\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Both sexes\",\n          \"Male\",\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_melt[df_melt['Country'] == 'Monaco']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "A3KJJrtXyFlu",
        "outputId": "25c970ac-bc9c-47a8-a1da-d6d36ec17a05"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Country  Obesity  Year         Sex\n",
              "113    Monaco  No data  2016  Both sexes\n",
              "309    Monaco  No data  2016        Male\n",
              "505    Monaco  No data  2016      Female\n",
              "701    Monaco  No data  2015  Both sexes\n",
              "897    Monaco  No data  2015        Male\n",
              "...       ...      ...   ...         ...\n",
              "23829  Monaco  No data  1976        Male\n",
              "24025  Monaco  No data  1976      Female\n",
              "24221  Monaco  No data  1975  Both sexes\n",
              "24417  Monaco  No data  1975        Male\n",
              "24613  Monaco  No data  1975      Female\n",
              "\n",
              "[126 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-580cbbef-68d9-4a5c-bf4c-c042cd9de048\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Obesity</th>\n",
              "      <th>Year</th>\n",
              "      <th>Sex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>113</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>No data</td>\n",
              "      <td>2016</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>309</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>No data</td>\n",
              "      <td>2016</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>505</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>No data</td>\n",
              "      <td>2016</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>701</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>No data</td>\n",
              "      <td>2015</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>897</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>No data</td>\n",
              "      <td>2015</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23829</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>No data</td>\n",
              "      <td>1976</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24025</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>No data</td>\n",
              "      <td>1976</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24221</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>No data</td>\n",
              "      <td>1975</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24417</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>No data</td>\n",
              "      <td>1975</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24613</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>No data</td>\n",
              "      <td>1975</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>126 rows Ã 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-580cbbef-68d9-4a5c-bf4c-c042cd9de048')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-580cbbef-68d9-4a5c-bf4c-c042cd9de048 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-580cbbef-68d9-4a5c-bf4c-c042cd9de048');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2f7c56cc-3668-4df4-bb57-00b2a8adc66d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2f7c56cc-3668-4df4-bb57-00b2a8adc66d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2f7c56cc-3668-4df4-bb57-00b2a8adc66d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 115
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_sorted"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "collapsed": true,
        "id": "0VAtgJgzSAYl",
        "outputId": "9c7201d5-26ca-4255-9772-9b5a4a5ef37e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Country           Obesity  Year         Sex\n",
              "24109  Afghanistan     0.5 [0.2-1.1]  1975  Both sexes\n",
              "24305  Afghanistan     0.2 [0.0-0.6]  1975        Male\n",
              "24501  Afghanistan     0.8 [0.2-2.0]  1975      Female\n",
              "23521  Afghanistan     0.5 [0.2-1.1]  1976  Both sexes\n",
              "23717  Afghanistan     0.2 [0.0-0.7]  1976        Male\n",
              "...            ...               ...   ...         ...\n",
              "979       Zimbabwe     4.5 [2.4-7.6]  2015        Male\n",
              "1175      Zimbabwe  24.8 [18.9-31.3]  2015      Female\n",
              "195       Zimbabwe  15.5 [12.0-19.2]  2016  Both sexes\n",
              "391       Zimbabwe     4.7 [2.5-8.0]  2016        Male\n",
              "587       Zimbabwe  25.3 [19.1-32.0]  2016      Female\n",
              "\n",
              "[24696 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-98eaf2c6-4b89-4982-90b2-8141813917f0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Obesity</th>\n",
              "      <th>Year</th>\n",
              "      <th>Sex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>24109</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.5 [0.2-1.1]</td>\n",
              "      <td>1975</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24305</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.2 [0.0-0.6]</td>\n",
              "      <td>1975</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24501</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.8 [0.2-2.0]</td>\n",
              "      <td>1975</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23521</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.5 [0.2-1.1]</td>\n",
              "      <td>1976</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23717</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.2 [0.0-0.7]</td>\n",
              "      <td>1976</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>979</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>4.5 [2.4-7.6]</td>\n",
              "      <td>2015</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1175</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>24.8 [18.9-31.3]</td>\n",
              "      <td>2015</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>195</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>15.5 [12.0-19.2]</td>\n",
              "      <td>2016</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>391</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>4.7 [2.5-8.0]</td>\n",
              "      <td>2016</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>587</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>25.3 [19.1-32.0]</td>\n",
              "      <td>2016</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>24696 rows Ã 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-98eaf2c6-4b89-4982-90b2-8141813917f0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-98eaf2c6-4b89-4982-90b2-8141813917f0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-98eaf2c6-4b89-4982-90b2-8141813917f0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-838d368a-e21a-4abe-89bd-6af304917b7b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-838d368a-e21a-4abe-89bd-6af304917b7b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-838d368a-e21a-4abe-89bd-6af304917b7b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_939c7391-4203-49b2-8079-9f6ab4d93b37\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_sorted')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_939c7391-4203-49b2-8079-9f6ab4d93b37 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_sorted');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_sorted",
              "summary": "{\n  \"name\": \"df_sorted\",\n  \"rows\": 24696,\n  \"fields\": [\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 196,\n        \"samples\": [\n          \"Qatar\",\n          \"Monaco\",\n          \"Belgium\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Obesity\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 16378,\n        \"samples\": [\n          \"1.6 [0.8-2.7]\",\n          \"7.3 [4.5-10.9]\",\n          \"7.9 [5.3-10.9]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 42,\n        \"samples\": [\n          \"2000\",\n          \"1988\",\n          \"1983\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Both sexes\",\n          \"Male\",\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 116
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_sorted.reset_index(drop=True, inplace=True)\n",
        "df_sorted"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "collapsed": true,
        "id": "-p5k0SBoPrg-",
        "outputId": "40c9bda9-838c-4bba-ef46-b3f9ae51ded6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Country           Obesity  Year         Sex\n",
              "0      Afghanistan     0.5 [0.2-1.1]  1975  Both sexes\n",
              "1      Afghanistan     0.2 [0.0-0.6]  1975        Male\n",
              "2      Afghanistan     0.8 [0.2-2.0]  1975      Female\n",
              "3      Afghanistan     0.5 [0.2-1.1]  1976  Both sexes\n",
              "4      Afghanistan     0.2 [0.0-0.7]  1976        Male\n",
              "...            ...               ...   ...         ...\n",
              "24691     Zimbabwe     4.5 [2.4-7.6]  2015        Male\n",
              "24692     Zimbabwe  24.8 [18.9-31.3]  2015      Female\n",
              "24693     Zimbabwe  15.5 [12.0-19.2]  2016  Both sexes\n",
              "24694     Zimbabwe     4.7 [2.5-8.0]  2016        Male\n",
              "24695     Zimbabwe  25.3 [19.1-32.0]  2016      Female\n",
              "\n",
              "[24696 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6cbea18e-7906-4f07-8d84-08be8ef95f83\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Obesity</th>\n",
              "      <th>Year</th>\n",
              "      <th>Sex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.5 [0.2-1.1]</td>\n",
              "      <td>1975</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.2 [0.0-0.6]</td>\n",
              "      <td>1975</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.8 [0.2-2.0]</td>\n",
              "      <td>1975</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.5 [0.2-1.1]</td>\n",
              "      <td>1976</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.2 [0.0-0.7]</td>\n",
              "      <td>1976</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24691</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>4.5 [2.4-7.6]</td>\n",
              "      <td>2015</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24692</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>24.8 [18.9-31.3]</td>\n",
              "      <td>2015</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24693</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>15.5 [12.0-19.2]</td>\n",
              "      <td>2016</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24694</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>4.7 [2.5-8.0]</td>\n",
              "      <td>2016</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24695</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>25.3 [19.1-32.0]</td>\n",
              "      <td>2016</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>24696 rows Ã 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6cbea18e-7906-4f07-8d84-08be8ef95f83')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6cbea18e-7906-4f07-8d84-08be8ef95f83 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6cbea18e-7906-4f07-8d84-08be8ef95f83');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-928a1b3e-0064-44ad-a5dc-c74fa5943c58\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-928a1b3e-0064-44ad-a5dc-c74fa5943c58')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-928a1b3e-0064-44ad-a5dc-c74fa5943c58 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_c2ac82d4-6bd9-4f26-9bc4-977c5c3ecdc5\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_sorted')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c2ac82d4-6bd9-4f26-9bc4-977c5c3ecdc5 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_sorted');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_sorted",
              "summary": "{\n  \"name\": \"df_sorted\",\n  \"rows\": 24696,\n  \"fields\": [\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 196,\n        \"samples\": [\n          \"Qatar\",\n          \"Monaco\",\n          \"Belgium\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Obesity\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 16378,\n        \"samples\": [\n          \"1.6 [0.8-2.7]\",\n          \"7.3 [4.5-10.9]\",\n          \"7.9 [5.3-10.9]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 42,\n        \"samples\": [\n          \"2000\",\n          \"1988\",\n          \"1983\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Both sexes\",\n          \"Male\",\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 117
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_sorted"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "collapsed": true,
        "id": "_CPCMciwR9sw",
        "outputId": "6fedf7c6-5886-481e-e873-2022c877affb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Country           Obesity  Year         Sex\n",
              "0      Afghanistan     0.5 [0.2-1.1]  1975  Both sexes\n",
              "1      Afghanistan     0.2 [0.0-0.6]  1975        Male\n",
              "2      Afghanistan     0.8 [0.2-2.0]  1975      Female\n",
              "3      Afghanistan     0.5 [0.2-1.1]  1976  Both sexes\n",
              "4      Afghanistan     0.2 [0.0-0.7]  1976        Male\n",
              "...            ...               ...   ...         ...\n",
              "24691     Zimbabwe     4.5 [2.4-7.6]  2015        Male\n",
              "24692     Zimbabwe  24.8 [18.9-31.3]  2015      Female\n",
              "24693     Zimbabwe  15.5 [12.0-19.2]  2016  Both sexes\n",
              "24694     Zimbabwe     4.7 [2.5-8.0]  2016        Male\n",
              "24695     Zimbabwe  25.3 [19.1-32.0]  2016      Female\n",
              "\n",
              "[24696 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6c62badf-c83d-4289-a7e4-8e7ff9965eaf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Obesity</th>\n",
              "      <th>Year</th>\n",
              "      <th>Sex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.5 [0.2-1.1]</td>\n",
              "      <td>1975</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.2 [0.0-0.6]</td>\n",
              "      <td>1975</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.8 [0.2-2.0]</td>\n",
              "      <td>1975</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.5 [0.2-1.1]</td>\n",
              "      <td>1976</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.2 [0.0-0.7]</td>\n",
              "      <td>1976</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24691</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>4.5 [2.4-7.6]</td>\n",
              "      <td>2015</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24692</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>24.8 [18.9-31.3]</td>\n",
              "      <td>2015</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24693</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>15.5 [12.0-19.2]</td>\n",
              "      <td>2016</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24694</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>4.7 [2.5-8.0]</td>\n",
              "      <td>2016</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24695</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>25.3 [19.1-32.0]</td>\n",
              "      <td>2016</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>24696 rows Ã 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6c62badf-c83d-4289-a7e4-8e7ff9965eaf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6c62badf-c83d-4289-a7e4-8e7ff9965eaf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6c62badf-c83d-4289-a7e4-8e7ff9965eaf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-dc4d2983-f012-4482-875a-7451abf5aa11\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dc4d2983-f012-4482-875a-7451abf5aa11')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-dc4d2983-f012-4482-875a-7451abf5aa11 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_c42f970b-8bb4-41ca-8284-1f4c100c534b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_sorted')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c42f970b-8bb4-41ca-8284-1f4c100c534b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_sorted');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_sorted",
              "summary": "{\n  \"name\": \"df_sorted\",\n  \"rows\": 24696,\n  \"fields\": [\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 196,\n        \"samples\": [\n          \"Qatar\",\n          \"Monaco\",\n          \"Belgium\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Obesity\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 16378,\n        \"samples\": [\n          \"1.6 [0.8-2.7]\",\n          \"7.3 [4.5-10.9]\",\n          \"7.9 [5.3-10.9]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 42,\n        \"samples\": [\n          \"2000\",\n          \"1988\",\n          \"1983\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Both sexes\",\n          \"Male\",\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 118
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_sorted[df_sorted['Country'] == 'Country']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "ItzQ6hgxyAc2",
        "outputId": "17b650b1-cf69-48b9-eeb1-6310c7eed1e2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Country     Obesity  Year         Sex\n",
              "5166  Country  Both sexes  1975  Both sexes\n",
              "5167  Country        Male  1975        Male\n",
              "5168  Country      Female  1975      Female\n",
              "5169  Country  Both sexes  1976  Both sexes\n",
              "5170  Country        Male  1976        Male\n",
              "...       ...         ...   ...         ...\n",
              "5287  Country        Male  2015        Male\n",
              "5288  Country      Female  2015      Female\n",
              "5289  Country  Both sexes  2016  Both sexes\n",
              "5290  Country        Male  2016        Male\n",
              "5291  Country      Female  2016      Female\n",
              "\n",
              "[126 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1465d69e-bf84-42fb-9605-2308d62eac3e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Obesity</th>\n",
              "      <th>Year</th>\n",
              "      <th>Sex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>5166</th>\n",
              "      <td>Country</td>\n",
              "      <td>Both sexes</td>\n",
              "      <td>1975</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5167</th>\n",
              "      <td>Country</td>\n",
              "      <td>Male</td>\n",
              "      <td>1975</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5168</th>\n",
              "      <td>Country</td>\n",
              "      <td>Female</td>\n",
              "      <td>1975</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5169</th>\n",
              "      <td>Country</td>\n",
              "      <td>Both sexes</td>\n",
              "      <td>1976</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5170</th>\n",
              "      <td>Country</td>\n",
              "      <td>Male</td>\n",
              "      <td>1976</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5287</th>\n",
              "      <td>Country</td>\n",
              "      <td>Male</td>\n",
              "      <td>2015</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5288</th>\n",
              "      <td>Country</td>\n",
              "      <td>Female</td>\n",
              "      <td>2015</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5289</th>\n",
              "      <td>Country</td>\n",
              "      <td>Both sexes</td>\n",
              "      <td>2016</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5290</th>\n",
              "      <td>Country</td>\n",
              "      <td>Male</td>\n",
              "      <td>2016</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5291</th>\n",
              "      <td>Country</td>\n",
              "      <td>Female</td>\n",
              "      <td>2016</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>126 rows Ã 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1465d69e-bf84-42fb-9605-2308d62eac3e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1465d69e-bf84-42fb-9605-2308d62eac3e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1465d69e-bf84-42fb-9605-2308d62eac3e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b361d016-63ea-4a94-8afd-580c1cb88dc5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b361d016-63ea-4a94-8afd-580c1cb88dc5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b361d016-63ea-4a94-8afd-580c1cb88dc5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 119
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_sorted['Obesity'] = df_sorted['Obesity'].str.extract(r'(\\d+\\.\\d+)').astype(float)\n",
        "df_sorted['Year'] = df_sorted['Year'].astype(int)\n",
        "df_sorted"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "7tjhNZ417nDH",
        "outputId": "0d765dce-0579-45c7-b0a9-23cd70286e8b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Country  Obesity  Year         Sex\n",
              "0      Afghanistan      0.5  1975  Both sexes\n",
              "1      Afghanistan      0.2  1975        Male\n",
              "2      Afghanistan      0.8  1975      Female\n",
              "3      Afghanistan      0.5  1976  Both sexes\n",
              "4      Afghanistan      0.2  1976        Male\n",
              "...            ...      ...   ...         ...\n",
              "24691     Zimbabwe      4.5  2015        Male\n",
              "24692     Zimbabwe     24.8  2015      Female\n",
              "24693     Zimbabwe     15.5  2016  Both sexes\n",
              "24694     Zimbabwe      4.7  2016        Male\n",
              "24695     Zimbabwe     25.3  2016      Female\n",
              "\n",
              "[24696 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-abaf7141-9961-4717-902a-4efd04d2b6df\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Obesity</th>\n",
              "      <th>Year</th>\n",
              "      <th>Sex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.5</td>\n",
              "      <td>1975</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.2</td>\n",
              "      <td>1975</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.8</td>\n",
              "      <td>1975</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.5</td>\n",
              "      <td>1976</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.2</td>\n",
              "      <td>1976</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24691</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>4.5</td>\n",
              "      <td>2015</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24692</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>24.8</td>\n",
              "      <td>2015</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24693</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>15.5</td>\n",
              "      <td>2016</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24694</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>4.7</td>\n",
              "      <td>2016</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24695</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>25.3</td>\n",
              "      <td>2016</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>24696 rows Ã 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-abaf7141-9961-4717-902a-4efd04d2b6df')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-abaf7141-9961-4717-902a-4efd04d2b6df button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-abaf7141-9961-4717-902a-4efd04d2b6df');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0804d204-07a5-43d5-9c1f-d476b46293ca\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0804d204-07a5-43d5-9c1f-d476b46293ca')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0804d204-07a5-43d5-9c1f-d476b46293ca button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_32b3e32d-8ff4-4041-9a53-b855bad30ba0\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_sorted')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_32b3e32d-8ff4-4041-9a53-b855bad30ba0 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_sorted');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_sorted",
              "summary": "{\n  \"name\": \"df_sorted\",\n  \"rows\": 24696,\n  \"fields\": [\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 196,\n        \"samples\": [\n          \"Qatar\",\n          \"Monaco\",\n          \"Belgium\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Obesity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.407428218618834,\n        \"min\": 0.1,\n        \"max\": 63.3,\n        \"num_unique_values\": 601,\n        \"samples\": [\n          16.6,\n          50.7,\n          62.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 1975,\n        \"max\": 2016,\n        \"num_unique_values\": 42,\n        \"samples\": [\n          2000,\n          1988,\n          1983\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Both sexes\",\n          \"Male\",\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 120
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_sorted[df_sorted['Country'] == 'Monaco']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "TeJLf6W5x3eZ",
        "outputId": "bbafa827-15f9-4c7a-c375-12815adc3533"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Country  Obesity  Year         Sex\n",
              "14238  Monaco      NaN  1975  Both sexes\n",
              "14239  Monaco      NaN  1975        Male\n",
              "14240  Monaco      NaN  1975      Female\n",
              "14241  Monaco      NaN  1976  Both sexes\n",
              "14242  Monaco      NaN  1976        Male\n",
              "...       ...      ...   ...         ...\n",
              "14359  Monaco      NaN  2015        Male\n",
              "14360  Monaco      NaN  2015      Female\n",
              "14361  Monaco      NaN  2016  Both sexes\n",
              "14362  Monaco      NaN  2016        Male\n",
              "14363  Monaco      NaN  2016      Female\n",
              "\n",
              "[126 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a9ce6375-aa47-4a09-b25f-f98d9056254a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Obesity</th>\n",
              "      <th>Year</th>\n",
              "      <th>Sex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>14238</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1975</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14239</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1975</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14240</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1975</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14241</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1976</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14242</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1976</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14359</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2015</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14360</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2015</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14361</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2016</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14362</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2016</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14363</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2016</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>126 rows Ã 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a9ce6375-aa47-4a09-b25f-f98d9056254a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a9ce6375-aa47-4a09-b25f-f98d9056254a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a9ce6375-aa47-4a09-b25f-f98d9056254a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e4a09187-297b-4cad-a8f7-a3b89a59dd80\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e4a09187-297b-4cad-a8f7-a3b89a59dd80')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e4a09187-297b-4cad-a8f7-a3b89a59dd80 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_sorted[df_sorted['Country'] == 'Monaco']\",\n  \"rows\": 126,\n  \"fields\": [\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Monaco\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Obesity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 1975,\n        \"max\": 2016,\n        \"num_unique_values\": 42,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 121
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_sorted['Obesity'].dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yjZLzsggUTBI",
        "outputId": "97e55262-5944-4dfb-84db-ad96b54f9af5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dtype('float64')"
            ]
          },
          "metadata": {},
          "execution_count": 122
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Remover as linhas onde 'Country' aparece na coluna 'Country'\n",
        "df_sorted_corrected = df_sorted[df_sorted['Country'] != 'Country']\n",
        "\n",
        "# Verificar novamente os paÃ­ses com valores NaN na coluna 'Obesity'\n",
        "countries_with_nan_corrected = df_sorted_corrected[df_sorted_corrected['Obesity'].isna()]['Country'].unique()\n",
        "print(\"PaÃ­ses com valores NaN na coluna 'Obesity' apÃ³s remover linhas incorretas:\")\n",
        "print(countries_with_nan_corrected)\n",
        "\n",
        "# Exibir todas as linhas restantes com valores NaN na coluna 'Obesity'\n",
        "rows_with_nan_corrected = df_sorted_corrected[df_sorted_corrected['Obesity'].isna()]\n",
        "print(\"Linhas com valores NaN na coluna 'Obesity' apÃ³s remover linhas incorretas:\")\n",
        "print(rows_with_nan_corrected)\n",
        "\n",
        "# Imputar valores NaN com a mÃ©dia da coluna 'Obesity'\n",
        "df_sorted_corrected['Obesity'].fillna(df_sorted_corrected['Obesity'].mean(), inplace=True)\n",
        "\n",
        "# Verificar o DataFrame resultante\n",
        "print(df_sorted_corrected)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eOq6eap8qBOV",
        "outputId": "a3d499e3-e22e-421c-c874-5bfd403cc771"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PaÃ­ses com valores NaN na coluna 'Obesity' apÃ³s remover linhas incorretas:\n",
            "['Monaco' 'San Marino' 'South Sudan' 'Sudan']\n",
            "Linhas com valores NaN na coluna 'Obesity' apÃ³s remover linhas incorretas:\n",
            "      Country  Obesity  Year         Sex\n",
            "14238  Monaco      NaN  1975  Both sexes\n",
            "14239  Monaco      NaN  1975        Male\n",
            "14240  Monaco      NaN  1975      Female\n",
            "14241  Monaco      NaN  1976  Both sexes\n",
            "14242  Monaco      NaN  1976        Male\n",
            "...       ...      ...   ...         ...\n",
            "21037   Sudan      NaN  2015        Male\n",
            "21038   Sudan      NaN  2015      Female\n",
            "21039   Sudan      NaN  2016  Both sexes\n",
            "21040   Sudan      NaN  2016        Male\n",
            "21041   Sudan      NaN  2016      Female\n",
            "\n",
            "[504 rows x 4 columns]\n",
            "           Country  Obesity  Year         Sex\n",
            "0      Afghanistan      0.5  1975  Both sexes\n",
            "1      Afghanistan      0.2  1975        Male\n",
            "2      Afghanistan      0.8  1975      Female\n",
            "3      Afghanistan      0.5  1976  Both sexes\n",
            "4      Afghanistan      0.2  1976        Male\n",
            "...            ...      ...   ...         ...\n",
            "24691     Zimbabwe      4.5  2015        Male\n",
            "24692     Zimbabwe     24.8  2015      Female\n",
            "24693     Zimbabwe     15.5  2016  Both sexes\n",
            "24694     Zimbabwe      4.7  2016        Male\n",
            "24695     Zimbabwe     25.3  2016      Female\n",
            "\n",
            "[24570 rows x 4 columns]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-123-760a0b4202b6>:15: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_sorted_corrected['Obesity'].fillna(df_sorted_corrected['Obesity'].mean(), inplace=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Verificar novamente os paÃ­ses com valores NaN na coluna 'Obesity'\n",
        "countries_with_nan_corrected = df_sorted_corrected[df_sorted_corrected['Obesity'].isna()]['Country'].unique()\n",
        "print(\"PaÃ­ses com valores NaN na coluna 'Obesity' apÃ³s correÃ§Ã£o:\")\n",
        "print(countries_with_nan_corrected)\n",
        "\n",
        "# Exibir todas as linhas restantes com valores NaN na coluna 'Obesity'\n",
        "rows_with_nan_corrected = df_sorted_corrected[df_sorted_corrected['Obesity'].isna()]\n",
        "print(\"Linhas com valores NaN na coluna 'Obesity' apÃ³s correÃ§Ã£o:\")\n",
        "print(rows_with_nan_corrected)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nq251mRawfDW",
        "outputId": "5f507f11-b24f-4450-9ef5-266f169a4ecf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PaÃ­ses com valores NaN na coluna 'Obesity' apÃ³s correÃ§Ã£o:\n",
            "[]\n",
            "Linhas com valores NaN na coluna 'Obesity' apÃ³s correÃ§Ã£o:\n",
            "Empty DataFrame\n",
            "Columns: [Country, Obesity, Year, Sex]\n",
            "Index: []\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Salvar o DataFrame limpo em um novo arquivo CSV com nome 'obesity-cleaned.csv'\n",
        "df_sorted_corrected.to_csv('/content/obesity-cleaned.csv', index=False)\n",
        "\n",
        "print(\"Novo arquivo 'obesity-cleaned.csv' criado com sucesso!\")\n",
        "\n",
        "df_sorted_corrected"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "Y5ldIs6O8k8C",
        "outputId": "1e7d0859-9b26-4337-947d-1845ba2f8bfb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Novo arquivo 'obesity-cleaned.csv' criado com sucesso!\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Country  Obesity  Year         Sex\n",
              "0      Afghanistan      0.5  1975  Both sexes\n",
              "1      Afghanistan      0.2  1975        Male\n",
              "2      Afghanistan      0.8  1975      Female\n",
              "3      Afghanistan      0.5  1976  Both sexes\n",
              "4      Afghanistan      0.2  1976        Male\n",
              "...            ...      ...   ...         ...\n",
              "24691     Zimbabwe      4.5  2015        Male\n",
              "24692     Zimbabwe     24.8  2015      Female\n",
              "24693     Zimbabwe     15.5  2016  Both sexes\n",
              "24694     Zimbabwe      4.7  2016        Male\n",
              "24695     Zimbabwe     25.3  2016      Female\n",
              "\n",
              "[24570 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d202009c-7209-4339-9283-fc4fde8adcd1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Obesity</th>\n",
              "      <th>Year</th>\n",
              "      <th>Sex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.5</td>\n",
              "      <td>1975</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.2</td>\n",
              "      <td>1975</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.8</td>\n",
              "      <td>1975</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.5</td>\n",
              "      <td>1976</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.2</td>\n",
              "      <td>1976</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24691</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>4.5</td>\n",
              "      <td>2015</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24692</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>24.8</td>\n",
              "      <td>2015</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24693</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>15.5</td>\n",
              "      <td>2016</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24694</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>4.7</td>\n",
              "      <td>2016</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24695</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>25.3</td>\n",
              "      <td>2016</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>24570 rows Ã 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d202009c-7209-4339-9283-fc4fde8adcd1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d202009c-7209-4339-9283-fc4fde8adcd1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d202009c-7209-4339-9283-fc4fde8adcd1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c3d14d75-2669-47ec-9ec2-de2a2864649c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c3d14d75-2669-47ec-9ec2-de2a2864649c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c3d14d75-2669-47ec-9ec2-de2a2864649c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_667ca838-f88e-4bb4-a9af-6f2f59dd5143\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_sorted_corrected')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_667ca838-f88e-4bb4-a9af-6f2f59dd5143 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_sorted_corrected');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_sorted_corrected",
              "summary": "{\n  \"name\": \"df_sorted_corrected\",\n  \"rows\": 24570,\n  \"fields\": [\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 195,\n        \"samples\": [\n          \"Qatar\",\n          \"Belgium\",\n          \"Sierra Leone\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Obesity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.300127888591984,\n        \"min\": 0.1,\n        \"max\": 63.3,\n        \"num_unique_values\": 602,\n        \"samples\": [\n          16.6,\n          50.7,\n          60.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 1975,\n        \"max\": 2016,\n        \"num_unique_values\": 42,\n        \"samples\": [\n          2000,\n          1988,\n          1983\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Both sexes\",\n          \"Male\",\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 125
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_sorted_corrected[df_sorted_corrected['Country'] == 'Monaco']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "pGHt9e2relOM",
        "outputId": "c3a0ce6b-0bcb-4c19-a360-82f03563e6e0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Country    Obesity  Year         Sex\n",
              "14238  Monaco  12.448932  1975  Both sexes\n",
              "14239  Monaco  12.448932  1975        Male\n",
              "14240  Monaco  12.448932  1975      Female\n",
              "14241  Monaco  12.448932  1976  Both sexes\n",
              "14242  Monaco  12.448932  1976        Male\n",
              "...       ...        ...   ...         ...\n",
              "14359  Monaco  12.448932  2015        Male\n",
              "14360  Monaco  12.448932  2015      Female\n",
              "14361  Monaco  12.448932  2016  Both sexes\n",
              "14362  Monaco  12.448932  2016        Male\n",
              "14363  Monaco  12.448932  2016      Female\n",
              "\n",
              "[126 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a8fbb93a-ee92-4f05-b7b9-feb737df16b7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Obesity</th>\n",
              "      <th>Year</th>\n",
              "      <th>Sex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>14238</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>12.448932</td>\n",
              "      <td>1975</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14239</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>12.448932</td>\n",
              "      <td>1975</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14240</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>12.448932</td>\n",
              "      <td>1975</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14241</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>12.448932</td>\n",
              "      <td>1976</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14242</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>12.448932</td>\n",
              "      <td>1976</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14359</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>12.448932</td>\n",
              "      <td>2015</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14360</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>12.448932</td>\n",
              "      <td>2015</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14361</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>12.448932</td>\n",
              "      <td>2016</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14362</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>12.448932</td>\n",
              "      <td>2016</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14363</th>\n",
              "      <td>Monaco</td>\n",
              "      <td>12.448932</td>\n",
              "      <td>2016</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>126 rows Ã 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a8fbb93a-ee92-4f05-b7b9-feb737df16b7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a8fbb93a-ee92-4f05-b7b9-feb737df16b7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a8fbb93a-ee92-4f05-b7b9-feb737df16b7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-64c3e7f2-4542-41a2-945f-d19d54e9640c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-64c3e7f2-4542-41a2-945f-d19d54e9640c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-64c3e7f2-4542-41a2-945f-d19d54e9640c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_sorted_corrected[df_sorted_corrected['Country'] == 'Monaco']\",\n  \"rows\": 126,\n  \"fields\": [\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Monaco\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Obesity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.35034433739176e-15,\n        \"min\": 12.448932103382365,\n        \"max\": 12.448932103382365,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          12.448932103382365\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 1975,\n        \"max\": 2016,\n        \"num_unique_values\": 42,\n        \"samples\": [\n          2000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Both sexes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 126
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Obesidade\n"
      ],
      "metadata": {
        "id": "ZCx9Z0T5ceiF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from ipywidgets import interact"
      ],
      "metadata": {
        "id": "NpreEZgQ_Sys"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Carregando os dados\n",
        "url = '/content/obesity-cleaned.csv'\n",
        "df = pd.read_csv(url)\n",
        "df_copia = df.copy()"
      ],
      "metadata": {
        "id": "dCUn57rH-WXw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_copia"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "_cd-RhNsWqR0",
        "outputId": "074cf902-bd93-4858-98ec-be90e189c6d9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Country  Obesity  Year         Sex\n",
              "0      Afghanistan      0.5  1975  Both sexes\n",
              "1      Afghanistan      0.2  1975        Male\n",
              "2      Afghanistan      0.8  1975      Female\n",
              "3      Afghanistan      0.5  1976  Both sexes\n",
              "4      Afghanistan      0.2  1976        Male\n",
              "...            ...      ...   ...         ...\n",
              "24565     Zimbabwe      4.5  2015        Male\n",
              "24566     Zimbabwe     24.8  2015      Female\n",
              "24567     Zimbabwe     15.5  2016  Both sexes\n",
              "24568     Zimbabwe      4.7  2016        Male\n",
              "24569     Zimbabwe     25.3  2016      Female\n",
              "\n",
              "[24570 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-40f8b86f-815b-47d6-babd-839438b4a14c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Obesity</th>\n",
              "      <th>Year</th>\n",
              "      <th>Sex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.5</td>\n",
              "      <td>1975</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.2</td>\n",
              "      <td>1975</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.8</td>\n",
              "      <td>1975</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.5</td>\n",
              "      <td>1976</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>0.2</td>\n",
              "      <td>1976</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24565</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>4.5</td>\n",
              "      <td>2015</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24566</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>24.8</td>\n",
              "      <td>2015</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24567</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>15.5</td>\n",
              "      <td>2016</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24568</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>4.7</td>\n",
              "      <td>2016</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24569</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>25.3</td>\n",
              "      <td>2016</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>24570 rows Ã 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-40f8b86f-815b-47d6-babd-839438b4a14c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-40f8b86f-815b-47d6-babd-839438b4a14c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-40f8b86f-815b-47d6-babd-839438b4a14c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6e8d840c-eb3f-4f89-b947-6876e0911da6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6e8d840c-eb3f-4f89-b947-6876e0911da6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6e8d840c-eb3f-4f89-b947-6876e0911da6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_4e6635be-0877-41f9-9524-de13ea607f97\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_copia')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_4e6635be-0877-41f9-9524-de13ea607f97 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_copia');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_copia",
              "summary": "{\n  \"name\": \"df_copia\",\n  \"rows\": 24570,\n  \"fields\": [\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 195,\n        \"samples\": [\n          \"Qatar\",\n          \"Belgium\",\n          \"Sierra Leone\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Obesity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.300127888591984,\n        \"min\": 0.1,\n        \"max\": 63.3,\n        \"num_unique_values\": 602,\n        \"samples\": [\n          16.6,\n          50.7,\n          60.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 1975,\n        \"max\": 2016,\n        \"num_unique_values\": 42,\n        \"samples\": [\n          2000,\n          1988,\n          1983\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Both sexes\",\n          \"Male\",\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 129
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##**Qual o percentual mÃ©dio de obesidade por sexo na amÃ©rica do norte no ano de 2010?**"
      ],
      "metadata": {
        "id": "3vDkco6vhkUS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Criando uma lista com os paises da america do norte\n",
        "paises_america_norte = ['Canada', 'United States of America', 'Mexico']\n",
        "\n",
        "# Gerando um dataFrame com base no ano de 2010 e os paises da lista que estÃ£o no dataframe\n",
        "df_2010_america_norte = df_copia[(df_copia['Year'] == 2010) & (df_copia['Country'].isin(paises_america_norte))]"
      ],
      "metadata": {
        "id": "PyvadiVXbzCg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_2010_america_norte"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 331
        },
        "id": "cKDWA6GolLtn",
        "outputId": "edb53f50-a956-4556-9855-084a5bbc5b36"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                        Country  Obesity  Year         Sex\n",
              "4011                     Canada     26.0  2010  Both sexes\n",
              "4012                     Canada     25.8  2010        Male\n",
              "4013                     Canada     26.2  2010      Female\n",
              "13965                    Mexico     25.8  2010  Both sexes\n",
              "13966                    Mexico     21.1  2010        Male\n",
              "13967                    Mexico     29.8  2010      Female\n",
              "23541  United States of America     32.3  2010  Both sexes\n",
              "23542  United States of America     31.2  2010        Male\n",
              "23543  United States of America     33.3  2010      Female"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ea5ce4d5-522f-4be0-8eaf-c41758834f95\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Obesity</th>\n",
              "      <th>Year</th>\n",
              "      <th>Sex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4011</th>\n",
              "      <td>Canada</td>\n",
              "      <td>26.0</td>\n",
              "      <td>2010</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4012</th>\n",
              "      <td>Canada</td>\n",
              "      <td>25.8</td>\n",
              "      <td>2010</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4013</th>\n",
              "      <td>Canada</td>\n",
              "      <td>26.2</td>\n",
              "      <td>2010</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13965</th>\n",
              "      <td>Mexico</td>\n",
              "      <td>25.8</td>\n",
              "      <td>2010</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13966</th>\n",
              "      <td>Mexico</td>\n",
              "      <td>21.1</td>\n",
              "      <td>2010</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13967</th>\n",
              "      <td>Mexico</td>\n",
              "      <td>29.8</td>\n",
              "      <td>2010</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23541</th>\n",
              "      <td>United States of America</td>\n",
              "      <td>32.3</td>\n",
              "      <td>2010</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23542</th>\n",
              "      <td>United States of America</td>\n",
              "      <td>31.2</td>\n",
              "      <td>2010</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23543</th>\n",
              "      <td>United States of America</td>\n",
              "      <td>33.3</td>\n",
              "      <td>2010</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ea5ce4d5-522f-4be0-8eaf-c41758834f95')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ea5ce4d5-522f-4be0-8eaf-c41758834f95 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ea5ce4d5-522f-4be0-8eaf-c41758834f95');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-37fe0a93-a06e-457d-a17e-781dabb6f857\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-37fe0a93-a06e-457d-a17e-781dabb6f857')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-37fe0a93-a06e-457d-a17e-781dabb6f857 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_c8a20e44-a5b4-46bd-b00c-56428c56cbe4\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_2010_america_norte')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c8a20e44-a5b4-46bd-b00c-56428c56cbe4 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_2010_america_norte');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_2010_america_norte",
              "summary": "{\n  \"name\": \"df_2010_america_norte\",\n  \"rows\": 9,\n  \"fields\": [\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Canada\",\n          \"Mexico\",\n          \"United States of America\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Obesity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.9459191296550626,\n        \"min\": 21.1,\n        \"max\": 33.3,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          25.8,\n          32.3,\n          26.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2010,\n        \"max\": 2010,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2010\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Both sexes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 131
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# WhiteGrid como estilo de fundo\n",
        "sns.set(style='whitegrid')\n",
        "# Tamanho da figuraa\n",
        "plt.figure(figsize=(10, 6))\n",
        "# Tipo de grafico, eixo x=sexo, eixo y=obesidade e os dados sÃ£o do dataFrame df_2010_america_norte\n",
        "sns.barplot(x='Sex', y='Obesity', hue='Country', data=df_2010_america_norte)\n",
        "# Titulo do grafico, label x e y\n",
        "plt.title('Percentual obesidade por sexo na AmÃ©rica do norte em 2010')\n",
        "plt.xlabel('Sexo')\n",
        "plt.ylabel('Obesidade (%)')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "K-QfOlP4fZhG",
        "outputId": "47b438a7-8cfa-4eaf-873f-95201609acb6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculando a mÃ©dia da taxa de obesidade para cada paÃ­s da AmÃ©rica do Norte em 2010\n",
        "media_obesidade_2010 = df_2010_america_norte.groupby('Country')['Obesity'].mean().reset_index()\n",
        "\n",
        "# Plotando a mÃ©dia da taxa de obesidade para cada paÃ­s\n",
        "sns.set(style='whitegrid')\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Country', y='Obesity', data=media_obesidade_2010)\n",
        "plt.title('MÃ©dia da Taxa de Obesidade nos PaÃ­ses da AmÃ©rica do Norte em 2010')\n",
        "plt.xlabel('PaÃ­s')\n",
        "plt.ylabel('MÃ©dia da Taxa de Obesidade (%)')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "vH0HGlncnzVI",
        "outputId": "48e9e9aa-f97d-47c8-d270-8381c7e4ca80"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Filtrar o DataFrame para os paÃ­ses da AmÃ©rica do Norte\n",
        "df_america_norte = df_copia[df_copia['Country'].isin(paises_america_norte)]\n",
        "\n",
        "# Calcular a mÃ©dia da taxa de obesidade para os paÃ­ses da AmÃ©rica do Norte em 2010\n",
        "media_obesidade_america_norte = df_america_norte[df_america_norte['Year'] == 2010]['Obesity'].mean()\n",
        "\n",
        "# Exibir a mÃ©dia\n",
        "print(f\"A mÃ©dia da taxa de obesidade para todos os paÃ­ses da AmÃ©rica do Norte em 2010 Ã©: {media_obesidade_america_norte:.2f}%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Uu6nJMAcoUYO",
        "outputId": "5be86924-a1ba-410a-b73b-65121602ed54"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "A mÃ©dia da taxa de obesidade para todos os paÃ­ses da AmÃ©rica do Norte em 2010 Ã©: 27.94%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Criando um DataFrame para plotar o grÃ¡fico\n",
        "dados_grafico = pd.DataFrame({\n",
        "    'RegiÃ£o': ['AmÃ©rica do Norte'],\n",
        "    'Obesidade MÃ©dia (%)': [media_obesidade_america_norte]\n",
        "})\n",
        "\n",
        "# ConfiguraÃ§Ãµes do grÃ¡fico\n",
        "sns.set(style='whitegrid')\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.barplot(x='RegiÃ£o', y='Obesidade MÃ©dia (%)', data=dados_grafico)\n",
        "plt.title('MÃ©dia da Taxa de Obesidade na AmÃ©rica do Norte em 2010')\n",
        "plt.ylim(0, dados_grafico['Obesidade MÃ©dia (%)'].max() + 5)  # Ajuste para melhor visualizaÃ§Ã£o\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "f3zswqqdpUxk",
        "outputId": "bcdb91b2-4b5a-4c79-952d-6bb453b6caa8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "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a9aoU6dO2rp1q/LmzfvE4+zatUuRkZFq0qSJcufOrUqVKmnz5s3JfiCOj49X7969VbFiRQ0bNkybN2/WuHHj5OLioilTpqhZs2aqX7++goKCNHz4cPn6+lp+dlL7mmzYsEEPHz5U27Zt5ezsrOzZsyf74eDMmTPq2LGjMmXKpHbt2qlgwYL666+/tGvXLg0dOlTS3x+Qjh8/riZNmihfvnwKDQ3V6tWr1aVLF23dujXJh7dHmc1m9e/fX8eOHdObb74pDw8Pff/998n+Pvnxxx/Vu3dvFSpUSAMHDlR0dLRWrFih9u3ba8OGDSpUqNATz4ejo6P69eun4cOHP7EXd8OGDRo5cqS8vb31zjvv6Pbt21q2bJl+/vlnff3118qWLZulbVxcnCVsDh8+XC+99JJy586t+/fv69q1a5YPjFmzZpX094fPfv366dixY2rbtq08PDz0559/aunSpbp48aJmz5792Ofx008/qXfv3ipbtqwGDhwok8mkDRs2qGvXrlq1apV8fHys2g8dOlQeHh569913tXfvXs2ZM0c5cuRQUFCQKleubPl5+/zzz+Xt7a3XXnvtia/lP926dUuSlDNnTsuy06dPK0uWLEmGnyXWd/r06SRD/p7k999/lySVLVvWanmZMmXk4OCg06dP/+u/HbSJGTCbzevXrzd7enqaT506ZV6xYoXZz8/PHBUVZTabzebBgwebO3fubDabzeY6deqY+/TpY9nuyJEjZk9PT/OmTZus9vfDDz9YLb99+7a5TJky5j59+pgTEhIs7f7zn/+YPT09zcOHD7csO3jwoNnT09N88OBBy7LEWh41d+5cs5eXlzk0NPSxz+3TTz81e3p6mk+ePGlZdvv2bXOFChXMnp6e5suXLz/2OKNHjzaXK1fO/PDhw8ce51Fjx441e3p6Wi1Lbt89evQw161b12pZZGSkuV69euYmTZqYHz58aO7Tp4+5fPnySZ6nrftLTosWLczVqlUzh4eHW5bt37/f7Onpaa5Tp45lma3nNzmnT582e3p6msePH//YWpo1a2auVKmS5fHw4cPNnp6e5k8++cSyLCEhwdynTx9zmTJlzLdv305Vbd9//73lZ/txPD09zdOnT7c87t+/v9nb29vqdT937py5VKlSdp3b1LwHZs2aZfb19TVfuHDBap+TJ082lypVynz16tXHPpc6deqY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pxwQEKDy5cvryy+/VGhoqEqUKKHvvvsu2VD4/vvvq3fv3mrXrp1at25tmSbMzc1NAwcOTPVzk/5/LO7p06etljs5OWnYsGEaOXKkOnXqpCZNmlimCStYsKDNdyYrU6aMgoODNWHCBHl7eytLliwKCAhQixYt9O233+qjjz7SoUOHVL58ecXHxyskJETbtm3TggUL5O3tnew+HRwcNH78ePXu3VtNmzbV66+/rrx58+r69es6dOiQXF1d9dVXX9n1etgiNDRU/fr1k8lkUoMGDZJcMOnl5WXpRc2XL5+6dOmihQsXKi4uTt7e3tqxY4eOHj2qyZMnW304Cg0NtfxM/frrr5Jk+YBeoEAByzeUL730kgYPHqxx48Zp8ODBqlGjho4ePapNmzZp6NChNv3cgYCLNDBu3DiVLVtWQUFBmjJlihwdHVWwYEE1b97c6hasb7/9tpydnRUUFKRDhw7Jx8dHixYtUt++fR+7fycnJ3311VcaP3685s6dq8yZM6tevXrq2LGjTXMB5smTR8uWLdP48eM1b9485ciRQ2+++aby5MljNXdmzpw59dVXX+nzzz/X1KlTlS1bNjVv3lxVqlRRz5497X+B9HdInz59uqZOnarPP/9cL7/8stq3by93d3d98MEHlnb/+c9/9NdffykoKMhyFa6zs7MmTpyodu3aadKkSfr4449t3l9KatasqWnTpmnq1Kn68ssvVaRIEU2YMEE7d+606imWbD+/KenWrZvKli2rRYsWaenSpYqIiFDu3LnVsGFDvfXWW8kOXXB0dNSCBQv08ccf64svvlDWrFk1cOBADRgwINW1VapUSb/88ouCg4N169Ytubm5ycfHR5MnT35skCtZsqQWLlyoCRMmaPr06cqXL58GDRqkmzdvWgXc1JwLW98DLi4uWr58uebOnatt27bp66+/lqurq4oWLapBgwaleAFhar311luKiorS5s2bFRwcrNKlS2vu3Ln68ssvH7vdb7/9ppCQkMcOP6hTp44++eQTy13Ontazek1KliyptWvXatq0aVq9erUePnyoAgUKWM3qMGrUKDk4OGjz5s16+PChypcvr8WLF6c4HvhRDg4OmjNnjj777DNt2rRJJpNJAQEBGjFihNWQK+nvXv4FCxZo+vTpmj59ujJlyqTXXntN7733nk0fOpKTKVMm9evXL9mxsK+//rpe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OjqqePHi+uijj9SsWTNt2rQprWsFAAAAnsiugBsXF6dy5cqluN7Pz0/x8fF2FwUAAADYy66AW716de3fvz/F9fv27VO1atXsLgoAAACwl00BNywszOrfkCFDdOXKFQ0cOFA//fSTQkNDFRoaqh9//FEDBgzQ1atXNWTIkGddOwAAAJCETReZVa5cWSaTyWqZ2WzWn3/+qZ07dyZZLklNmzbV77//nkZlAgAAALaxKeAOGDAgScAFAAAAMiKbAu6gQYOedR0AAABAmrDrIrNEkZGRunHjhh48eJBW9QAAAABPJdU3erhy5YoWLFigvXv36tq1a5blefPmVZ06ddSjRw8VLlw4TYsEAAAAbJWqHtwdO3aoefPmCgoKkoODg+rUqaOmTZuqTp06cnR01OrVq9W8eXPt2LHjWdULAAAAPJbNPbjnzp3T0KFDVbhwYY0bN04VK1ZM0ubo0aP66KOP9M4772jDhg0qUaJEmhYLAAAAPInNPbhfffWVcubMqVWrViUbbiWpYsWKWrlypXLkyKG5c+emWZEAAACArWwOuIcOHVLr1q2VI0eOx7bLkSOH3njjDR08ePBpawMAAABSzeaAGxYWpoIFC9rUtlChQgoLC7O3JgAAAMBuNgfcnDlz6sqVKza1vXLlinLmzGl3UQAAAIC9bA64lSpV0n//+98n9syGhYXpv//9rypVqpTqYi5duqQxY8aoRYsWKl26tJo2bZpsu3Xr1qlBgwby9vZW8+bNtXv37lQfCwAAAMZkc8B96623FBYWpk6dOunnn39Ots3PP/+szp07KywsTH379k11MWfPntXevXv1yiuvyMPDI9k2W7du1ejRo9WoUSPNnz9fvr6+GjhwoE6cOJHq4wEAAMB4bJ4mrESJEvryyy81fPhwdezYUQULFlTJkiWVNWtWPXjwQH/88YeuXLmizJkz64svvtCrr76a6mICAgIUGBgoSRoxYoR+/fXXJG2mT5+uJk2a6O2335YkVa5cWX/++admzZql+fPnp/qYAAAAMJZU3cmsfv36KlWqlObPn689e/ZY3dAhd+7catOmjXr27KlXXnnFrmIcHB7foXz58mVdvHhR7733ntXyxo0ba9KkSYqJiZGzs7NdxwYAAIAxpPpWvYk3epCkiIgIPXjwQFmzZpWrq2uaF/dPISEhkqRixYpZLffw8FBsbKwuX76c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cUJlypRJcvzEXsZEtnw9HhYWpjx58qS4PiEhQf369dP9+/c1ePBgvfLKK3JxcdH06dOtgndybt68maQGV1dXZc6c2fL43r17ydaa+DhxvS369++vdu3aaceOHUnWhYeHJ/t6vPzyy0mO8fLLL9t8zNScDwDGR8AFYDiJF4mNHDnSclFSort37+r27dtPPSYze/bsqlGjhoYMGZJkXeK40EQmk+mJ+8uRI4dlSrPkXLp0Sb///rtmzZqlwMBAy/Lo6Ogn7jt37ty6ffu21bKIiAg9fPjQ6viSdOfOHat2idtlz579icdJ5Ovrq2rVqmn27Nlq0aKF1brs2bMnqUWSbt26leQYtrxuj+7X1vMBwPgIuAAMJSoqSjt37lRgYKC6dOlite7WrVt65513FBwcrM6dOz/VcapWrapNmzbJw8PjicMPbN1fcHCwTp48qXLlyiVZnxhGHx02ERoaquPHj6to0aKP3bePj492796tkSNHWoYpbNu2zapNsWLF5O7urm3btqlevXqW5d9++62cnJxSPaVZ//791bFjxyQ94RUqVNDChQu1f/9+Va9eXdLfQ0p27NihChUqPHG/ic//nxfIpfX5APBiI+ACMJSdO3cqMjJSnTt3TvbCqwULFmjLli1PHXC7deumzZs3q1OnTurSpYsKFCigO3fu6OTJk8qbN6+6deuWqv21aNFCq1atUp8+fTRw4EC9+uqrun79uo4ePapPPvlExYsXV758+fTll18qISFBkZGRmj59+mOHNSTq06ePWrdurQEDBqh9+/a6cuWKFi5caDVEwdHRUf3799f48ePl7u6uWrVq6cSJE5o/f766du1q0wVmj6pYsaIqVaqkgwcPWi2vXbu2fHx89N577+ndd9+1zKJw48YNTZ8+/Yn79fDwkCStXLlSgYGBeumll+Tl5ZXm5wPAi42AC8BQtmzZogIFCqQ4q0DLli312Wef6a+//nqq4+TMmVNr1qzR1KlTNXnyZIWFhSlXrlwqV66cVQ+orZydnbVkyRJNmTJFc+fOVVhYmPLly6cmTZpY1s+YMUPjxo3TkCFDlD9/fvXr108HDx584lyvpUuX1rRp0zR58mRLeJ4yZYp69uxp1a5z587KlCmTlixZotWrVyt37twaOHCgZeaI1Orfv78OHz5stczR0VHz5s3TpEmT9MUXXygyMlJlypTRokWL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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Qual os top 3 com maior e menor taxa de aumento de Ã­ndices de obesidade nesse perÃ­odo de 2010?"
      ],
      "metadata": {
        "id": "Bw4McDkt04hW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Filtrando os dados para o ano de 2010\n",
        "df_2010 = df[df['Year'] == 2010]\n",
        "\n",
        "# Calculando a diferenÃ§a de obesidade para o ano de 2010\n",
        "df_diferenca_obesity_2010 = df_2010.groupby('Country')['Obesity'].apply(lambda x: x.iloc[-1] - x.iloc[0]).reset_index()\n",
        "df_diferenca_obesity_2010.columns = ['Country', 'DiferenÃ§a_Obesidade_2010']\n",
        "\n",
        "# Ordenando os paÃ­ses pela diferenÃ§a de obesidade e pegando o top 3 com maior aumento\n",
        "df_diferenca_obesity_2010_sorted = df_diferenca_obesity_2010.sort_values(by='DiferenÃ§a_Obesidade_2010', ascending=False)\n",
        "top_3_maior_aumento = df_diferenca_obesity_2010_sorted.head(3)\n",
        "\n",
        "print('Top 3 paÃ­ses com maior aumento de obesidade para o ano de 2010:')\n",
        "print(top_3_maior_aumento)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ht4PNW1jX5tg",
        "outputId": "7bb78254-c80d-458f-9432-f7154b151092"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Top 3 paÃ­ses com maior aumento de obesidade para o ano de 2010:\n",
            "                  Country  DiferenÃ§a_Obesidade_2010\n",
            "161          South Africa                      11.1\n",
            "183  United Arab Emirates                      10.2\n",
            "22               Botswana                       9.6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#grÃ¡fico para os paÃ­ses com as menores mÃ©dias de obesidade em 2010\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Country', y='DiferenÃ§a_Obesidade_2010', data=top_3_maior_aumento)\n",
        "plt.title('PaÃ­ses com as maiores taxas de aumento de Obesidade em 2010')\n",
        "plt.xlabel('PaÃ­s')\n",
        "plt.ylabel('Obesidade (%)')\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 684
        },
        "id": "72FMchUgbq1Y",
        "outputId": "16ab7cc7-dc13-461e-ed7e-8d62ca32b751"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA1MAAAKbCAYAAAAQdNDxAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAACE7ElEQVR4nOzdd3QU5f/28WvTIAklBALSW0xC7x0FgS9IR0roVURAOkgRpQuCVEXpIL2DoCJVRaUJKFVEIZQkdAJJIIG0ef7gyf4ICRCGwCbh/TrHc9yZ2dnPLLN35pq55x6LYRiGAAAAAADPxM7WBQAAAABASkSYAgAAAAATCFMAAAAAYAJhCgAAAABMIEwBAAAAgAmEKQAAAAAwgTAFAAAAACYQpgAAAADABMIU8AyCgoL05Zdf6ujRo7YuBQAAADZGmAKewaeffqrt27fL29vb1qXABry9vfXll1/augw8gn+X5O/LL7+0ebsZW0NQUNBL/dwaNWpo6NChT11uw4YN8vb2VkBAQJJ9dvv27dW+ffskWx+A+BxsXQDwomzYsEHDhg2zvnZyclKOHDlUpUoV9ezZU1myZHmm9f3888/66aeftH79eqVNmzapywVeiN27d+vYsWPq3bu3rUtBMnLmzBn9+OOPeuedd5QrVy5bl2Paf//9pzlz5ujAgQO6deuW3NzcVKFCBXXv3l2vv/66rctDEgoPD9eGDRu0a9cu/fvvv7p7967y5s0rX19ftWzZUvb29nGWj4mJ0YIFC7Ry5Updv35d+fLl0/vvv68GDRrEWe7YsWPasGGDjh07ptOnTysqKkqnT59+bB1r167VwoULFRAQoOzZsxNYQZhC6tenTx/lypVLEREROnz4sFauXKndu3fr+++/l7Ozc6LWcefOHY0aNUpjx45VgQIFXnDFSK6OHTsW7w92crd7924tX76cMIU4zpw5o5kzZ6p8+fIpNkxt375dAwYMkJubm5o1a6ZcuXIpMDBQ69at07Zt2zRt2jT973//s3WZ2rp1qywWi63LSPH8/f01duxYVapUSZ06dVK6dOn0+++/a/To0Tp69KgmTpwYZ/lp06Zp7ty58vX1VbFixbRr1y4NHDhQFotF9evXty63e/durVu3Tl5eXsqVK5fOnz//2BpWrVqlkSNHqk6dOurcubMOHTqkcePGKTw8XN26dXtRm45kjjCFVO/NN99UsWLFJEktWrSQm5ubFi1apF27dsU7Q/U46dKl0+7du19kmUgB0qRJk2TrCgsLk4uLS5KtD3iVXLx4UYMHD1bu3Lm1fPlyubu7W+d16NBBbdu21eDBg7V582blzp3bhpU+6BWB55clSxZ99913ca44tmrVSsOGDdOGDRvUs2dP5c2bV5J09epVLVq0SG3bttWIESMkPfj7365dO02aNElvv/229cRY69at9d577ylt2rQaM2bMY8PUvXv3NG3aNFWvXl1ffPGFJMnX11cxMTGaNWuWWrZsqYwZM77AbwDJFfdM4ZVTsWJFSbL2S1+wYIFatWqlChUqqHjx4mratKm2bt0a732P9nuPjIzUzJkzVbt2bRUrVkwVKlRQ69attWfPnjjvO3v2rPr06aPy5curWLFiatq0qXbt2hVnmcSuKyEhISEaP368atSooaJFi+rNN9/U4MGD49wXcPPmTX300UeqXLmyihUrpkaNGmnjxo1x1hMQECBvb28tWLBAy5cvV82aNVWiRAl16dJFly9flmEY+uqrr/Tmm2+qePHi6tGjh27fvv3U+v755x8NHTpUNWvWVLFixVSlShUNGzZMt27dirPcnTt39Omnn1q3o1KlSurcubNOnjz5xPXH3gdx7tw5DRo0SGXKlFHFihU1ffp0GYahy5cvq0ePHipdurSqVKmihQsXxnl/RESEZsyYoaZNm6pMmTIqWbKk2rRpo/3798f7rITuzfn777/VtWtXlS5dWqVKlVLHjh115MiROMvE3gvxxx9/aNSoUapUqZKqVatmnb979261adNGJUuWVKlSpdStWzf9999/cdZx/fp1DRs2TG+++aaKFi2qqlWrqkePHk+8v2Lo0KFavny5tfbY/2IlZt9fv369vL29tW7dujjTZ8+eLW9v7zgnGRL7W9qzZ49at26tsmXLqlSpUqpTp46mTp362O2IFRERofHjx6tixYoqVaqUunfvritXriS47NWrVzVs2DBVrlxZRYsWVf369eNtw+OsX79eHTp0UKVKlVS0aFHVq1dPK1asiLfc4+7VerStiP33jz2LXbFiRZUtW1YjRoxQRESEQkJCNHjwYJUrV07lypXTpEmTZBhGnHXGxMTom2++Uf369VWsWDFVrlxZI0aMUHBwcLzPfv/993Xo0CE1b95cxYoVU82aNfXtt9/Gqadv376SHgSP2P3iwIED1mWWL1+u+vXrW/e10aNHKyQkJFHf36FDh9SsWTMVK1ZMtWrV0qpVqx677KZNm9S0aVMVL15c5cuXV//+/XX58uWnfsb8+fMVHh6usWPHxglSkuTu7q4xY8YoLCxM8+bNi/feW7duqW/fvipdurQqVKigcePG6f79+6ZqO3/+vHr37q0qVaqoWLFievPNN9W/f3+FhoZal0nonqn//vtPHTp0UPHixfXmm2/q66+/VkxMTLwadu7cqW7duqlq1aoqWrSoatWqpa+++krR0dHxll29erVq1aql4sWLq3nz5jp06FCC311ERIS++OIL/e9//1PRokVVrVo1TZo0SREREQku/6ijR4/q3XffVZkyZVSiRAm1a9dOhw8fjrPM87bLCXF3d0+w62bs1cezZ89ap+3cuVORkZFq06aNdZrFYlHr1q115coV/fXXX9bpWbJkSVTX/QMHDuj27dtx1ilJbdu2VVhYmH755ZenrgOpE1em8Mq5ePGiJMnNzU2StGTJEtWoUUMNGzZUZGSkfvjhB/Xt21dz5sxR9erVH7uemTNnas6cOWrRooWKFy+uO3fu6MSJEzp58qSqVKki6cEfzNatWytbtmx677335OLioh9//FEffPCBvvzyS+sfgcSsKyF3795V27ZtdfbsWTVr1kyFCxfWrVu39NNPP+nq1atyd3fXvXv31L59e128eFFt27ZVrly5tHXrVg0dOlQhISHq2LFjnHV+9913ioyMVPv27XX79m3Nnz9f/fr1U8WKFXXgwAG99957unDhgpYtW6aJEydqwoQJT/y+9+7dK39/fzVt2lQeHh7677//tGbNGp05c0Zr1qyxdn8ZOXKktm3bpnbt2qlgwYK6ffu2Dh8+rLNnz6pIkSJP/AxJ6t+/vwoWLKiBAwdq9+7dmjVrltzc3LRq1SpVrFhRgwYN0nfffaeJEyeqWLFiKleunKQHIW7t2rVq0KCBWrRoobt372rdunXq2rWr1q5dq0KFCj32M//77z+1bdtWrq6u6tq1qxwcHLR69Wq1b99ey5YtU4kSJeIsP3r0aLm7u+uDDz5QWFiYJOnbb7/V0KFDVbVqVQ0aNEjh4eFauXKl2rRpo40bN1q7YPXu3VtnzpxRu3btlDNnTgUFBWnPnj26fPnyY7tptWzZUteuXdOePXs0adKkePMTs+83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JXt7e9WpU0fbtm3Tv//+G289T+vil9D+EBoammAozJ07d7zhp9esWfPYK1Nm1a1bV9HR0QmOtBYVFZXoIcsfFrtfPPq7q1y5shwdHbV06dI438G6desUGhr6xBMb9vb2qlq1qnbu3Bmn+/DZs2f1+++/x1m2du3asre318yZM+NdkTAMI16b+Kh3331XadOm1ciRI+Mte/v2bY0cOVLOzs7q2rVrvPfGPi4g1rJlyyT93z6W2Nru3LmjqKioOPO9vLxkZ2f3xH25WrVqOnLkiI4dO2adFhQUpO+++y7OcrEnvx6uISIiIt4w/UWLFpW7u7tWrVoV53M3btwYb9+oW7eurl69qjVr1sSr6969e9ZRRhNStGhR5cmTRwsXLkywi+XTfltJ4eDBgxowYIDKli2ryZMnP/aqbs2aNeXo6BjnuzIMQ6tWrVK2bNlUqlSpZ/7sihUrys3NTStXrowzfeXKlXJ2dn7i6L9I3bgyhVdatWrVtGjRInXt2lUNGjTQzZs3tWLFCuXJk+epXUjq16+v8uXLq0iRInJzc9Px48etQ3vHGjlypNq0aaOGDRvK19dXuXPn1o0bN3TkyBFduXJFmzdvTvS6EvLuu+9q27Zt6tu3r5o1a6YiRYooODhYP/30k0aPHi0fHx+1bNlSq1ev1tChQ3Xy5EnlzJlT27Zt059//qmPPvroqQf8zyNdunQqV66c5s+fr8jISGXLlk179uyJd2b17t27qlatmurUqSMfHx+5uLho7969On78eLznsyS16tWra/v27frggw9UvXp1BQQEaNWqVfL09HzigYX0oAvj3r171aZNG7Vp00b29vZavXq1IiIi9OGHHz71s9OlS6dRo0Zp8ODBatq0qerVqyd3d3ddunRJu3fvVunSpTVixAidP39enTp10ttvvy1PT0/Z29tr586dunHjhurXr//Ez4gdVn7cuHGqWrWq7O3tVb9+/UTv+zdv3tSoUaNUoUIF6/74ySef6MCBAxo2bJhWrFghOzu7RK/vq6++0qFDh1StWjXlzJnTutxrr72mMmXKPHY7ChUqpAYNGmjFihUKDQ1VqVKltH///gTP8A8cOFAHDhyQr6+vWrRoIU9PTwUHB+vkyZPat2+f/vjjj8d+TpUqVeTo6Kju3burVatWunv3rtauXavMmTPHu+LUokULjRw5Ur1791blypX1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T5dhGOrcubNcXV0lPQhUFotFQ4YMkZOTk4YOHUqYApAoD5+4GT9+vJYuXaqaNWuqWLFikh7ctxkcHKzixYtbA5erq6tq1aqlDBkycNAGJKGHu+lLkru7uyZMmKAOHTqoSpUqat68uSSpQoUKOnDggPr166fq1atrz549OnPmjDJmzKgMGTLYqnzYEEd9eOVFRESoVatWunr1qurUqaOuXbvKzc1NLi4uatKkiRwdHfX6669LenDmWFKcQNW4cWM5OjrK29ubIAUgUQzDsAapo0eP6saNG5oxY4Z8fHysy0RGRsre3l4XLlxQkSJFFBERoXPnzqlQoUJ677334jywF8Dzif37vW7dOtWtW1eOjo4qX7682rdvr3nz5snb21vFihVTvXr15Ofnp23btmnv3r3KkiWLvvrqK2XLls3GWwBbYQAKvPL++ecfdejQQffv31d0dLTSp0+v6tWrq1OnTvL29rYuFxERoQULFmjGjBnq1atXnEAFAE8THh6uy5cvq0CBAtZpn332mfbu3at79+5pwYIFyp07t3V49JiYGHXq1El+fn7Knz+/7Ozs9Pfff2vNmjXKnz+/DbcESJ1mzZqlGTNmqFq1aqpWrZrefvtthYSEqH///qpataref/99pUuXTjExMbp8+bJCQ0Pl4eGhzJkz27p02BD3TOGV5+Pjo1atWikiIkKTJ09W/fr1tXv3bvn6+mrUqFH66aefJElOTk7q0aOHevfurTlz5ujrr79WWFiYjasHkBLExMSoVatWWrlyZZxnzxQpUkQ3b97UxYsXdfjwYUkPhkePjIyUnZ2dFi1apJo1a8rZ2Vmurq5asWIFQQpIIjExMXFeV65cWQ4ODjp79qxOnDih3r17y87OTg0aNNCqVausD+u1WCzKmTOnfHx8CFLgyhRebbH3LFy8eFEdO3ZU2bJl9fnnn+v48ePatm2b1q5dq3v37ql+/fqqXbu2KlasqLRp02r69OlauXKlfvzxR4ZABZAo//77r3LkyKF06dLpypUrypYtmywWi3799VcNGTJEefLk0YABA1ShQgVJD66GP9yV79HXAJLeN998ox9++EG+vr46ffq01q9fr169emnWrFkqVKiQFixYwO8QcRCmAD04SBk9erR27NihhQsXqkiRIrJYLDp9+rQ6dOig4OBgZcyYUT4+PurcubOKFi0qBwcHubm5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kydb76GSpNu3b2vZsmWaOXOmhgwZos6dO9toCwCkFHfu3FGjRo2UNWtWff3113J3d7eeDT948KC6dOkid3d3TZs2TaVLl7a+79q1a5o3b57WrFmjDh06aODAgTbcCiB1eXjwl0ctWLBAa9asUf78+TVo0CB5enrKMAwZhqGTJ0/Kzs5OHh4eypo160uuGqkFYQop3i+//KLvvvtONWvWVL169fTuu+/KyclJM2bMkJOTk2bOnKklS5aoXr166tq1q3LlymV9b1BQkNatW6eaNWsy/CmAJ7pz544aN26sPHnyaOLEicqaNas1SMXExMjOzk779+9Xly5dVKVKFfXr109FihSxvv/q1atavHixfH1945zYAWDew0Fq+/btunTpklxdXZUvXz6VK1dOkjR//nytXbtWBQsWVP/+/eXp6anx48crOjpaQ4YM4TlSeC6EKaR4/v7+6tatm9KkSSMHBwddu3ZNc+bMkaenp3VY1GnTpmn16tV6++234wWq2IMgAHich4PU+PHjlT17dmvbER0drcuXLyt79uyyt7fX3r171bVr1wQD1ZPOoAN4NrEnMySpb9++OnDggBwcHHTr1i25ubnpnXfe0aBBgyQ9CFTr1q3T/fv3lTdvXh06dEhr165VoUKFbLkJSAW4ZwopmmEYyp07t7755hvVr19f9+/fV8+ePa2NY0REhJycnNS/f39J0urVq2Vvb6+OHTsqT548kkSQAvBEERER6tGjh27duqWtW7fK0dHR2rZERETof//7nxo2bKh+/fopJiZGlStX1vz589W1a1fZ29urZ8+eKl68uCSeWwMkpdggNX36dB07dkzTpk1TqVKl5O/vr9WrV2vhwoWKjIzUsGHD1LVrV3l4eOjPP//UnTt3tGnTJnqkIEkQppBixZ7hjY6O1oULF+Tq6qpMmTJp69atyp07txo0aGA92IkNVHZ2dpo1a5acnJw0cOBAhkAF8FRBQUHKkyePTpw4oVmzZqlPnz5ycnJSeHi4fH19lS1bNrVp00YODg7WodIrV66sBQsWqHPnzkqTJo0+//xzBpsAklhUVJQcHBx0/PhxlS1bVuXLl5e9vb1ef/11devWTc7Ozlq9erVKlCihevXqqXHjxmrcuLEiIyOtPVeA58WRJFKs2DO8//33n8qXL6/du3fLz89Pffv21bx582QYhho2bBgnUPXt21cuLi6qWbMmQQpAorz22mvq2bOnXF1dNXfuXKVNm1bdunWTr6+vXFxc9MUXXyhbtmySHpwpt1gsio6OVqVKlbRo0SJlzZqVIAU8p3v37mnLli0KCgpS1qxZ1ahRIzk4OCg0NFT+/v7KkSOH7O3trX/vs2bNqubNm2vz5s36+++/Va9ePeu6CFJIStwzhRRt9uzZmj59umbOnKkqVarI2dlZZ8+eVb9+/axDntevX1/R0dFasGCBSpUqZb0hFQCeRWBgoL755hutXLlSTk5OKlKkiKZOnaosWbJYuxtJUnh4uPbs2aMKFSooffr0NqwYSB3u3Lmj9u3bKzIyUpcuXVL69OlVrlw5TZ48WZI0btw4ffvtt9q4caNy585tDVSS1L59e7m6umrWrFlxfqdAUuFmEaRonTp1UqlSpTR27Fjt2bNH4eHhKliwoKZPn66YmBjNnj1b48aN04gRI6wHPQBgRs6cOdWpUye1a9dOdnZ28vb2loeHh/VKlCTdvXtXY8eO1eeff67w8HAbVwykfLGDv2TIkEGTJ0/Wli1b1Lp1ax06dEi//PKLJKlBgwbKnDmz+vfvr4CAAGuQunbtmsLCwuTp6UmQwgtDmEKKEXuwEisiIkJp06bVN998oxw5cmjUqFFxAtUXX3whDw8P7d+/X6dOndK3336r/Pnz26h6AKlBzpw51bZtWzVr1kyrVq3S9OnTJT3odhwSEqKJEyfqhx9+0JQpU3huDfCcwsLC1KhRI3l5eWnSpEny9PTUa6+9pvr16+vevXuKiopSaGioihcvru7du+v+/fvy9fXVypUr9c0332jSpEm6ePGimjZtautNQSpGNz+kOD/99JNq1Kgh6f9G67t//746deqkgIAAjRgxQlWqVJGLi4uCg4Oty2TMmNHGlQNILQIDA7V48WKtWLFC7733nvr27auRI0fq22+/1cqVK1W4cGFblwikeF988YW+/vprffzxx2rXrp114KkrV67I19dXbm5uunbtmvLly6cePXooPDxcO3bs0M6dO5UxY0blzJlTI0eOlI+Pj603BakYYQopytq1azVy5Ej17NlTvXr1kvR/geru3btq166d7ty5o8GDB1sDFQC8CLGBau3atXJ3d1dQUJCWL19OkAKSyNWrVzVp0iTt2LFDY8aMUZMmTXT//n01a9ZM9vb28vX1VVRUlNatW6eQkBCNHz9eVapUkZ+fn9zd3WVvb899i3jhCFNIUc6ePav58+dr3759at68ebxA9d133+nDDz9UpkyZNGHCBFWvXt22BQNIMR73QN0nPWj30qVLmj17tvbu3auZM2dyBhxIYtevX9enn36qXbt2adSoUVq2bJmcnJw0efJk5c6dW5J08uRJ9erVS7lz59aSJUusD9QGXgbGhkayldABTMGCBdW1a1cZhqHVq1dLknr16mW92TQyMlKNGzdWcHCw9aG8APA0MTEx1vZmz549un//vtzc3FS6dOknPmg3R44c6tatm/r27avMmTO/rHKBV4aHh4c+/vhjWSwWjRo1SlmyZNHOnTutz5mMfa5Ujhw5FBkZKUkEKbxUhCkkSw8HqX379unGjRtKmzatKlSooIIFC6pnz56SpDVr1igyMlL9+/fXlStXdPDgQeXOnVsTJ060ZfkAUoCwsDCtW7dOLVq0kLOzsySpT58+OnjwoG7fvi03Nzflz59fkyZNUq5cuR67nifNA/D8smTJomHDhsnR0VE//vijfvjhBzVq1MgaqIKDg2VnZycfHx/FxMRYn/cGvAyEKSQ7hmFYg9SAAQP0119/6ebNm3J0dJSrq6vGjx+vqlWr6oMPPpCzs7OWLFmidevWyc3NTdevX9fy5cttvAUAUoLt27dr/PjxunHjhnr37q1ly5bp1KlTGjt2rLJnz67//vtPCxYsUKdOnTR79mx5eno+scsfgBcna9as+vDDDxUREaHhw4fLMAw1btxY4eHhmjFjhvz8/DR27FiuSuGl454pJFsTJkzQ1q1bNWrUKBUsWFDnzp3TsmXLdOjQIU2ePFk1a9bU1atXdebMGW3btk1ubm5q0qSJChQoYOvSAaQA4eHhWrVqlT7//HP16dNHMTExio6OVq9evWSxWBQTEyN/f3/1799fkrRhwwYbVwzg4XuoRowYIT8/P61YsYJRNGEzhCkkSyEhIeratasqVapkPZAxDENBQUEaOXKkDh06pO+++04eHh7W93DDKYBnde/ePS1btkzTpk1TdHS0evToob59+1rnG4ah3377TQMHDtRHH32kd955x4bVApAeBKrPPvtMP/zwgxwcHLR69WoVKVLE1mXhFcWRJ2zq/v372rJli86ePRtnumEYun79uqKioqyvLRaL3N3d1a1bN9nZ2VnPEsfExEjihlMAzy5t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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Xdf_2010 = df[df['Year'] == 2010]\n",
        "\n",
        "# Calculando a diferenÃ§a de obesidade para o ano de 2010\n",
        "df_diferenca_obesity_2010 = df_2010.groupby('Country')['Obesity'].apply(lambda x: x.iloc[-1] - x.iloc[0]).reset_index()\n",
        "df_diferenca_obesity_2010.columns = ['Country', 'DiferenÃ§a_Obesidade_2010']\n",
        "\n",
        "# Removendo os paÃ­ses onde o aumento foi de 0\n",
        "df_diferenca_obesity_2010 = df_diferenca_obesity_2010[df_diferenca_obesity_2010['DiferenÃ§a_Obesidade_2010'] != 0]\n",
        "\n",
        "# Ordenando os paÃ­ses pela diferenÃ§a de obesidade e pegando o top 3 com menor aumento\n",
        "df_diferenca_obesity_2010_sorted = df_diferenca_obesity_2010.sort_values(by='DiferenÃ§a_Obesidade_2010', ascending=True)\n",
        "top_3_menor_aumento = df_diferenca_obesity_2010_sorted.head(3)\n",
        "\n",
        "print('Top 3 paÃ­ses com menor aumento de obesidade para o ano de 2010 (desconsiderando aumento de 0):')\n",
        "print(top_3_menor_aumento)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4uN7d2foYtdJ",
        "outputId": "daa6eeab-d0aa-4c0d-e14a-d23c0dadb5f3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Top 3 paÃ­ses com menor aumento de obesidade para o ano de 2010 (desconsiderando aumento de 0):\n",
            "         Country  DiferenÃ§a_Obesidade_2010\n",
            "169  Switzerland                      -2.0\n",
            "48       Denmark                      -1.9\n",
            "168       Sweden                      -1.8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#grÃ¡fico para os paÃ­ses com as menores mÃ©dias de obesidade em 2010\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Country', y='DiferenÃ§a_Obesidade_2010', data=top_3_menor_aumento)\n",
        "plt.title('PaÃ­ses com as Menores taxas de aumento de Obesidade em 2010')\n",
        "plt.xlabel('PaÃ­s')\n",
        "plt.ylabel('Obesidade (%)')\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 631
        },
        "id": "IhEAS_CRbdEN",
        "outputId": "0300c952-6bd7-42ca-d0c4-73ed8ea5217d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA24AAAJmCAYAAAAkddO+AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAACI4UlEQVR4nOzdZ3gU1f/+8XsTEkghoUiHAAET6U2aoYcOAiIQkSISyhcVBEG6EaUrKBKUjlRBFFFK6CAgYhTpShFC7xBJMT2Z/wP+2R9LAqSSDbxf15UHO3tm5jOb3ZPcO2fOmAzDMAQAAAAAsFo2WV0AAAAAAODRCG4AAAAAYOUIbgAAAABg5QhuAAAAAGDlCG4AAAAAYOUIbgAAAABg5QhuAAAAAGDlCG4AAAAAYOUIboCVCQ4Olr+/v44cOZLVpQAAAMBKENwAKzNx4kRt3bpVnp6eWV0KgIdo0qSJRo4cmdVl4BF++OEHeXp66vLly1lew7Fjx57ofnv06KEePXo8tl1gYKA8PT0VGBiYYfseOXKkmjRpkmHbA/B/CG5AOiT+UU78qVSpklq0aKGPP/5Yt2/fTvX2du3apZ07d+qLL75Qrly5MqFipMX9v+cDBw4ked4wDDVs2FCenp7q379/FlRoXQ4ePCh/f3+FhoZmdSmwIjdu3JC/v79OnDiR1aWky9WrV+Xn56cmTZqoYsWKqlu3rt566y39+eefWV0aMlhCQoJ++OEH/e9//1PDhg1VtWpVtW3bVl999ZWio6OTXee7775Tq1atVKlSJTVv3lzLli1L0iYoKEiTJk3Sa6+9pkqVKj32C4YdO3bolVdeUaVKldSoUSPNnDlTcXFxGXacyD5yZHUBwNNg0KBBKl68uGJiYvTnn39q5cqV2r17tzZs2CAHB4cUbSM8PFzjxo3T+PHj5e7unskVIy1y5sypDRs26MUXX7RY/vvvv+v69euyt7fPosqsy6FDhzRr1iy98sorcnFxyepyYCVu3rypWbNmqVixYipXrlxWl5Mmf/75p/r16ydJ6ty5s8qUKaPbt29r7dq16tatm8aMGZOiM12ZbeHChVldwlMhMjJSo0aNUtWqVfXaa68pf/78OnTokPz9/bV//34tXbpUJpPJ3H7VqlX68MMP1aJFC7355ps6cOCAJkyYoMjISPP7RpIOHz6sZcuWqWzZsipTpswjv8zYvXu33n77bdWqVUsffPCBTp8+rdmzZ+vOnTv66KOPMvX4YX0IbkAGaNCggSpVqiTp3h/zPHny6Ouvv9aOHTvUtm3bFG3D2dlZu3fvzswykU4NGzbU5s2bNXbsWOXI8X/d54YNG1ShQgXdvXs364pLgejoaNnZ2cnGhsEWQGqFhITo3XffVa5cubRy5Uq5ubmZn3vzzTfl6+urSZMmqUKFCqpevXoWViq+RMogdnZ2WrlypcXvs0uXLipWrJg5vL300kuSpKioKH3++efmM2KJbRMSEjR79mz5+PjI1dVV0r2h1n/88YecnZ21cOHCRwa3Tz75RJ6enlq0aJH5746Tk5Pmzp2rnj17qkyZMpl1+LBC/PUGMkGdOnUkyTz0YeHChXrttddUu3ZtVa5cWR07dtTmzZuTrPfgdTOxsbGaNWuWmjdvrkqVKql27drq2rWr9u3bZ7He2bNnNWjQINWqVUuVKlVSx44dtWPHDos2Kd1WckJDQzVp0iTz0KAGDRpo+PDhCg4ONre5c+eORo8erZdeekmVKlVSu3bttHbtWovtXL58WZ6enlq4cKFWrFghb29vValSRb1799a1a9dkGIa+/PJLNWjQQJUrV9aAAQNSFIZOnjypkSNHytvbW5UqVZKXl5dGjRqlf//916JdeHi4Jk6caDHE6c0339Rff/312H1IUps2bXT37l2L1ywmJkZbtmzRyy+/nOw6CQkJWrx4sdq0aaNKlSrppZdekp+fn0JCQizaNWnSRP3799eBAwfUqVMnVapUSd7e3vrxxx+TbPPSpUvm33eVKlXUpUsX/fzzzxZtEq9d2bhxoz7//HPVr19fVapUUXh4uCTpyJEj8vX1VY0aNVSlShV17949yVCvtLxe/v7++uSTTyRJ3t7e5iGmiZ+FNWvWqGfPnqpbt64qVqyo1q1b65tvvrHYxv79+/XCCy/oiy++sFi+fv16eXp6WrRPyfYk6dixY/L19TV/Bps0aaJRo0Y99DgSGYahr776Sg0aNFCVKlXUo0cP/fPPP8m2DQ0N1cSJE9WwYUNVrFhRzZo107x585SQkPDY/Wzfvl39+vVTvXr1VLFiRTVt2lRffvml4uPjLdo97Nq6B69pSvz9BwQEaNasWapfv76qVaumQYMGKSwsTDExMZo4caLq1q2ratWqadSoUYqJiUmy3Z9++kkdO3ZU5cqVVatWLQ0ZMkTXrl1Lsu+2bdvqzJkz6tGjh6pUqaL69etr/vz5FvV06tRJkjRq1Cjz++KHH34wt9m0aZN5X7Vr19awYcN048aNx752kvTPP/+oZ8+eqly5sho0aKCvvvrqoa/77t279frrr6tq1aqqVq2a+vXr99Df6f2+/fZb3bp1S++//75FaJOkXLlyacqUKTKZTPryyy+TrBsVFSU/Pz/Vrl1b1atX1/Dhw5P0ASmt7datWxo1apQaNGigihUrql69ehowYIDFULvkrnG7fv263nrrLVWtWlV169bVpEmTkv2dHzhwQIMGDVKjRo1UsWJFNWzYUJMmTVJUVFSSttu3b1fbtm1VqVIltW3bVtu2bUv2tUtpP/gwKfkblzikPfEsV506dfTiiy/Kz89PMTExCg0N1fDhw1WzZk3VrFlTn3zyiQzDeOR+7e3tkw3hzZo1M9eVKDAwUHfv3tXrr79u0bZbt26KiIiw6KPz5MkjZ2fnxx73mTNndObMGXXp0sXiy8LXX39dhmFoy5Ytj90Gni6ccQMywcWLFyXd65wlaenSpWrSpIlefvllxcbGauPGjXr33Xc1d+5cNWrU6KHbmTVrlubOnavOnTurcuXKCg8P1/Hjx/XXX3/Jy8tL0r1/WLp27apChQqpb9++cnR01KZNm/T222/L39/f/AcmJdtKzn///adu3brp7NmzevXVV1W+fHn9+++/2rlzp27cuKF8+fIpKipKPXr00MWLF9WtWzcVL15cmzdv1siRIxUaGqo33njDYpvr169XbGysevToobt372rBggUaPHiw6tSpo8DAQPXt21cXLlzQ8uXLNXXqVE2ePPmRr/evv/6qS5cuqWPHjipQoID++ecfrV69WmfOnNHq1avNQ1k+/PBDbdmyRd27d1eZMmV09+5d/fnnnzp79qwqVKjwyH1IUrFixVS1alVt3LhRDRs2lCTt2bNHYWFhat26dbLXMvj5+Wnt2rXq2LGjevToocuXL2vFihX6+++/tXLlStnZ2ZnbXrhwQe+++646deqkV155RWvWrNHIkSNVoUIFPf/885Kk27dv67XXXlNkZKR69OihvHnzau3atRowYIBmzpxp/n0n+uqrr2RnZydfX1/FxMTIzs5O+/fvV9++fVWxYkW98847MplM+uGHH/TGG2/om2++UeXKldP8ejVr1kznz5/Xhg0bNGrUKOXNm1eSlC9fPknSypUr9fzzz6tJkybKkSOHdu3apY8++kiGYahbt26SpLp16+r111/XvHnz1LRpU1WoUEE3b97UhAkT9NJLL6lr167m/aVke3fu3JGvr6/y5s2rfv36ycXFRZcvX37oP5n3++KLLzR79mw1bNhQDRs21F9//aXevXsrNjbWol1kZKS6d++uGzdu6LXXXlORIkV06NAhffbZZ7p165bGjBnzyP2sXbtWjo6OevPNN+Xo6KjffvtNM2fOVHh4uEaMGPHYOh9m3rx5ypUrl/r162f+TOXIkUMmk0mhoaF65513dOTIEf3www8qVqyY3nnnHfO6s2fP1hdffKFWrVqpU6dOCg4O1vLly9WtWzf9+OOPFsNgQ0JC1KdPHzVr1kytWrXSli1bNG3aNHl4eKhhw4YqU6aMBg0apJkzZ8rHx0c1atSQJPM/xT/88INGjRqlSpUq6b333tOdO3e0dOlSHTx4MMm+HnTr1i317NlT8fHx6tevnxwcHLR69WrlzJkzSdsff/xRI0eOVL169TRs2DBFRkZq5cqVev3117V27VoVL178ofvZuXOncubMqdatWyf7fIkSJVSjRg0FBgYqKirK4jrljz/+WC4uLnrnnXd07tw5rVy5UlevXtWyZcvM/VNKaxs4cKDOnDmj7t27q1ixYgoODta+fft07dq1h9YfFRWlN954Q9euXVOPHj1UsGBB/fTTT/rtt9+StN28ebOioqLUtWtX5cmTR0ePHtXy5ct1/fp185kkSfrll180cOBAlS1bVkOHDtW///6rUaNGqXDhwkm2mZp+8EEp/RuXaMKECXruuec0cOBAHTlyRN9++61y586tQ4cOqUiRIhoyZIj27NmjhQsXysPDQx06dHjovh8m8Rr2xP5Nkv7++29JUsWKFS3aVqhQQTY2Njpx4oTat2+fqv0kbjNxRE+iQoUKqXDhwtn+elGkgQEgzdasWWN4eHgYv/76q3Hnzh3j2rVrxsaNG41atWoZlStXNq5fv24YhmFERkZarBcTE2O0bdvW6Nmzp8Xyxo0bGyNGjDA/bteundGvX79H1vDGG28Ybdu2NaKjo83LEhISDB8fH6N58+ap2lZyvvjiC8PDw8PYunVrkucSEhIMwzCMxYsXGx4eHsZPP/1kfi4mJsbw8fExqlataoSFhRmGYRiXLl0yPDw8jDp16hihoaHmttOnTzc8PDyMdu3aGbGxsebl7733nlGhQgWLY0vOg6+vYRjGhg0bDA8PD+OPP/4wL6tRo4bx0UcfpfDI/0/i7/no0aPG8uXLjWrVqpn3OWjQIKNHjx6GYdz7/d3/Gv/xxx+Gh4eHsW7dOovt7dmzJ8nyxo0bJ6n3zp07RsWKFY0pU6aYl02cODFJu/DwcKNJkyZG48aNjfj4eMMwDOO3334zPDw8DG9vb4vXJyEhwWjevLnRu3dv8+/PMO69hk2aNDHefPPNdL9eCxYsMDw8PIxLly4leS6531Xv3r0Nb29vi2URERFGs2bNjDZt2hjR0dFGv379jOrVqxtXrlxJ9fa2bdtm/v2lxp07d4wKFSoY/fr1s3itPvvsM8PDw8Pis/rll18aVatWNc6dO2exjWnTphnlypUzrl69+sh9JXccH3zwgVGlShWL9/+DfUSi7t27G927dzc/Tvz9t23b1oiJiTEvf++99wxPT0+jT58+Fuv7+PgYjRs3Nj++fPmyUa5cOWP27NkW7U6dOmWUL1/eYnn37t0NDw8PY+3ateZl0dHRhpeXlzFw4EDzsqNHjxoeHh7GmjVrLLYZExNj1K1b12jbtq0RFRVlXr5r1y7Dw8PD+OKLL5Ic7/0SPxNHjhwxL7tz545Ro0YNi/dheHi48eKLLxpjx461WP/WrVtGjRo1kix/0Isvvmi0a9fukW3Gjx9veHh4GCdPnjQM4//6jldeecXi9zB//nzDw8PD2L59e6pqCwkJMTw8PIwFCxY8so4H3w+JfXRAQIB5WeJnzMPDw/jtt9/My5N7L86dO9fw9PS0+Py1b9/e8PLysujLf/nlF8PDw8PivZSafjA5Kf0bl/haP9i3+fj4GJ6enoafn595WVxcnNGgQQOL1yg1evXqZVSvXt0ICQkxL/voo4+McuXKJdu+Tp06xpAhQ5J97lH9ZeJzyfUfr776qtGlS5c01Y/si6GSQAbo1auX6tatq4YNG2rIkCFycnLSrFmzVKhQIUmy+OY1JCREYWFhqlGjhvnbtIdxcXHRP//8o/Pnzyf7/N27d/Xbb7+pVatWCg8PV3BwsIKDg/Xvv/+qXr16On/+vHmo0eO29TBbt27VCy+8kORbTUnmb4r37NmjAgUKWFzPZ2dnpx49eigiIkJ//PGHxXotW7ZU7ty5zY8Tz/C0a9fOYjhI5cqVFRsb+9jhUve/vtHR0QoODlaVKlUkyWJYn4uLi44cOZLi4VfJadWqlaKjo7Vr1y6Fh4fr559/fugwyc2bNyt37tzy8vIy/26Cg4NVoUIFOTo6JpmCu2zZshYTn+TLl0+lS5fWpUuXzMt2796typUrW7RzcnKSj4+Prly5ojNnzlhss0OHDhavz4kTJ3T+/Hm9/PLL+vfff801RUREqG7duvrjjz/MQ8wy4vV60P21hIWFKTg4WLVq1dKlS5cUFhZmfs7BwUGTJ0/W2bNn1a1bN/38888aNWqUihYtmurtJb7Xfv755yRnyh7l119/VWxsrLp3724xAcGDZ5Cle7/rGjVqyMXFxeJ3/dJLLyk+Pj7JZ+BRr0viZ/nFF19UZGSkgoKCUlzzg9q3b29xNqNy5coyDEOvvvqqRbvKlSvr2rVr5pnqtm3bpoSEBLVq1crieJ577jmVLFkyyXvX0dHR4myCvb29KlWqZPHefZjjx4/rzp076tq1q8VZskaNGsnd3T3JMOAH7d69W1WrVjX3I9K9z86Dn8tff/1VoaGhatOmjcUx2djYqEqVKo+dEv+///6Tk5PTI9skPp84JDmRj4+Pxe+ha9euypEjh/m65pTWlitXLtnZ2en3339P8TBD6f/66JYtW5qXOTg4qEuXLkna3v9ejIiIUHBwsKpVqybDMMx/s27evKkTJ07olVdesejLvby8VLZsWYvtpbYfvF9q/sYl6tSpk8XnNfE9nzhUV5JsbW1VsWLFFL0/HzRnzhz9+uuvGjp0qMWZ4KioqIeeOcyZM2eyQ00fJ3Gd5K5ZTOs2kb0xVBLIAH5+fipdurRsbW313HPPqXTp0hYTQOzatUuzZ8/WiRMnLK4puP+PS3IGDRqkt956Sy1atJCHh4fq1aun9u3b64UXXpB0b0imYRj64osvklwPlOjOnTsqVKjQY7f1MBcvXlTz5s0f2ebKlSsqWbJkkkkvEi+avnr1qsXyIkWKWDxO/MP/sOUhISEqUaLEQ/d/9+5dzZo1SwEBAbpz547Fc/eHgWHDhmnkyJFq1KiRKlSooIYNG6pDhw6P3PaD8uXLp7p162rDhg2KiopSfHy8WrRokWzbCxcuKCwsTHXr1k32+QdrffD4JcnV1dXiH7SrV6+aQ+n9EmcivXr1qjw8PMzLHxw6lRjcHzX8LiwsTK6urhnyej3ozz//lL+/vw4fPqzIyMgk+73/n8AaNWqoa9euWrFiherVq2fxj1dqtlerVi21aNFCs2bN0uLFi1WrVi01bdpUL7/88iMncUh835YqVcpieb58+cyTDCS6cOGCTp069dDf9f3Xgybnn3/+0YwZM/Tbb78l+af//vdwaj0YdB/1WUtISFBYWJjy5s2r8+fPyzCMh3727/+CRZIKFy6cpD9zdXXVqVOnHltj4utcunTpJM+5u7s/dpr9h30mHtxe4ns/ueAt6bHXHDk5Oem///57ZJvE5x8MeCVLlkyyrQIFCujKlSupqs3e3l7Dhg3T1KlT5eXlpSpVqqhRo0bq0KGDChQo8NC6EvvoB39Hyb3mV69e1cyZM7Vz584k4TDxvZn4O3vwuBK3ef+XkqntB++Xmr9xiVLznk9N+JWkgIAAzZgxQ506dUpyLVuuXLke+sVQdHR0mm7xk7hOctcipnWbyN4IbkAGqFy5cpIx6IkOHDigAQMGqGbNmvrwww9VoEAB2dnZac2aNdqwYcMjt1uzZk1t27ZNO3bs0L59+/T9999ryZIl+uijj9S5c2fzmZHevXurfv36yW4j8SL6x23rSbK1tU12+cNmOzQecwH54MGDdejQIfn6+qpcuXJydHRUQkKC+vTpY7Fu69at9eKLL2rbtm3at2+fFi5cqPnz58vf3998zVpKtG3bVh988IFu376tBg0aPPT6m4SEBOXPn1/Tpk1L9vnE674SPex1SY8H/7Anvh7Dhw9/6JTsjo6OkjLu9Up08eJF9erVS+7u7ho5cqSKFCkiOzs77d69W4sXL04ymURMTIx+//13SfcmZImMjLS4vUZKt2cymTRz5kwdPnxYu3bt0t69ezV69Gh9/fXX+vbbbx97FiUlEhIS5OXlpT59+iT7/IPh736hoaHq3r27nJ2dNWjQILm5uSlnzpz666+/NG3atBRNbhIfH5/s++dhn6nHfdYSEhJkMpk0f/78ZLeb+B5JlBnv3YyWeGyffPJJsiHnccdQpkwZ/f3334qJiXlo4D916pTs7Owe+ftOb229evVSkyZNtH37dv3yyy/64osvNG/ePC1ZskTly5dP1X4fFB8frzfffNN8zaK7u7scHR1148YNjRw5MkXvxQelth98cF0pZX/jEqX2PZ9S+/bt0/Dhw9WoUaNkp+EvUKCA4uPjdefOHeXPn9+8PCYmRnfv3lXBggVTvc/E98KtW7eSBM9bt25ZnGXGs4HgBmSyLVu2KGfOnFq4cKHFH/s1a9akaP08efLo1Vdf1auvvqr//vtP3bt3l7+/vzp37mw+82FnZ2eekjit23oYNze3x864VqxYMZ06dUoJCQkWfxwTh3g9+A1oRgoJCdH+/fs1cOBAi4kVHjYktGDBgurWrZu6deumO3fu6JVXXtGcOXNSFUSaNWumDz/8UIcPH9bnn3/+0HZubm7av3+/qlevnmHfjBYtWlTnzp1Lsjylr3Xie8bZ2TlF75m0vF4PO5O8c+dOxcTEaPbs2RZ1Pmyo1MyZM3X27FmNGDFC06ZN0/Tp0zV27Ng0b69q1aqqWrWqhgwZovXr12vYsGEKCAh46Ps/cZvnz5+3OMsYHByc5Jt6Nzc3RUREpOg1fdDvv/9uPmtcs2ZN8/Lkbsjr6uqa7I3Nr169mq4zoQ9yc3OTYRgqXrx4smdl0uJh74vE1/ncuXNJzsqcO3fuse/pokWL6sKFC0mWP/g5SXx98ufPn6bfU6NGjXTo0CFt2rQp2UkmLl++rD///FN169ZN8nm/cOGCebZh6d6ZuVu3bqlBgwZpqs3NzU29e/dW7969df78eXXo0EGLFi16aDgqVqyYTp8+LcMwLH4PD75Gp0+f1vnz5zV16lSLSTsenH048XeSktc9Pf1gav/GZZYjR47onXfeUcWKFTVjxowkZ5wlmb8IO378uEX/ePz4cSUkJDx2dEtyErd57Ngxi5B248YNXb9+Pdmhrni6cY0bkMlsbW1lMpkspvW+fPlykqmMk/PgdPZOTk5yc3MzD5vInz+/atWqpW+//VY3b95Msv79w7Met62Had68uU6ePJnsDHyJ3xI3aNBAt27dUkBAgPm5uLg4LVu2TI6Ojhb/jGa0h31LvmTJEovH8fHxSYac5c+fXwULFnzsa/AgJycnjRs3TgMHDlSTJk0e2q5Vq1aKj4/XV199leS5uLi4ZP8Bf5yGDRvq6NGjOnTokHlZRESEVq9erWLFiiW5vuRBFStWlJubmxYtWpTssK/E90x6Xq/Es2IPrp/4u7r/LGhYWFiyX2IcOXJEixYt0htvvKHevXvL19dXy5cvN5+BS832QkJCkpy1TfyH6FHH8tJLL8nOzk7Lly+3WP/B95Z073d96NAh7d27N8lzoaGh5mvHkpP4Zcf9+4iJiUn2tgYlSpTQkSNHLOretWtXkin606t58+aytbXVrFmzkrx2hmEk6U9SIvF98eD7vmLFisqfP79WrVplcVy7d+/W2bNnHznzrnTvM3H48GEdPXrUvCw4OFjr16+3aFe/fn05Oztr7ty5yQ5pe9xwVh8fH+XPn1+ffvppkmujoqOjNWrUKBmGobfffjvJut9++63FPleuXKm4uDhzcEtpbZGRkYqOjrZ4zs3NTU5OTo98Lzdo0EA3b960uA1NZGSkVq9ebdEuufeiYRhaunSpRbuCBQuqXLlyWrt2rcXnfN++fUmus01PP5iav3GZ5ezZs+rXr5+KFSumuXPnPjR81qlTR3ny5NHKlSstlq9cuVIODg6PfR8n5/nnn5e7u7tWr15t8T/EypUrZTKZLK5ZxLOBM25AJmvYsKG+/vpr9enTR23bttWdO3f0zTffyM3N7bHXf7Rp00a1atVShQoVlCdPHh07dsw8PXuiDz/8UK+//rpefvlldenSRSVKlNDt27d1+PBhXb9+XevWrUvxtpLj6+urLVu26N1339Wrr76qChUqKCQkRDt37tRHH32kF154QT4+Pvr22281cuRI/fXXXypWrJi2bNmigwcPavTo0Sm6X01aOTs7q2bNmlqwYIFiY2NVqFAh7du3L8nZiv/++08NGzZUixYt9MILL8jR0VG//vqrjh07lux9sR7nlVdeeWybWrVqycfHR3PnztWJEyfk5eUlOzs7nT9/Xps3b9aYMWNS/Ye3X79+2rhxo/r27asePXrI1dVVP/74oy5fvix/f//HDgeysbHRhAkT1LdvX7Vt21YdO3ZUoUKFdOPGDQUGBsrZ2Vlz5sxJ1+uVeKuAzz//XK1bt5adnZ0aN25sPv7//e9/eu211/Tff//pu+++U/78+XXr1i3z+tHR0RoxYoRKliypIUOGSLo3BfquXbs0atQorV+/Xo6Ojine3tq1a7Vy5Uo1bdpUbm5u+u+//7R69Wo5Ozub/3FOTr58+dS7d2/NnTtX/fv3V8OGDfX3339rz549FtOAS/c+Jzt37tT//vc/vfLKK6pQoYIiIyN1+vRpbdmyRTt27HjokLBq1arJ1dVVI0eOVI8ePWQymfTTTz8lO0S4c+fO2rJli/r06aNWrVrp4sWLWr9+fZLhYunl5uamwYMHa/r06bpy5YqaNm0qJycnXb58Wdu3b1eXLl3k6+ub6m26uLho1apVcnJykqOjoypXrqwSJUpo2LBhGjVqlLp37642bdqYbwdQrFgx9erV65Hb7dOnj3766Sf16dNHPXv2NN8OoGjRohZ9rLOzs8aNG6fhw4erY8eOat26tfLly6erV69q9+7dql69uvz8/B66n7x582rmzJnq16+fXnnlFXXu3FllypTR7du3tXbtWl24cEFjxoxJ9r5fsbGx6tWrl1q1aqVz587pm2++UY0aNeTt7Z2q2s6fP69evXqpZcuWKlu2rGxtbbV9+3bdvn1bbdq0eWjtXbp00YoVKzRixAj99ddfKlCggH766ackIcTd3V1ubm6aOnWqbty4IWdnZ23ZsiXZcPXee++pf//+ev311/Xqq6/q7t27Wr58uZ5//nlFRESY26W3H0zp37jMEB4eLl9fX4WGhsrX1zfJRDlubm6qVq2apHvD0gcNGqSPP/5YgwYNUv369XXgwAGtW7dOQ4YMMd8eSLr3BVPi7WMOHjwoSVqxYoVy584tFxcXi7/Lw4cP14ABA9S7d2+1adNGp0+f1ooVK8zvPzxbCG5AJqtbt64mTpyo+fPna9KkSSpevLiGDRumK1euPDa49ejRQzt37tS+ffsUExOjokWLavDgwRb/MJUtW1Zr1qzRrFmztHbtWt29e1f58uVT+fLlLb75Tcm2kuPk5KQVK1bI399f27Zt09q1a5U/f37VrVvXYtbMZcuWadq0aVq7dq3Cw8NVunRpTZ48WR07dkzHq5cy06dP1/jx4/XNN9/IMAx5eXlp/vz5FtdE5MqVy3zD8a1bt8owDLm5uZn/KcgsH3/8sSpWrKhVq1bp888/l62trYoVK6Z27dol+w/e4zz33HNatWqVPv30Uy1fvlzR0dHy9PTUnDlzUvyNbu3atfXtt9/qq6++0vLlyxUREaECBQqocuXK8vHxkZS+16ty5cp69913tWrVKu3du1cJCQnasWOH3N3dNXPmTM2YMUNTp07Vc889p65duypfvnwaPXq0ef3PPvtMFy9e1KpVq8yzDNrb22vKlCny8fHRJ598onHjxqV4e7Vq1dKxY8cUEBCg27dvK3fu3KpcubKmTZv22OGFgwcPlr29vVatWqXAwEBVrlxZixYtUv/+/S3aOTg4aNmyZZo7d642b96sH3/8Uc7OzipVqpQGDhxoMenKg/Lmzas5c+Zo6tSpmjFjhlxcXNSuXTvVrVs3yeezfv36GjlypL7++mtNmjRJFStWNK+b0fr166dSpUpp8eLF5ptKFy5cWF5eXo880/wwdnZ2mjJlij777DONGzdOcXFxmjx5skqUKKGOHTsqV65cmj9/vqZNmyZHR0c1bdpU77///iPv4SbdO/uzdOlSTZgwQfPmzVOePHn02muvqWDBgknun/fyyy+rYMGCmjdvnhYuXKiYmBgVKlRIL774Yor6qhdffFHr1q0z/55v3bolZ2dnVatWTRMnTrSY7fV+fn5+Wr9+vWbOnKnY2Fi1adNGY8eOtRi2mJLaChcurDZt2mj//v1at26dbG1t5e7urhkzZjx0kiTp3vtz8eLFGj9+vJYvX65cuXLp5ZdfVoMGDSyuy7Szs9OcOXM0YcIEzZ07Vzlz5lSzZs3UrVu3JMNDGzRooC+++EIzZszQ9OnT5ebmpsmTJ2vHjh0WZ8al9PWDKf0blxnu3r1rPps9ffr0JM+/8sor5uAm3bvZtp2dnRYtWqSdO3eqSJEiGjVqVJJJZ0JCQpJMtrJo0SJJ94a13h/cGjdurFmzZmnWrFkaP3688uXLp/79+2f6scM6mYzHXfUPAAAAAMhSXOMGAAAAAFYu2we3s2fP6s0331TVqlXl5eWlTz75JEUTDRiGoXnz5qlRo0bm4UGHDx9O0u7GjRsaOHCgqlWrplq1amnMmDFJ7rEDAAAAAJkpWwe3kJAQvfHGG4qNjZW/v7+GDBmi1atXa8qUKY9dd/78+Zo5c6Z69eqluXPnqkCBAurdu7fFTFGxsbHq06ePzp8/r+nTp2vcuHH65ZdfNHTo0Mw8LAAAAACwkK0nJ1m1apX+++8/zZo1yzxbT3x8vD766CP179/fPHHCg6KjozV37lz17t3bPFtVjRo11LJlSy1cuFDjxo2TdO/+W//8848CAgLk7u4uSXJxcZGvr6+OHj3KjQ8BAAAAPBHZ+ozbnj17VLduXYspVlu1aqWEhIQkN4u838GDBxUeHq5WrVqZl9nb26tZs2bas2ePxfY9PT3NoU2SvLy8lCdPHu3evTtjDwYAAAAAHiJbn3ELCgrSq6++arHMxcVFBQoUUFBQ0CPXk2QRyCSpTJkyWrJkiaKiopQrVy4FBQUlaWMymVS6dOlHbv9RDh06JMMwZGdnl6b1AQAAADwdYmNjZTKZLG4t8TDZOriFhoYme38XV1dXhYSEPHI9e3t78/2BErm4uMgwDIWEhChXrlwKDQ1N9t47j9v+oxiGIcMwUjSBSnrZ29tn+j6Ap9WT+Iw+CfQDQNo9Lf2ARF8ApJU19QPZOrhlR3Z2djIMQ2XLls3U/ZhMJjk4OOjLlft05WbaQibwLCpW0FVvd/VSZGSksvttLukHgLR5mvoBib4ASIsn1Q+cOXNGJpMpRW2zdXBzcXFRWFhYkuUhISFydXV95HoxMTGKjo62OOsWGhoqk8lkXtfFxSXZqf9DQkJUpEiRNNdtMpnk6OiY5vVT48rNEJ2/8u8T2RfwNHFwcMjqEjIM/QCQNk9TPyDRFwBpkdn9QEpDm5TNJydxd3dPcq1ZWFiYbt26leTatAfXk6Rz585ZLA8KClLRokWVK1euh27fMAydO3fukdsHAAAAgIyUrYNbgwYN9Ouvvyo0NNS8bPPmzbKxsZGXl9dD16tevbqcnZ21adMm87LY2Fht3bpVDRo0sNj+yZMndf78efOy/fv36+7du2rYsGHGHgwAAAAAPES2Dm6vvfaanJyc9Pbbb+uXX37RmjVr9Mknn+i1116zuIfbG2+8oWbNmpkf58yZU/3799eiRYu0ZMkS7d+/X0OHDtXdu3fl6+trbteiRQs9//zzGjhwoHbt2qWAgACNHj1ajRo14h5uAAAAAJ6YbH2Nm6urq5YsWaLx48fr7bfflpOTkzp16qQhQ4ZYtEtISFB8fLzFsr59+8owDC1atEjBwcEqV66cFi5cqBIlSpjb2NnZacGCBZowYYLee+895ciRQ82aNdPo0aOfyPEBAAAAgJTNg5t0795rixcvfmSbZcuWJVlmMpnUv39/9e/f/5HrFipUSP7+/ukpEQAAAADSJVsPlQQAAACAZwHBDQAAAACsHMENAAAAAKwcwQ0AAAAArBzBDQAAAACsHMENAAAAAKwcwQ0AAAAArBzBDQAAAACsHMENAAAAAKwcwQ0AAAAArBzBDQAAAACsHMENAAAAAKwcwQ0AAAAArBzBDQAAAACsHMENAAAAAKwcwQ0AAAAArBzBDQAAAACsHMENAAAAAKwcwQ0AAAAArBzBDQAAAACsHMENAAAAAKwcwQ0AAAAArBzBDQAAAACsHMENAAAAAKwcwQ0AAAAArBzBDQAAAACsHMENAAAAAKwcwQ0AAAAArBzBDQAAAACsHMENAAAAAKwcwQ0AAAAArBzBDQAAAACsHMENAAAAAKwcwQ0AAAAArBzBDQAAAACsHMENAAAAAKwcwQ0AAAAArBzBDQAAAACsHMENAAAAAKwcwQ0AAAAArBzBDQAAAACsHMENAAAAAKxctg9uO3fuVLt27VSpUiW1aNFCa9aseew6R48e1ahRo9SsWTNVqVJFzZs31/Tp0xUREWHRzt/fX56enkl+Vq5cmVmHAwAAAABJ5MjqAtLjwIEDeuedd9SpUyeNHj1av/32m8aMGSMnJye1bNnyoett2rRJFy5cUJ8+fVSqVCmdOXNGM2fO1JEjR7R06VKLtrly5dKSJUsslpUoUSJTjgcAAAAAkpOtg9vs2bNVuXJlffzxx5KkOnXq6NKlS5o5c+Yjg1vfvn2VL18+8+PatWvLxcVFw4YN0/Hjx1WxYkXzczY2NqpatWqmHQMAAAAAPE62HSoZExOjwMDAJAGtdevWOnv2rC5fvvzQde8PbYnKly8vSbp582bGFgoAAAAA6ZRtz7hdvHhRsbGxcnd3t1hepkwZSVJQUJCKFy+e4u39+eefkpRke1FRUapTp45CQ0NVqlQp9erVS126dElX7YZhJLmeLqOZTCY5ODhk6j6Ap1lkZKQMw8jqMtKFfgBIn6ehH5DoC4D0yOx+wDAMmUymFLXNtsEtJCREkuTi4mKxPPFx4vMpERwcLH9/f3l7e6tUqVLm5W5ubho2bJjKly+v6OhorV+/Xh988IHCwsLk6+ub5tpjY2N14sSJNK+fEg4ODuaziABS79y5c4qMjMzqMtKFfgBIn6ehH5DoC4D0eBL9gL29fYraWVVwCwsLS9FQxYycHCQ2NlbvvfeeJGncuHEWz7Vv397icaNGjRQbG6vZs2erZ8+esrOzS9M+7ezsVLZs2TStm1IpTe4Akle6dOls/007/QCQPk9DPyDRFwDpkdn9wJkzZ1Lc1qqC2+bNmzV27NjHtgsICJCrq6uke2HvfqGhoZJkfv5RDMPQ6NGjdfToUX3zzTcqWLDgY9dp1aqVtmzZoosXL5qHZaaWyWSSo6NjmtYF8GQwrAgA/QCAzO4HUvPFilUFt86dO6tz584pahsTEyM7OzsFBQWpfv365uVBQUGSkl6rlpypU6dq06ZNmj9/vl544YW0FQ0AAAAAmSzbzippb2+v2rVra8uWLRbLAwICVKZMmcdOTDJv3jwtXrxYU6ZMUd26dVO834CAALm4uMjNzS1NdQMAAABAalnVGbfUGjBggHr27Klx48apVatWCgwM1IYNG/T5559btCtfvrw6dOigSZMmSZLWr1+v6dOnq127dipevLgOHz5sbuvm5ma+XUDHjh3VoUMHubu7KyoqSuvXr9fWrVs1evToNF/fBgAAAACpla2D24svvih/f3/NmDFD33//vYoWLaoJEyaoVatWFu3i4+OVkJBgfrxv3z5J0rp167Ru3TqLtpMnT1bHjh0l3Qtxixcv1u3bt2UymeTh4aFPP/1U7dq1y+QjAwAAAID/k62DmyR5e3vL29v7kW1OnTpl8XjKlCmaMmXKY7c9Y8aM9JQGAAAAABki217jBgAAAADPCoIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWLlsH9x27typdu3aqVKlSmrRooXWrFnz2HUuX74sT0/PJD9dunRJ0vbgwYPy8fFR5cqV1bhxY82bN0+GYWTGoQAAAABAsnJkdQHpceDAAb3zzjvq1KmTRo8erd9++01jxoyRk5OTWrZs+dj133vvPdWuXdv82MnJyeL5CxcuyNfXV15eXho8eLBOnTqladOmydbWVr6+vhl+PAAAAACQnGwd3GbPnq3KlSvr448/liTVqVNHly5d0syZM1MU3EqWLKmqVas+9PmFCxcqb968+uyzz2Rvb6+6desqODhYc+bMUY8ePWRvb59RhwIAAAAAD5Vth0rGxMQoMDAwSUBr3bq1zp49q8uXL6d7H3v27JG3t7dFQGvdurVCQ0N16NChdG8fAAAAAFIi255xu3jxomJjY+Xu7m6xvEyZMpKkoKAgFS9e/JHbGDdunIYMGaI8efLI29tbw4YNU548eSRJERERunbtWpLtu7u7y2QyKSgoyGKYZWoYhqGIiIg0rZtSJpNJDg4OmboP4GkWGRmZ7a9npR8A0udp6Ack+gIgPTK7HzAMQyaTKUVts21wCwkJkSS5uLhYLE98nPh8cuzt7dW1a1fVq1dPLi4uOnLkiObMmaPjx4/ru+++k52dncLCwpLdvr29vRwcHB65/ceJjY3ViRMn0rx+Sjg4OKh8+fKZug/gaXbu3DlFRkZmdRnpQj8ApM/T0A9I9AVAejyJfiCll19ZVXALCwvTzZs3H9uuRIkS6dpPwYIFNW7cOPPjWrVq6fnnn1f//v21bds2tW7dOl3bfxw7OzuVLVs2U/eR0uQOIHmlS5fO9t+00w8A6fM09AMSfQGQHpndD5w5cybFba0quG3evFljx459bLuAgAC5urpKkvnMWKLQ0FBJMj+fUg0bNpSjo6P++usvtW7dWrlz5052+zExMYqMjEz19u9nMpnk6OiY5vUBZD6GFQGgHwCQ2f1Aar5Ysarg1rlzZ3Xu3DlFbWNiYmRnZ6egoCDVr1/fvDwoKEiSklybllqOjo4qUqSIeXuJzp07J8Mw0r19AAAAAEipbDurpL29vWrXrq0tW7ZYLA8ICFCZMmUeOzHJg3bt2qWIiAhVqlTJvKxBgwbasWOHYmNjLbbv4uKiatWqpe8AAAAAACCFrOqMW2oNGDBAPXv21Lhx49SqVSsFBgZqw4YN+vzzzy3alS9fXh06dNCkSZMkSVOmTJHJZFLVqlXl4uKio0ePau7cuapYsaKaNm1qXs/X11fr16/X0KFD1bVrV50+fVoLFy7UkCFDuIcbAAAAgCcmWwe3F198Uf7+/poxY4a+//57FS1aVBMmTFCrVq0s2sXHxyshIcH8uEyZMlq5cqVWr16tqKgoFSpUSJ06ddKgQYOUI8f/vSQlS5bUwoULNWXKFPXr10/58uXToEGD1Lt37yd2jAAAAACQrYObJHl7e8vb2/uRbU6dOmXxODXX0lWvXl2rV69Oc30AAAAAkF7Z9ho3AAAAAHhWENwAAAAAwMoR3AAAAADAyhHcAAAAAMDKEdwAAAAAwMoR3AAAAADAyhHcAAAAAMDKEdwAAAAAwMoR3AAAAADAyhHcAAAAAMDKEdwAAAAAwMoR3AAAAADAyhHcAAAAAMDKEdwAAAAAwMoR3AAAAADAyhHcAAAAAMDKEdwAAAAAwMoR3AAAAADAyhHcAAAAAMDKEdwAAAAAwMoR3AAAAADAyhHcAAAAAMDKEdwAAAAAwMoR3AAAAADAyhHcAAAAAMDKEdwAAAAAwMoR3AAAAADAyhHcAAAAAMDKEdwAAAAAwMoR3AAAAADAyhHcAAAAAMDKEdwAAAAAwMoR3AAAAADAyhHcAAAAAMDKEdwAAAAAwMoR3AAAAADAyhHcAAAAAMDKEdwAAAAAwMoR3AAAAADAyhHcAAAAAMDKEdwAAAAAwMoR3AAAAADAymX74LZz5061a9dOlSpVUosWLbRmzZrHruPv7y9PT89kf/z8/B7bbuXKlZl5SAAAAABgIUdWF5AeBw4c0DvvvKNOnTpp9OjR+u233zRmzBg5OTmpZcuWD12vc+fOql+/vsWyP/74Q9OmTVODBg0slufKlUtLliyxWFaiRImMOwgAAAAAeIxsHdxmz56typUr6+OPP5Yk1alTR5cuXdLMmTMfGdwKFy6swoULWyxbtWqVXF1dkwQ3GxsbVa1aNcNrBwAAAICUyrZDJWNiYhQYGJgkoLVu3Vpnz57V5cuXU7yt6Ohobdu2TS1atJC9vX1GlwoAAAAA6ZJtz7hdvHhRsbGxcnd3t1hepkwZSVJQUJCKFy+eom3t2rVL4eHhatu2bZLnoqKiVKdOHYWGhqpUqVLq1auXunTpkq7aDcNQREREurbxOCaTSQ4ODpm6D+BpFhkZKcMwsrqMdKEfANLnaegHJPoCID0yux8wDEMmkylFbbNtcAsJCZEkubi4WCxPfJz4fEps2LBBhQoVUs2aNS2Wu7m5adiwYSpfvryio6O1fv16ffDBBwoLC5Ovr2+aa4+NjdWJEyfSvH5KODg4qHz58pm6D+Bpdu7cOUVGRmZ1GelCPwCkz9PQD0j0BUB6PIl+IKUj/qwquIWFhenmzZuPbZeRk4OEhoZq9+7d6t69u2xsLEeOtm/f3uJxo0aNFBsbq9mzZ6tnz56ys7NL0z7t7OxUtmzZNNecEilN7gCSV7p06Wz/TTv9AJA+T0M/INEXAOmR2f3AmTNnUtzWqoLb5s2bNXbs2Me2CwgIkKurq6R7Ye9+oaGhkmR+/nG2bNmimJgYvfzyyylq36pVK23ZskUXL140D8tMLZPJJEdHxzStC+DJYFgRAPoBAJndD6TmixWrCm6dO3dW586dU9Q2JiZGdnZ2CgoKspjaPygoSJKSXPv2MBs2bJC7uztDCAAAAABYrWw7q6S9vb1q166tLVu2WCwPCAhQmTJlUjQxyc2bN/X7778nOynJwwQEBMjFxUVubm6prhkAAAAA0sKqzril1oABA9SzZ0+NGzdOrVq1UmBgoDZs2KDPP//col358uXVoUMHTZo0yWJ5QECAEhISHjpMsmPHjurQoYPc3d0VFRWl9evXa+vWrRo9enSar28DAAAAgNTK1sHtxRdflL+/v2bMmKHvv/9eRYsW1YQJE9SqVSuLdvHx8UpISEiy/vr161W5cuWHnj1zc3PT4sWLdfv2bZlMJnl4eOjTTz9Vu3btMuV4AAAAACA52Tq4SZK3t7e8vb0f2ebUqVPJLl+zZs0j15sxY0ZaywIAAACADJPq4BYZGal9+/bp4MGDOnv2rP7991+ZTCblzZtX7u7uql69ul566SVmTQQAAACADJLi4Hbq1Cl9/fXX2rp1qyIiIpQrVy4VLlxYrq6uMgxD586d0/79+7Vo0SI5ODioRYsWevPNN+Xp6ZmZ9QMAAADAUy9FwW3w4MHaunWrKlasqIEDB+qll15S2bJlZWtra9EuPj5eZ86c0b59+7Rlyxa98soratmypT777LNMKR4AAAAAngUpCm42NjZas2aNypUr98h2tra28vT0lKenp3r37q0TJ05o/vz5GVIoAAAAADyrUhTc0nrGrFy5cpxtAwAAAIB0yrY34AYAAACAZ0WG3A5g7dq1Wr9+vW7cuKHnnntOrVu3VpcuXWQymTJi8wAAAADwTEt3cPvyyy+1cuVK+fj4qGDBgjpz5owmTZqkCxcuaPjw4RlRIwAAAAA801Ic3K5cuaJixYolWb527Vp99tlnqlWrlnlZgQIF9PXXXxPcAAAAACADpPgatzZt2mjGjBmKjIy0WO7k5KSrV69aLLt69aqcnJwypkIAAAAAeMal+IzbsmXLNHHiRK1du1ZDhw5Vu3btJElvv/223nvvPf3www8qWLCggoKCdOLECU2ePDnTigYAAACAZ0mKz7hVqlRJq1at0nvvvafp06fLx8dHR48eVfPmzbVu3TrVqVNHzs7OatKkiX766Sd16NAhE8sGAAAAgGdHqicnad++vZo3b645c+aoZ8+eatmypYYOHaq33norM+oDAAAAgGdemu7j5uDgoCFDhmj9+vUKDw9XixYtNHfuXMXExGR0fQAAAADwzEvVGbfDhw9r165dioyMVJUqVdSmTRvNmjVL+/fv16RJk7R69WqNGDFCzZs3z6x6AQAAAOCZk+Izbt9//71ef/11HTx4UNeuXdOYMWM0ePBgSVLdunX1008/6c0339QHH3ygnj176tSpU5lVMwAAAAA8U1Ic3ObMmaNu3bpp2bJl8vf3l7+/v7Zs2aJLly7d25CNjbp3766tW7eqTJky6ty5c6YVDQAAAADPkhQHt9DQUJUqVcr82M3NTYZhKDQ01KKdq6urPvzwQ33//fcZViQAAAAAPMtSfI1b/fr1NW/ePOXOnVsuLi5atGiRihQpoueffz7Z9h4eHhlWJAAAAAA8y1Ic3MaNG6cpU6bok08+UVRUlCpVqqS5c+fK3t4+M+sDAAAAgGdeioNb7ty5NXHixMysBQAAAACQjDTdxw0AAAAA8OSkKLj5+fmZZ49MjYsXL8rPzy/V6wEAAAAA/k+Khkpeu3ZNrVq1Up06ddS6dWvVrVtXRYoUSbbt5cuXtX//fm3atEmBgYHy8vLK0IIBAAAA4FmTouA2f/58/fnnn1q0aJH8/PwUHx+vPHnyqFixYnJ1dZVhGAoJCdHly5cVGhoqW1tbNWjQQEuWLNGLL76Y2ccAAAAAAE+1FE9OUqNGDdWoUUPBwcHatWuXDh8+rKCgIF2/fl2SlCdPHjVv3lxVq1ZVo0aNlD9//kwrGgAAAACeJSkObony5cunV199Va+++mpm1AMAAAAAeACzSgIAAACAlSO4AQAAAICVI7gBAAAAgJUjuAEAAACAlSO4AQAAAICVI7gBAAAAgJVL9e0A7nf48GEFBgbqzp07ev3111WqVClFRkYqKChIpUqVkpOTU0bVCQAAAADPrDQFt5iYGL333nvasWOHDMOQyWRS48aNVapUKdnY2Kh3797q1auXBgwYkNH1AgAAAMAzJ01DJb/44gv9/PPPGjdunDZv3izDMMzP5cyZUy1bttSOHTsyrEgAAAAAeJalKbht3LhRr732mnx8fOTq6prk+TJlyujSpUvpLg4AAAAAkMbgdufOHXl6ej70eVtbW0VFRaW5KAAAAADA/0lTcCtSpIiCgoIe+vzBgwfl5uaW5qIAAAAAAP8nTcGtbdu2WrVqlQ4dOmReZjKZJEmrV6/Wpk2b1KFDhwwpEAAAAACedWmaVfJ///ufjhw5ou7du8vd3V0mk0mTJ09WSEiIrl+/roYNG6pXr14ZXCoAAAAAPJvSFNzs7e21YMECrVu3Tlu2bFFCQoJiYmLk6empwYMHq3379uYzcAAAAACA9EnzDbhNJpPat2+v9u3bZ2Q9qbJv3z798MMPOnLkiC5duqRu3brJz88vReuGhYVp8uTJ2r59u2JjY1W/fn2NHTtWBQsWtGh38OBBTZ06VSdOnFD+/PnVtWtX9e3bl2AKAAAA4IlJ0zVu1mLv3r06efKkatasKRcXl1StO3jwYO3bt0/jxo3TtGnTdO7cOfXt21dxcXHmNhcuXJCvr68KFCiguXPn6o033tDMmTO1aNGijD4UAAAAAHioFJ1x69mzZ6o3bDKZtGTJklSvlxrDhw/XyJEjJUmBgYEpXu/QoUP65ZdftHDhQtWrV0+SVLp0abVu3Vpbt25V69atJUkLFy5U3rx59dlnn8ne3l5169ZVcHCw5syZox49esje3j7jDwoAAAAAHpCiM26GYST5uXbtmn7//XedOHFC4eHhCg8P18mTJ/X777/r+vXrMgwjs2uXjU3aThju2bNHLi4u8vLyMi9zd3dXuXLltGfPHot23t7eFgGtdevWCg0NtZhREwAAAAAyU4rOuC1btszi8YEDB/TWW29p/PjxeuWVV5Qjx73NxMXF6YcfftC0adM0efLkjK82gwQFBal06dJJrlNzd3c3358uIiJC165dk7u7e5I2JpNJQUFBql27dpr2bxiGIiIi0lZ8CplMJjk4OGTqPoCnWWRk5BP5Aioz0Q8A6fM09AMSfQGQHpndDxiGkeK5M9I0Ocknn3yijh07qnPnzpYby5FDXbp0UVBQkKZMmaLvvvsuLZvPdKGhocqdO3eS5a6urjp+/Like5OXSEpy7Zy9vb0cHBwUEhKS5v3HxsbqxIkTaV4/JRwcHFS+fPlM3QfwNDt37pwiIyOzuox0oR8A0udp6Ack+gIgPZ5EP5DSy6/SFNxOnTr1yNkkixcvrpUrV6Z6u2FhYbp58+Zj25UoUSJbX19mZ2ensmXLZuo+mPUSSJ/SpUtn+2/a6QeA9Hka+gGJvgBIj8zuB86cOZPitmkKbgULFlRAQIB8fHzMwyQTxcXFKSAgIMm0+imxefNmjR079rHtAgICVKZMmVRvP5GLi4uuX7+eZHlISIhcXV0lyXxGLvHMW6KYmBhFRkaa26WFyWSSo6NjmtcHkPkYVgSAfgBAZvcDqfliJU3BrU+fPvrwww/VpUsXde3aVW5ubpLuTZ+/atUqnThxQh9++GGqt9u5c+ckwy8zg7u7u/bv359kTOm5c+fk4eEhSXJ0dFSRIkXM17zd38YwjCTXvgEAAABAZklTcPPx8ZGNjY1mzJihDz74wBx+DMNQvnz59NFHH6lLly4ZWmhGatCggb766ivt379fL730kqR7gezvv/9Wnz59LNrt2LFD77//vuzs7CTdO9vn4uKiatWqZUntAAAAAJ49aQpu0r2zY6+88oqOHz+uq1evSpKKFi2qihUrJhk+mVmuXLmiY8eOSbo348vFixe1efNmSVLLli3N7cqXL68OHTpo0qRJkqRq1aqpXr16Gj16tEaMGKGcOXPq888/l6enp5o3b25ez9fXV+vXr9fQoUPVtWtXnT59WgsXLtSQIUOy9TV2AAAAALKXdCWsHDlyqGrVqqpatWoGlZM6gYGBGjVqlPnx3r17tXfvXkn3JlBJFB8fr4SEBIt1Z8yYocmTJ8vPz09xcXGqV6+exo4daxE6S5YsqYULF2rKlCnq16+f8uXLp0GDBql3796ZfGQAAAAA8H/SFdxiY2MVFBSksLCwZGdbqVmzZno2/1gdO3ZUx44dH9vu/hCXKHfu3Jo0aZL5LNzDVK9eXatXr05zjQAAAACQXmkKbgkJCZo+fbq++eYbRUVFPbRdZt+rDAAAAACeBWkKbnPmzNHChQvl4+OjGjVqaPjw4Ro2bJhcXFz0zTffyGQy6f3338/oWgEAAADgmWSTlpXWrl2rVq1a6aOPPlL9+vUlSRUqVFCXLl20evVqmUwm/fbbbxlaKAAAAAA8q9IU3K5fv646depIknl2xZiYGPPjdu3a6aeffsqgEgEAAADg2Zam4JYnTx5FRERIkpycnOTs7KxLly5ZtAkNDU1/dQAAAACAtF3jVr58efP90ySpdu3aWrJkicqVKyfDMLR06VJ5enpmWJEAAAAA8CxL0xm3Ll26KCYmxjw8csiQIQoNDVX37t3VvXt3/ffffxo5cmSGFgoAAAAAz6o0nXHz9vaWt7e3+XHZsmW1fft2BQYGytbWVtWqVVOePHkyqkYAAAAAeKal6wbc98udO7eaNm2aUZsDAAAAAPx/KQpuV69eTdPGixYtmqb1AAAAAAD/J0XBrUmTJjKZTKne+IkTJ1K9DgAAAADAUoqC26RJkyyCW0JCgpYuXaqrV6/q5ZdfVunSpSVJQUFB2rBhg4oVK6YePXpkTsUAAAAA8IxJUXDr2LGjxePZs2crOjpaW7duVd68eS2eGzhwoLp27arbt29nXJUAAAAA8AxL0+0AVq1aJR8fnyShTZLy5cunLl26aOXKlekuDgAAAACQxuB29+5dRUZGPvT5yMhI3b17N601AQAAAADuk6bgVqVKFS1ZskTHjx9P8tyxY8e0bNkyVa5cOd3FAQAAAADSeB83Pz8/9ejRQ507d1aVKlVUqlQpSdL58+d15MgRubq66oMPPsjIOgEAAADgmZWm4Fa2bFmtX79e8+bN0549exQQECDp3n3bevbsqT59+qhAgQIZWigAAAAAPKvSFNwk6bnnntPo0aM1evTojKwHAAAAAPCANF3jBgAAAAB4clJ0xm3UqFEymUwaP368bG1tNWrUqMeuYzKZNGnSpHQXCAAAAADPuhQFt8DAQJlMJiUkJMjW1laBgYGPXcdkMqW7OAAAAABACoPbzp07H/kYAAAAAJB5uMYNAAAAAKxcmmaVDA8PV1hYmIoUKWJeduPGDa1atUoxMTFq0aIFN+AGAAAAgAyS5htwX758WatXr5Z0L8j5+Pjo+vXrsrGx0dKlS7VgwQLVrl07Q4sFAAAAgGdRmoZK/vnnn2rUqJH58U8//aSbN29q1apV+v333+Xp6anZs2dnVI0AAAAA8ExLU3D7999/VahQIfPjnTt3qkaNGqpataqcnZ3VoUMHnTx5MsOKBAAAAIBnWZqCm4uLi27fvi1JioqK0p9//ikvLy/z87a2toqKisqYCgEAAADgGZema9yqVaumb775Ru7u7tq7d6+io6Pl7e1tfv78+fMWZ+QAAAAAAGmXpjNuw4YNU44cOTRw4ECtXr1avXr10vPPPy9Jio+P1+bNm1WzZs0MLRQAAAAAnlVpOuNWsmRJbd68WWfPnpWzs7OKFy9ufi4yMlIffPCBXnjhhQwrEgAAAACeZWkKbpJkZ2eXbDhzdnZW06ZN01UUAAAAAOD/pGmopHTv3m3z5s2Tr6+vOnTooKNHj0qS7t69q6+//loXLlzIsCIBAAAA4FmWpjNu169fV/fu3XX9+nWVLFlSQUFB+u+//yRJefLk0apVq3TlyhWNHTs2Q4sFAAAAgGdRmoLbJ598ov/++08//vij8uXLp5deesni+aZNm+rnn3/OiPoAAAAA4JmXpqGS+/btU48ePVS2bFmZTKYkz5coUULXrl1Ld3EAAAAAgDQGt6ioKOXLl++hzycOmwQAAAAApF+agluZMmX0xx9/PPT57du3q3z58mkuCgAAAADwf9IU3N544w0FBARo3rx5Cg8PlyQZhqELFy7o/fff1+HDh9WrV6+MrBMAAAAAnllpmpykffv2unr1qr744gvNmDFDktSnTx8ZhiEbGxsNGTKEe7kBAAAAQAZJ8w24BwwYoPbt22vr1q26cOGCEhIS5ObmpubNm6tEiRIZWSMAAAAAPNPSHNwkqWjRolk6JHLfvn364YcfdOTIEV26dEndunWTn5/fY9c7evSoVq5cqQMHDujmzZsqVKiQWrRooQEDBsjR0dHczt/fX7NmzUqy/rhx49S1a9cMPRYAAAAAeJh0BbfTp09r9+7dunLliiSpePHiql+/vjw9PTOkuMfZu3evTp48qZo1ayokJCTF623atEkXLlxQnz59VKpUKZ05c0YzZ87UkSNHtHTpUou2uXLl0pIlSyyWcUYRAAAAwJOUpuAWExMjPz8//fTTT+br2iQpISFB06dP18svv6wJEybI3t4+Q4t90PDhwzVy5EhJUmBgYIrX69u3r8XtDGrXri0XFxcNGzZMx48fV8WKFc3P2djYqGrVqhlWMwAAAACkVpqC26effqoff/xRr7/+urp37y43NzeZTCZduHBBy5Yt08qVK+Xq6qoxY8ZkdL0WEgNjaiV3D7rE2xfcvHkzXTUBAAAAQEZLU3Bbt26d2rdvn+R6Mnd3d3344YcKDw/XunXrMj24ZaQ///xT0r1juF9UVJTq1Kmj0NBQlSpVSr169VKXLl3StS/DMBQREZGubTyOyWSSg4NDpu4DeJpFRkbKMIysLiNd6AeA9Hka+gGJvgBIj8zuBwzDkMlkSlHbNAW3uLg4ValS5aHPV6tWTbt27UrLprNEcHCw/P395e3trVKlSpmXu7m5adiwYSpfvryio6O1fv16ffDBBwoLC5Ovr2+a9xcbG6sTJ05kQOUP5+DgwE3QgXQ4d+6cIiMjs7qMdKEfANLnaegHJPoCID2eRD+Q0svL0hTc6tWrp19++UWvv/56ss/v3btXXl5eqd5uWFhYioYqlihRIsOun4uNjdV7770n6d5skfdr3769xeNGjRopNjZWs2fPVs+ePWVnZ5emfdrZ2als2bJpWjelUprcASSvdOnS2f6bdvoBIH2ehn5Aoi8A0iOz+4EzZ86kuG2Kgtvdu3ctHr/77rsaPHiw3nnnHXXr1k1ubm6SpAsXLmjFihW6evWqPv/885RX/P9t3rxZY8eOfWy7gIAAlSlTJtXbf5BhGBo9erSOHj2qb775RgULFnzsOq1atdKWLVt08eLFNNdgMpksbjsAwPowrAgA/QCAzO4HUvPFSoqCW506dZJs1DAMnT59Wjt27EiyXJLatm2rv//+O8WFSFLnzp3VuXPnVK2THlOnTtWmTZs0f/58vfDCC09svwAAAACQGikKbm+//fZTd5p93rx5Wrx4saZNm6a6deumeL2AgAC5uLiYzzICAAAAQGZLUXAbOHBgZteRJleuXNGxY8ck3Zvx5eLFi9q8ebMkqWXLluZ25cuXV4cOHTRp0iRJ0vr16zV9+nS1a9dOxYsX1+HDh81t3dzczLcL6Nixozp06CB3d3dFRUVp/fr12rp1q0aPHp3m69sAAAAAILXSNDlJooiICIWHh8vJyUlOTk4ZVVOKBQYGatSoUebHe/fu1d69eyVJp06dMi+Pj49XQkKC+fG+ffsk3butwbp16yy2OXnyZHXs2FHSvRC3ePFi3b59WyaTSR4eHvr000/Vrl27TDsmAAAAAHhQqoPb5cuXtWDBAu3evVvXr183Ly9UqJAaN26s3r17q0SJEhla5MN07NjRHLIe5f4QJ0lTpkzRlClTHrvejBkz0loaAAAAAGQYm9Q03r59u9q1a6dVq1bJxsZGjRs3Vtu2bdW4cWPZ2tpq5cqVateunbZv355Z9QIAAADAMyfFZ9zOnDmjIUOGqESJEvr444/14osvJmlz4MABffjhh3rvvff0ww8/ZPq9ygAAAADgWZDiM25z5sxR3rx59c033yQb2iTpxRdf1IoVK5QnTx7NnTs3w4oEAAAAgGdZioNbYGCgOnXqpDx58jyyXZ48efTqq6/qt99+S29tAAAAAAClIrjdvXtXxYoVS1Hb4sWL6+7du2mtCQAAAABwnxQHt7x58+ry5cspanv58mXlzZs3zUUBAAAAAP5PioNbrVq19P333z/2TNrdu3f1/fffq1atWumtDQAAAACgVAS3//3vf7p79666d++ugwcPJtvm4MGD6tGjh+7evav+/ftnWJEAAAAA8CxL8e0AypYtq+nTp2vEiBHq1q2bihUrphdeeEFOTk7677//dOrUKV2+fFk5c+bUp59+queffz4z6wYAAACAZ0aKg5skNW/eXOXKldP8+fP1888/W9xou0CBAurcubN8fX1VsmTJDC8UAAAAAJ5VqQpuksw34Jak8PBw/ffff3JycpKzs3OGFwcAAAAASENwu5+zszOBDQAAAAAyWYonJwEAAAAAZA2CGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFi5bB3c9u3bp6FDh6pp06by9PTUxx9/nKL1Ll++LE9PzyQ/Xbp0SdL24MGD8vHxUeXKldW4cWPNmzdPhmFk9KEAAAAAwEPlyOoC0mPv3r06efKkatasqZCQkFSv/95776l27drmx05OThbPX7hwQb6+vvLy8tLgwYN16tQpTZs2Tba2tvL19U13/QAAAACQEtk6uA0fPlwjR46UJAUGBqZ6/ZIlS6pq1aoPfX7hwoXKmzevPvvsM9nb26tu3boKDg7WnDlz1KNHD9nb26e1dAAAAABIsWw9VNLGJnPL37Nnj7y9vS0CWuvWrRUaGqpDhw5l6r4BAAAAIFG2PuOWXuPGjdOQIUOUJ08eeXt7a9iwYcqTJ48kKSIiQteuXZO7u7vFOu7u7jKZTAoKCrIYZpkahmEoIiIiveU/kslkkoODQ6buA3iaRUZGZvvrWekHgPR5GvoBib4ASI/M7gcMw5DJZEpR22cyuNnb26tr166qV6+eXFxcdOTIEc2ZM0fHjx/Xd999Jzs7O4WFhUmSXFxckqzr4OCQpmvqEsXGxurEiRPpOobHcXBwUPny5TN1H8DT7Ny5c4qMjMzqMtKFfgBIn6ehH5DoC4D0eBL9QEovv7Kq4BYWFqabN28+tl2JEiXSdX1ZwYIFNW7cOPPjWrVq6fnnn1f//v21bds2tW7dOs3bTgk7OzuVLVs2U/eR0uQOIHmlS5fO9t+00w8A6fM09AMSfQGQHpndD5w5cybFba0quG3evFljx459bLuAgACVKVMmQ/fdsGFDOTo66q+//lLr1q2VO3duSTKfeUsUExOjyMhIubq6pnlfJpNJjo6O6aoXQOZiWBEA+gEAmd0PpOaLFasKbp07d1bnzp2zugxJkqOjo4oUKaKgoCCL5efOnZNhGEmufQMAAACAzJKtZ5XMSLt27VJERIQqVapkXtagQQPt2LFDsbGx5mUBAQFycXFRtWrVsqJMAAAAAM8gqzrjllpXrlzRsWPHJN2b8eXixYvavHmzJKlly5bmduXLl1eHDh00adIkSdKUKVNkMplUtWpVubi46OjRo5o7d64qVqyopk2bmtfz9fXV+vXrNXToUHXt2lWnT5/WwoULNWTIEO7hBgAAAOCJydbBLTAwUKNGjTI/3rt3r/bu3StJOnXqlHl5fHy8EhISzI/LlCmjlStXavXq1YqKilKhQoXUqVMnDRo0SDly/N9LUrJkSS1cuFBTpkxRv379lC9fPg0aNEi9e/d+AkcHAAAAAPdk6+DWsWNHdezY8bHt7g9xUuqupatevbpWr16dpvoAAAAAICNwjRsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFi5bB3c9u3bp6FDh6pp06by9PTUxx9/nKL1/P395enpmeyPn5/fY9utXLkysw4JAAAAAJLIkdUFpMfevXt18uRJ1axZUyEhISler3Pnzqpfv77Fsj/++EPTpk1TgwYNLJbnypVLS5YssVhWokSJtBcNAAAAAKmUrYPb8OHDNXLkSElSYGBgitcrXLiwChcubLFs1apVcnV1TRLcbGxsVLVq1XTXCgAAAABpla2HStrYZEz50dHR2rZtm1q0aCF7e/sM2SYAAAAAZJRsfcYto+zatUvh4eFq27ZtkueioqJUp04dhYaGqlSpUurVq5e6dOmSrv0ZhqGIiIh0beNxTCaTHBwcMnUfwNMsMjJShmFkdRnpQj8ApM/T0A9I9AVAemR2P2AYhkwmU4raEtwkbdiwQYUKFVLNmjUtlru5uWnYsGEqX768oqOjtX79en3wwQcKCwuTr69vmvcXGxurEydOpLfsR3JwcFD58uUzdR/A0+zcuXOKjIzM6jLShX4ASJ+noR+Q6AuA9HgS/UBKR/xZVXALCwvTzZs3H9uuRIkSGTakMTQ0VLt371b37t2TDL1s3769xeNGjRopNjZWs2fPVs+ePWVnZ5emfdrZ2als2bJprjklUprcASSvdOnS2f6bdvoBIH2ehn5Aoi8A0iOz+4EzZ86kuK1VBbfNmzdr7Nixj20XEBCgMmXKZMg+t2zZopiYGL388sspat+qVStt2bJFFy9eTHMNJpNJjo6OaVoXwJPBsCIA9AMAMrsfSM0XK1YV3Dp37qzOnTs/0X1u2LBB7u7uDCEAAAAAYLWy9ayS6XXz5k39/vvvyU5K8jABAQFycXGRm5tbJlYGAAAAAP/Hqs64pdaVK1d07NgxSfdmfLl48aI2b94sSWrZsqW5Xfny5dWhQwdNmjTJYv2AgAAlJCQ8dJhkx44d1aFDB7m7uysqKkrr16/X1q1bNXr06DRf3wYAAAAAqZWtg1tgYKBGjRplfrx3717t3btXknTq1Cnz8vj4eCUkJCRZf/369apcufJDz565ublp8eLFun37tkwmkzw8PPTpp5+qXbt2GXwkAAAAAPBw2Tq4dezYUR07dnxsu/tD3P3WrFnzyPVmzJiRlrIAAAAAIEM909e4AQAAAEB2QHADAAAAACuXrYdKAgAAIGWKFXTN6hKAbMMaPy8ENwAAgKdcQoKht7t6ZXUZQLaSkGDIxiblN8jObAyVBAAAeMpZ0z+fQHZhbZ8bghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWDmCGwAAAABYOYIbAAAAAFg5ghsAAAAAWLkcWV0AACBzFSvomtUlANkKnxkA1ojgBgBPsYQEQ2939crqMoBsJyHBkI2NKavLAAAzhkoCwFOMfzyBtOGzA8DaENwAAAAAwMoR3AAAAADAyhHcAAAAAMDKEdwAAAAAwMoR3AAAAADAyhHcAAAAAMDKEdwAAAAAwMoR3AAAAADAyhHcAAAAAMDKEdwAAAAAwMoR3AAAAADAyhHcAAAAAMDKEdwAAAAAwMoR3AAAAADAyhHcAAAAAMDKZdvgFh8fr/nz56tbt26qXbu2atWqpR49eujAgQMpWj8sLEyjR49WrVq1VK1aNQ0aNEg3b95M0u7gwYPy8fFR5cqV1bhxY82bN0+GYWT04QAAAADAQ2Xb4BYVFaV58+apQoUKmjp1qqZNmyZXV1f17NlT+/fvf+z6gwcP1r59+zRu3DhNmzZN586dU9++fRUXF2duc+HCBfn6+qpAgQKaO3eu3njjDc2cOVOLFi3KzEMDAAAAAAs5srqAtMqVK5e2b98uV1dX8zIvLy+1bdtWS5YsUd26dR+67qFDh/TLL79o4cKFqlevniSpdOnSat26tbZu3arWrVtLkhYuXKi8efPqs88+k729verWravg4GDNmTNHPXr0kL29feYeJAAAAAAoG59xs7W1tQhtics8PT2THfJ4vz179sjFxUVeXl7mZe7u7ipXrpz27Nlj0c7b29sioLVu3VqhoaE6dOhQBh0JAAAAADxatj3jlpy4uDgdOXJENWrUeGS7oKAglS5dWiaTyWK5u7u7goKCJEkRERG6du2a3N3dk7QxmUwKCgpS7dq101SnYRiKiIhI07opZTKZ5ODgoGIFXR/fGIBZ4mcmMjKS61kBAECmMgwjSSZ5mKcquC1YsEA3btxQr169HtkuNDRUuXPnTrLc1dVVx48fl3Rv8hJJcnFxsWhjb28vBwcHhYSEpLnO2NhYnThxIs3rp4SdnZ3Kl6+gt7t6Pb4xAAtxcfH6559/FBsbm9WlAACAp1xKL7+yquAWFhb22GGOklSiRIkkB7hv3z75+/vrrbfeUsWKFTOrxAxhZ2ensmXLZvp+YmNjxP+dQNo8ic8oAAB4tp05cybFba0quG3evFljx459bLuAgACVKVPG/Pivv/7SwIED1bZtW73zzjuPXd/FxUXXr19PsjwkJMR83VziGbnEM2+JYmJiFBkZmeT6utQwmUxydHRM8/oAAAAAsr+UDpOUrCy4de7cWZ07d07VOhcuXFDfvn1VrVo1TZgwIUXruLu7a//+/UnGlJ47d04eHh6SJEdHRxUpUsR8zdv9bQzDSHLtGwAAAABklmw7q6Qk3bx5U71791aRIkU0c+ZM2dnZpWi9Bg0aKCQkxOJ+b+fOndPff/+tBg0aWLTbsWOHxXUuAQEBcnFxUbVq1TLuQAAAAADgEbJtcIuKilLfvn3177//6u2339Y///yjw4cP6/Dhw/r7778t2pYvX16jR482P65WrZrq1aun0aNHa9OmTdq5c6cGDRokT09PNW/e3NzO19dXwcHBGjp0qPbv368lS5Zo4cKF+t///sc93AAAAAA8MVY1VDI1bt++rZMnT0qSBgwYYPFcsWLFtHPnTvPj+Ph4JSQkWLSZMWOGJk+eLD8/P8XFxalevXoaO3ascuT4v5ekZMmSWrhwoaZMmaJ+/fopX758GjRokHr37p2JRwYAAAAAlkwGNyp6oo4dOyZJqlSpUhZXAgAAACArpSYbZNuhkgAAAADwrCC4AQAAAICVI7gBAAAAgJUjuAEAAACAlSO4AQAAAICVI7gBAAAAgJUjuAEAAACAlSO4AQAAAICVI7gBAAAAgJUjuAEAAACAlSO4AQAAAICVI7gBAAAAgJUjuAEAAACAlcuR1QU8a2JjY2UYho4dO5bVpQAAAADIQjExMTKZTClqS3B7wlL6iwEAAADwdDOZTCnOBybDMIxMrgcAAAAAkA5c4wYAAAAAVo7gBgAAAABWjuAGAAAAAFaO4AYAAAAAVo7gBgAAAABWjuAGAAAAAFaO4AYAAAAAVo7gBgAAAABWjuAGAAAAAFaO4AYAAAAAVo7gBgAAAABWjuAGAAAAAFaO4AYAAAAAVo7gBjzlDMPI6hIAAACQTgQ34CkUERGh+fPnS5JMJhPhDQAAIJsjuAFPoY0bN2r69OmaNGmSJMIbAABAdkdwA55CDRs21ODBg7V06VJ9/PHHkghvwNMsPj4+q0sA8IQlJCQkWcbf+acbwQ14ysTFxalgwYLq2rWrRo4cqW+++UbTp0+XRHgDnla2traSpAkTJmj//v1ZXA2AzBYfHy8bm3v/xl+5ckXnzp2TdO/vPJ5eBDfgKRIfH68cOXJIkjZt2qQLFy4oX758mj9/vqZNmyaJ8AY8DWJiYvTvv/+aHxuGoX/++Uc//PCDSpYsmYWVAXgSEr+sGTlypLp27aqXX35ZgwYN0qlTp/gb/xQjuAFPkcSOfNCgQVq0aJGcnJz01ltvqUqVKlqwYIEmTpwoifAGZGdxcXHy8fHRJ598olu3bkm695mOjo6WyWTiG3fgKXb/sOjPP/9cBw4cUO/evTV06FAdOXJEI0eO1IEDB5IdRonsL0dWFwAgY/36668KDAzU5MmT1bBhQ9na2qpRo0Zas2aNZs+erRw5cmjEiBHm8MY/eUD2kiNHDrVq1UozZ85U7ty51adPHxUsWFBOTk5ydnY2D58C8PRJ/IL2zz//VM6cOTVo0CC1a9dOktS0aVP16tVLH3/8sfz8/FSjRg36g6cMv03gKWMYhiIiIpQ7d27Z2trKMAwVL15cPj4+atasmb7++mvNnDlTEmPhgezIMAz169dPo0aN0tKlSzVv3jzduXNH4eHhsrW1Vc6cOZO0B/D0WLp0qXx9fbVkyRIVLVpU0r3h0yVKlNDy5csVERGhjz/+WAcPHuTM21OG4AY8ZXLlyiVJunHjhqR7w6oMw1DhwoXVrVs35cyZU1999ZU++eSTrCwTQBrExcWZv3Bp3769xo8fr+XLl2vBggU6c+aMbt26pcuXL+v06dO6dOmSgoODdfPmTf3111/MPAk8JcqVKycvLy+Fhobq4MGDkiR7e3vFxsaqSJEiWr58uWJiYjR06FAdPnw4a4tFhmKoJJBNxcfHm4dM3K9GjRpq3ry5PvroI5UvX17u7u7m5+7evauqVavK29tbXl5eT7JcABkgcfKh4cOHq3Tp0vL19VVUVJQmTpyo6tWrKzY2Vu+8845u374tGxsb2draKi4uTq6urlqzZo0KFSqUxUcAIDUSEhKSDHesWbOmcubMqZiYGC1cuFD58uVTp06dZGdnZw5vixYt0ttvv60CBQpkUeXIDCaDMRRAtnN/aFu1apXu3r2rQoUKqXXr1sqZM6dOnDihMWPG6OrVq5o+fbpeeOEFRUVF6csvv1RsbKzGjRsnJyenLD4KACl1/2d+7dq1+vTTTzVr1ixVqlRJdnZ2WrVqlcaNG6c6deqod+/eKl26tCIjIxUeHi57e3vlyZNHxYsXz+KjAJAa93/uT548qfDwcBUoUMA8c+yhQ4c0d+5cnT59Wm+99ZY6deokSYqNjZWdnZ3i4uLMX/bg6UBwA7KZ+ycUGTRokH799Vc5OTnpxo0batKkiYYOHaoyZcqYO/Sff/5ZBQsWVI4cORQSEqJvvvlGnp6eWXwUANJi9erVioqKUlhYmN5++22L51auXKmPPvpI3bt31zvvvKM8efJkTZEA0u3+M21Dhw7VsWPHdPHiRZUqVUolS5bUrFmzZGdnpyNHjmj27Nk6deqUBg4cqI4dO2Zx5chMBDcgG7m/Iz979qyGDx8uPz8/FSxYUOfPn9fAgQNVrlw5jR07Vp6enjIMQwEBATp37pzs7e3VokUL7vEEZFO7d+9W//79JUnvvvuuBgwYYP5mPdGKFSs0efJktW/fXkOGDNFzzz2XVeUCyAAffvih9uzZo1GjRqlAgQK6ceOGPvroIz333HNavny5XF1ddfToUc2bN0/79u3TRx99ZJ5lEk8fzp8C2UhiaPvss890584dlShRQp6ensqVK5eKFCmir7/+Wr1799aECRM0atQolS9fXm3atMniqgFkhEqVKmno0KFaunSp9uzZowEDBiQZDtWtWzdFRUVp3rx5GjJkSBZXDCA9rly5ooMHD+qtt95So0aNZG9vrzNnzig6OloeHh7mGWQrV66sN954Qzlz5lTlypWzuGpkJmaVBLKZ06dPa/fu3dq1a5dy5sypXLlyyTAMxcXFqVKlSlq0aJFOnjypadOm6ciRI1ldLoA0SG4K78QJCN544w399ddfGjRokKR7E5bExcWZ2/n6+mrr1q2cbQOyicjISPn5+Sk0NNRieVRUlK5cuaLnnntO9vb2Onv2rLp166aGDRtqwoQJypUrlzZu3Cjp3oQlkyZNUqlSpbLgCPCkENyAbMbDw0NDhw5V6dKltX79em3fvl0mk8n8z1ulSpW0ePFi/frrr5o9e7ZiYmKyumQAqRAfH28+u37u3DkdOHBAwcHBioyMVN68efXqq69q4MCB+vXXXzV48GBJScObq6trVpQOIA3++usvrV69WoMHD1Z4eLh5uYODg0wmk+7evauIiAh17dpVdevW1fjx4+Xg4KDAwED99NNPOnbsmCQluYcjnj5c4wZYsYdN+S9J+/bt01dffaWbN29q7NixatiwoSSZh02dOHFCOXPmtLgdAADrdv9nfvTo0Tp48KAuX76sUqVKqWHDhurdu7fy58+v4OBgrVmzRnPmzFGjRo00ffr0LK4cQFpFR0frt99+05gxY1S6dGl99dVXyp07tyRp/Pjx+vHHHxUbG6s2bdrIz89PDg4OCg4O1pQpU3Tr1i199tlnyps3bxYfBZ4EzrgBVur+f+B27Nih7777TgEBAbp+/bokycvLS/369VPhwoU1ceJE7d69W9K9b97j4+NVrlw5QhuQzSR+5keMGKHff/9dgwcP1p9//ilHR0etWbNG06ZN0+3bt5UvXz69+uqrevvtt7Vx40aNGjUqiysHkBZxcXHKmTOnGjZsqE8++USnTp3S6NGjzcMmW7durcqVK8ve3l4vvviiHBwcdPjwYX3yySfavXu3xowZQ2h7hjA5CWCFEhISzP/Avf/++/rjjz/k5OSkixcvqk6dOvLx8VHTpk3NZ9kWLFigqVOnKjY2Vk2bNn3oWToA1m/Dhg36559/NHHiRNWuXVvLli3T8ePHVb9+fe3evVs2NjYaOnSo8uXLp/bt2ytHjhyqV69eVpcNIJUSEhLMEwvNnDlT165dk6Ojo7Zt26bo6Gh9/vnnqlGjhvr27as1a9Zo7Nix+vLLL5UjRw7lzJlTS5YsUdmyZbP4KPAkMVQSsGIffPCBfv31V02ePFm1atXShAkTtGLFClWpUkV9+vRR06ZNJUl79uzRZ599JhsbGy1fvtw8Lh5A9rNx40adO3dO77zzjlavXq2JEydq6tSpatmypd555x1t375dnTp10sCBA1WoUCGL24QAyH6GDh2qgwcPqnfv3ipWrJj27t2rDRs26IUXXtCcOXPk5OSk8PBwnT17VmfPnpWbm5tKlSrFBETPIIIbYAViYmIUERFhccPc/fv368svv9SAAQPk5eWlOXPmaNasWRowYICWLVumggULatCgQebwtm/fPpUqVUrFihXLoqMAkFqGYST5kiU+Pl63b9+Wk5OTXn/9dXl7e6tv375ydHTUsWPH1KdPH+XIkUPNmjXTBx98IBsbG76oAbKpkydPqm/fvho8eLA6duwok8mk8PBw/frrr/Lz81OFChU0Y8YM8zVveLbxFR2QxRISEtS7d28NGDBAd+7cMS8vXLiwKlasqJo1a2rdunVasGCBxo8fr7fffltTp07VmTNntGLFCv3000+S7l3zRmgDso/4+Hhz4IqJiTHfAsDW1laFChXSjRs3dO3aNZUuXVqOjo6SpPPnz8vDw0MdO3ZU7969ZWtrS2gDsjF7e3uFh4ebv4AxDEPOzs6qV6+e3njjDe3bt09+fn4KCQnJ6lJhBQhugBV4/fXXde7cOY0dO9Yc3kqXLq2BAwfK3t5emzZtUqNGjeTt7S1JeuGFF5QvXz4dOHBA69ats5g+GID1MwzDfC3qhAkT1L9/f3Xt2lW7d+82T0pQqFAhOTo6as+ePfrvv/90+fJl/fHHHypbtqwGDx4sNze3rDwEABnA3t5ezs7OOnHihHlZQkKCHB0d1aZNG+XPn1+bNm3SiBEjxCA5ENyALGZjY6OWLVtq0qRJOnjwoEaPHq3bt29LkpycnBQaGqrTp0/L2dlZLi4ukqR///1XtWrV0rx58/Thhx/K2dk5Kw8BQColniXz8/PTtm3bVLhwYZlMJr3zzjtasWKFbty4IWdnZw0bNkw7d+5U48aN1atXL23ZskU+Pj5MQARkM/Hx8ckuL168uHr27Knly5drw4YNMplM5mtWb968qRdeeEGzZ8/W6NGjObsOZpUEslLiPddsbGxUrlw5TZ06VSNGjNDYsWM1ceJE5c+fXy4uLvL29ta3336rJk2aKE+ePPruu+8UFBSkatWqKVeuXFl9GABSKHEikcRr26KjozVx4kTVqVNHOXLk0IQJE/TFF18oJiZGb7zxhl5++WWVLl1a69atU968edWyZUuVLl06qw8DQCrcf3uf5cuX6+rVqzIMQ3Xq1FHt2rXl6+urkydPasSIEbp06ZLq168vW1tbrVmzRjExMapRo4b5i1s825icBLACb731lp5//nn16NFDR48e1ciRI1W9enVNmDBBzz33nP7++2/NnDlTP//8s/LmzSuTyaRFixbphRdeyOrSAaTQ/f+8XbhwQbGxsRoxYoTGjx+v8uXLm9tNnjxZS5Ys0YABA9StWzdmjgOeEgMHDtTBgwfl7u6uK1euyMnJSZ6enho/frxiY2O1ZMkSzZs3T/b29rK3t5ckff311/ythxln3IAscP8/cHv37tXJkyf15ptvKn/+/GrcuLGmTJmikSNHasyYMZoyZYrKly+vTz75RIcPH1ZMTIwqVKigIkWKZPFRAEiN+2+uvXfvXhUoUEB37twxX9MWExMje3t78820582bp6ioKPn6+hLegGxu0aJF+uuvv/TVV1+pXLlysre3N39JU7NmTfn4+GjgwIFq1KiRLl26pPj4eNWoUUNFixbN6tJhRTjjBmShBQsW6NatW4qJidHo0aNlZ2cn6V6w2717t0aOHKmqVatqypQpypcvXxZXCyAt7v+iZsGCBfrmm2/Us2dPXblyRdu2bZOjo6OWLl2q5557zhzepHv3cdy8ebO2bNnC5x/I5kaPHq3g4GBNmzZNzs7OunHjhtq2baumTZvqgw8+kKOjo2JjY83/BwDJYXISIIvs379fS5Ys0ffffy9nZ2fZ2dkpNjZW0r1v5hs1aqQpU6bo+PHjGjhwoMWtAgBkH4mh7eeff9adO3fUv39/9erVS2PGjNFHH32kuLg49erVS7dv35a9vb25Hxg/frw2bdpEaAOymQcnIomLi9PZs2dlZ2cnZ2dnXbhwQS+//LK8vLzMoe3777/X9u3bs6hiZBcENyCL1K1bV/369VPevHm1du1aXb16VXZ2duYO38bGRo0aNdKHH36o69evKyYmJosrBpBWS5cu1YgRI7Rx40aVLFnSvNzLy0t+fn6KiYlRr169dOfOHYsvcfLnz59VJQNIo8Qva3bt2qW7d+8qR44catKkiU6dOqW1a9eqS5cueumllzR+/Hg5Ojrq7Nmz2rZtm+7evWu+nyOQHIIb8AQ8bBrgHj166M0335S9vb2GDRuma9euydbW1iK8NWvWTOvWreOaNiAba9y4sWrUqKGbN29q48aN5uU5cuRQnTp15Ofnp/j4eHXo0EHBwcHm4VJM/w1kTxs3btSAAQN05coVSVKVKlVkMpk0ZswYlStXTjNmzFDu3Ln177//atGiRebZJBNvBQAkh2vcgEx2//Ut69at06VLl1S4cGEVL15ctWvXlnRveuBvvvlG+fLl07Rp01S4cGHzrQIAZC/3f+bvd/36dY0fP15///23unbtqn79+pmfi4uL0969e+Xv768vvvhCJUqUeJIlA0in5D733bt3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FCS1pCwdooZbA0dFDtgywnBIM7Q1zAocoTnGRiklrReIMAGZsdwq15lmmavEgc1QhEBTDpzz/OE8j2hhzwbnHJ/z/fx33+O697v+4I/fua/7ujw8PGS1WmUwGGQwGHT06FEVFxeru7tbOTk5uvXWW1VaWiqbzSYvLy+FhoaqoKCAsxkBN2A2m7Vr1y7t3btXtbW1/ECLCccbN2AMw8PD8vK69G9isVhkMplUXV0to9GoF198UZK0evVqGQwGVVRUaHh4WPPnz1dTU5M++OADHThw4JollABc07vvvquTJ08qMzPTfmDulWc12mw2hYeHq6ioSJmZmfrmm2+0ZcsWzZs3T6dPn7b/In/5uxcA/58sFouys7M1MDAgm81GaYPDUNyAMVwubW1tbZo/f76ys7N18803680335TVatVLL70kSXr++efl7e2tN954Q5999pkkaffu3ZQ24AaSnp6uzs5Ovf766zIajXr88cftW31ffuNmtVoVFRWlpUuXqqamRidOnFBoaChbfgNuxNvbW/n5+TKbzUpJSWFZNByG4gZcR2Njo1544QXV19crMjJSTz75pGw2m9566y1Jspe37OxsRUdH688//1RERISmTZvmzNgA/kfBwcEqLCzUyMiIioqKZLPZtGjRIhkMBnt5uywsLEweHh6yWCxOTAzAWe666y5FRUWxaywciuIGXGVkZESenp7264ULF2rnzp0qKSnRhx9+qKCgIKWlpUnSNeUtOjra8YEBjJvAwEAVFRVJktatWydJ9vJ25bLJX375RTNnztT06dOdlhWAc1Ha4GgcNAFcwWq12kvb6dOn7ffz8/PV19eniooKSdLUqVO1dOlS5eXlqba2ViUlJc6IC2ACXC5vycnJWrdunT755BNJsi+b7Ozs1M8//6y4uDj7cmoAACYaxQ24wuVf03Nzc5WQkKCmpiadOnVK99xzj+Lj49Xe3q6ffvpJknTLLbcoPT1dmZmZampq0pkzZ5wZHcA4urq8ffrpp5Kkc+fOadu2bers7NTKlSspbgAAh+E4AOBvPPvss9q3b5/CwsIUHR2txMRExcXF6ZFHHlFSUpLWr19v/9u+vj7ZbDZNmTLFiYkBTISenh6VlpaqpaVFxcXF+u233/Tee++prq5OERERzo4HAHAjFDe4vau/aZMufb9SVlZmP5dpz549Sk5O1rRp07Rp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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Qual os top 3 com maior e menor taxa de aumento de Ã­ndices de obesidade nesse perÃ­odo de 2016 ?"
      ],
      "metadata": {
        "id": "OBfcAiv-1HfL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Filtrando os dados para o ano de 2016\n",
        "df_2016 = df[df['Year'] == 2016]\n",
        "\n",
        "# Calculando a diferenÃ§a de obesidade para o ano de 2016\n",
        "df_diferenca_obesity_2016 = df_2016.groupby('Country')['Obesity'].apply(lambda x: x.iloc[-1] - x.iloc[0]).reset_index()\n",
        "df_diferenca_obesity_2016.columns = ['Country', 'DiferenÃ§a_Obesidade_2016']\n",
        "\n",
        "# Ordenando os paÃ­ses pela diferenÃ§a de obesidade e pegando o top 3 com maior aumento\n",
        "df_diferenca_obesity_2016_sorted = df_diferenca_obesity_2016.sort_values(by='DiferenÃ§a_Obesidade_2016', ascending=False)\n",
        "top_3_maior_aumento_2016 = df_diferenca_obesity_2016_sorted.head(3)\n",
        "\n",
        "print('Top 3 paÃ­ses com maior aumento de obesidade para o ano de 2016:')\n",
        "print(top_3_maior_aumento_2016)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ltfYZ6LnZdOp",
        "outputId": "97f5c8ba-81b0-4e17-a15b-6cbbb76653ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Top 3 paÃ­ses com maior aumento de obesidade para o ano de 2016:\n",
            "          Country  DiferenÃ§a_Obesidade_2016\n",
            "161  South Africa                      11.3\n",
            "22       Botswana                      10.4\n",
            "96        Lesotho                      10.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Filtrando os dados para o ano de 2016\n",
        "df_2016 = df[df['Year'] == 2016]\n",
        "\n",
        "# Calculando a diferenÃ§a de obesidade para o ano de 2016\n",
        "df_diferenca_obesity_2016 = df_2016.groupby('Country')['Obesity'].apply(lambda x: x.iloc[-1] - x.iloc[0]).reset_index()\n",
        "df_diferenca_obesity_2016.columns = ['Country', 'DiferenÃ§a_Obesidade_2016']\n",
        "\n",
        "# Removendo os paÃ­ses onde o aumento foi de 0\n",
        "df_diferenca_obesity_2016 = df_diferenca_obesity_2016[df_diferenca_obesity_2016['DiferenÃ§a_Obesidade_2016'] != 0]\n",
        "\n",
        "# Ordenando os paÃ­ses pela diferenÃ§a de obesidade e pegando o top 3 com menor aumento\n",
        "df_diferenca_obesity_2016_sorted = df_diferenca_obesity_2016.sort_values(by='DiferenÃ§a_Obesidade_2016', ascending=True)\n",
        "top_3_menor_aumento_2016 = df_diferenca_obesity_2016_sorted.head(3)\n",
        "\n",
        "print('Top 3 paÃ­ses com menor aumento de obesidade para o ano de 2016 (desconsiderando aumento de 0):')\n",
        "print(top_3_menor_aumento_2016)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v-zxDOVYaS8I",
        "outputId": "6a981f3c-aa5b-4b99-941c-faf2fb5a1900"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Top 3 paÃ­ses com menor aumento de obesidade para o ano de 2016 (desconsiderando aumento de 0):\n",
            "         Country  DiferenÃ§a_Obesidade_2016\n",
            "48       Denmark                      -2.7\n",
            "169  Switzerland                      -2.6\n",
            "77       Iceland                      -2.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.set(style=\"darkgrid\")\n",
        "\n",
        "#grÃ¡fico para os paÃ­ses com as maiores mÃ©dias de obesidade em 2010\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Country', y='DiferenÃ§a_Obesidade_2016', data=top_3_maior_aumento_2016)\n",
        "plt.title('PaÃ­ses com as Maiores taxas de aumento de Obesidade em 2016')\n",
        "plt.xlabel('PaÃ­s')\n",
        "plt.ylabel('Obesidade (%)')\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 634
        },
        "id": "P3roPTk813kI",
        "outputId": "9e70e3b2-a3f4-40f5-fc3e-858a2a921b79"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "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Z86ceeToltK9feLIkSM6duyYZVpwcLDWr19vtdxrr70mV1dXzZw5M9nmWI9ritmmTRvlyJFD33zzTZK+NtHR0Ro0aJDMZrM++uijJM9dvny51WsuXbpUcXFxljCV0toiIyMVHR1tNc/Ly0suLi6P/C5Xr15d169ft7r9QmRkpFasWGG1XHLfRbPZrAULFlgtlytXLpUsWVJr1qyx2s/37NmTpN9mgwYNFB8fr2nTpiWpKy4u7pFXV57kb9mzcubMGXXv3l358uXTzJkzHxoIq1atKnd3dy1dutRq+tKlS5UlS5bHfo+TU6RIEZUoUULbt2+32tZff/1VV65csWnAhO1xZQoZXo0aNTRv3jx169ZNjRs31q1bt7RkyRJ5eXk9tp9Bo0aNVLlyZZUuXVru7u76888/LUNYJxoyZIjat2+vJk2aWO5RcfPmTR05ckRXr17VunXrUryu5HTt2lVbtmxR79691bJlS5UuXVqhoaHasWOHhg0bphIlSqhNmzZavny5Bg4cqBMnTihfvnzasmWLDh06pM8++yxF99kwytXVVZUqVdKcOXMUGxur3Llza8+ePUnO9t+5c0c1atRQ/fr1VaJECTk7O+u3337Tn3/+mez9fB7nzTfffOwyT/PZd+/eXRs3btS7776rjh07Klu2bPrhhx8UFBSkKVOmPLYpi52dnUaMGKF3331XjRs3VosWLZQ7d25du3ZN+/btk6urq2bMmPFU70vi2dT//e9/atiwoRwdHVWrVi35+/vL0dFR77//vtq2bas7d+7o+++/V44cOXTjxg3L86OjozVgwAAVLFhQffv2lXRvOOidO3dq0KBBWr9+vZydnVO8vjVr1mjp0qWqW7euvLy8dOfOHa1YsUKurq6WH7PJ8fDwUJcuXTRz5ky99957qlGjhv766y/9/PPPVkMiS/f2hx07duj999/Xm2++qdKlSysyMlL//POPtmzZou3btz+0OVP58uWVLVs2DRw4UB07dpTJZNLatWuTbcbaqlUrbdmyRd26dVODBg104cIFrV+/PklTp6fl5eWlPn36aPz48bp06ZLq1q0rFxcXBQUFadu2bWrdurW6du36xOt0c3PTsmXL5OLiImdnZ5UtW1YFChRQ//79NWjQIAUEBKhRo0aWodHz5cunzp07P3K93bp109q1a9WtWzd16tTJMjR63rx5rfYn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brYuG+kYYQovnFWrVmnixIm6fv26unXrpuPHj+uff/7RhAkTFBcXp19//VVfffWVwsLC9P777ye7jmzZsj3nqgE8raJFi6pixYpasmSJWrVqJUlasGCBChQoIElq06aNmjZtKnt7ezk5OUmSgoODdeTIEXl6elqa/gBIHx5sri9JWbJkUXh4uMxms27duqV27dqpWrVqGj58uLJkyaJNmzbp4MGD+uijj2jWh1TBXw68cAICAnTz5k0tX75cTk5OSkhIUO3atVWtWjXZ29urXLlyypYtmyZOnChJDw1UANKPxB9Vb7/9ttauXauLFy+qQoUKSkhIkHSvCa/JZFKWLFksz9mxY4e2bdumn376SYsWLeLsNJAO3L17V/v371eNGjVkMpmSBCovLy/L1edDhw6pRo0aGjZsmFxcXHTr1i1t3bpVDg4ODC6DVGP3+EWA9CMqKkrSvWZ9bdq00Q8//KAtW7YoT548lj4QHh4e6tSpkz788ENNnDhRs2bNsmXJAFKByWRSXFycwsPDVaZMGXXq1EnXr1/XuHHjdPr0adnZ2en+2yru3LlT06dP199//61FixapePHiNqweQEpNnTpV7733ntavXy9JlkCVyMvLSw0aNNDvv/+uHDlyqEuXLnJ1ddW5c+c0YcIE7d+/Xx988AHDoCPVcNNepHsJCQm6fPmy8ubNa+nzdPr0aRUrVkyBgYEKDAxUmTJlNG7cOEsfKkkKCQnRokWLFBgYqAEDBuidd96x0RYAMOpho3VK0ty5c7VixQoVLlxY/fv3V7FixWQ2m2U2m3XixAnZ2dnJ09NTuXLles5VAzDq2rVrGjt2rH766ScNHz5czZo1kyTLvp34O2DatGlat26dYmJilCtXLkVFRSksLExTp05VyZIlbbkJeMEQppDu7dq1S+vXr1edOnXUsGFDde3aVU5OTpo0aZKcnJwUGBioBQsWqGHDhurWrZvy589veW5wcLBWrlypOnXqMJIPkM7cH6S2bt2qy5cvy8XFRYUKFVKlSpUkSXPmzNH333+vokWLqm/fvipWrJhGjRql+Ph4DRgwgKY+QDp048YNjRw5Utu3b9eIESOsAtX995r6/fffde7cOZ06dUrlypVTxYoVrX4DAKmBMIV07+LFi+revbsyZcokBwcHXb9+XTNnzlSxYsUsw6L/73//0/Lly/XGG28kCVSJ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1a5dO61du5YgBQCwKfpMwWbu3LmjXr166fTp06pRo4a+/PJLOTo6SpIyZ86sXLly6eDBg7p7966cnZ0tV558fHyUOXNm3bhxQxIhCshocufOrc8//1wODvwJAwDYFr9CYRN37txRmzZtFBsbq6+++koDBgywBCmz2axMmTKpb9++OnnypMaOHWvVhO/KlSvKli2bXnrpJcvyADIWghQAIC3grxGeu/j4eH3++efKnj27RowYkeR+UInDGvv6+qp3796aMGGCrl69qqZNm8rR0VFbt27V5cuX9frrr1stDwAAADxPhCk8d6GhoTp37pzatGkjLy8vxcXFWc4yX7hwQSdOnJCHh4cKFSqkLl26KE+ePPr666/1xx9/KEuWLMqZM6fmz5+vggUL2nhLAAAAkJERpvDchYeH6/Lly4qJiZF0r7lOZGSkRowYoZ9//tnSF8rb21sjRoxQgwYN5O/vr3Pnzilz5szKmTOnPDw8bLkJAAAAAEOj4/kLCQlR586dlSlTJjVv3lxOTk6aM2eOzp07p8qVK6tjx446duyYFi9erBIlSmjSpEnKmTOnrcsGAAAArBCmYBN///233n//fd26dUuxsbEqW7asWrVqpYYNG8rFxUWS9M0332jBggX64YcfVLRoURtXDAAAAFijmR9sokSJElq6dKnOnTunu3fvqkaNGrK3t5fJZFJsbKwcHR2VLVs25cyZU66urrYuFwAAAEiCMAWbyZMnj/LkyWN5HB8fL3t7ezk6Oio4OFjHjh1T8eLFlTVrVhtWCQAAACSPMIU0wWw2y97eXpL033//ae7cuTp48KAWLVokZ2dnG1cHAAAAJEWYQppgMpkUGhqq8ePH69q1a/rvv/80b948+koBAAAgzbKzdQFAorCwMB0/flxeXl6aO3euSpQoYeuSAAAAgIdiND+kKXfv3pW9vb0yZcpk61IAAACARyJMAQAAAIABNPMDAAAAAAMIUwAAAABgAGEKAAAAAAwgTAEAAACAAYQpAAAAADCAMAUAwGMEBwdrypQpOnr0qK1LAQCkIYQpAAAeY+TIkdq6dauKFy9u61IAAGmIg60LAAAgta1evVqDBg2yPHZyclLevHnl7++vDz/8UDlz5kzxunbu3KkdO3Zo1apVypw587MoFwCQThGmAAAvrF69eil//vyKiYnRwYMHtXTpUu3evVsbNmxQlixZHvv8iIgIDR06VMOHD1eRIkWeQ8UAgPSEMAUAeGFVr15dPj4+kqRWrVrJ3d1d8+bN0/bt29W4cePHPt/V1VW7d+9+1mUCANIp+kwBADKMqlWrSpKCgoI0d+5ctW3bVlWqVFHZsmXVokULbd68OclzateurYEDB1oex8bGKjAwUPXq1ZOPj4+qVKmidu3aac+ePc9tOwAAaQNXpgAAGcaFCxckSe7u7po+fbpq166tJk2aKDY2Vhs3blTv3r01c+ZM1axZ86HrCAwM1MyZM9WqVSuVLVtWEREROn78uE6cOCF/f//ntCUAgLSAMAUAeGFFREQoODhYMTExOnTokKZOnarMmTOrVq1aat68udWAEh06dFCLFi00b968R4apXbt2qUaNGho+fPhz2AIAQFpGmAIAvLA6d+5s9ThfvnwaN26ccufObTU9NDRU8fHxqlChgjZu3PjIdbq5uenff//VuXPnVKhQoVSuGACQnhCmAAAvrMGDB6tw4cKyt7dXzpw5VbhwYdnZ3esuvHPnTk2fPl0nT55UTEyM5Tkmk+mR6+zVq5c+/PBD1a9fX97e3nr11VfVrFkzlShR4pluCwAg7SFMAQBeWGXLlrWM5ne/AwcO6IMPPlClSpU0ZMgQeXp6ytHRUatWrdKGDRseuc5KlSrpp59+0vbt27Vnzx6tXLlS8+fP17Bhw9SqVatntSkAgDSIMAUAyHC2bNmiTJkyae7cuXJycrJMX7VqVYqe7+7urpYtW6ply5a6c+eOAgICNGXKFMIUAGQwDI0OAMhw7O3tZTKZFB8fb5kWFBSk7du3P/a5t2/ftnrs4uIiLy8vq6aCAICMgStTAIAMp0aNGpo3b566deumxo0b69atW1qyZIm8vLx06tSpRz63UaNGqly5skqXLi13d3f9+eef2rJliwICAp5T9QCAtIIwBQDIcPz8/DRy5EjNnj1bo0aNUv78+dW/f39dunTpsWGqY8eO2rFjh/bs2aOYmBjlzZtXffr0UdeuXZ9T9QCAtMJkNpvNti4CAAAAANIb+kwBAAAAgAGEKQAAAAAwgDAFAAAAAAYQpgAAAADAAMIUAAAAABhAmAIAAAAAAwhTAAAAAGAAYQoAAAAADCBMAQAAAIABhCkAAAAAMIAwBQAAAAAGEKYAAAAAwADCFAAAAAAY8P8A7sRPhh32kBcAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#grÃ¡fico para os paÃ­ses com as menores mÃ©dias de obesidade em 2010\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Country', y='DiferenÃ§a_Obesidade_2016', data=top_3_menor_aumento_2016)\n",
        "plt.title('PaÃ­ses com as Menores MÃ©dias de Obesidade em 2016')\n",
        "plt.xlabel('PaÃ­s')\n",
        "plt.ylabel('Obesidade (%)')\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 631
        },
        "id": "U_3uMnIh7ZXY",
        "outputId": "ab5fb605-7ff8-4ff2-be51-ba1f1a25e223"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##E os top 3 com maior e menor taxa de aumento de Ã­ndices de obesidade no perÃ­odo completo, atÃ© o Ãºltimo registro ?"
      ],
      "metadata": {
        "id": "bKlgZJZZ7vIg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Maior taxa\n"
      ],
      "metadata": {
        "id": "n8lbE3eSOk4O"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_diferenca_obesity = df_copia.groupby('Country')['Obesity'].apply(lambda x: x.iloc[-1] - x.iloc[0]).reset_index()\n",
        "df_diferenca_obesity.columns = ['Country', 'DiferenÃ§a_Obesidade']\n",
        "\n",
        "df_diferenca_obesity_sorted = df_diferenca_obesity.sort_values(by='DiferenÃ§a_Obesidade', ascending=False)\n",
        "\n",
        "paises_maior_aumento = df_diferenca_obesity_sorted.head(3)['Country'].tolist()\n",
        "paises_menor_aumento = df_diferenca_obesity_sorted.tail(3)['Country'].tolist()\n",
        "\n",
        "df_maior_aumento = df_copia[df_copia['Country'].isin(paises_maior_aumento)]\n",
        "df_menor_aumento = df_copia[df_copia['Country'].isin(paises_menor_aumento)]\n",
        "\n",
        "print('Top 3 paÃ­ses com maior aumento de obesidade: ')\n",
        "print(df_maior_aumento.groupby('Country')['Obesity'].agg(['first', 'last', 'max']))\n",
        "\n",
        "print(\"\\nTop 3 paÃ­ses com menor aumento de obesidade: \")\n",
        "print(df_menor_aumento.groupby('Country')['Obesity'].agg(['first', 'last', 'max']))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9-NyJLmY7uNb",
        "outputId": "b215f9ad-cd3c-418d-875a-0760e582b49c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Top 3 paÃ­ses com maior aumento de obesidade: \n",
            "         first  last   max\n",
            "Country                   \n",
            "Niue      18.9  55.1  55.1\n",
            "Samoa     20.2  55.0  55.0\n",
            "Tuvalu    17.9  56.2  56.2\n",
            "\n",
            "Top 3 paÃ­ses com menor aumento de obesidade: \n",
            "                first       last        max\n",
            "Country                                    \n",
            "Monaco      12.448932  12.448932  12.448932\n",
            "San Marino  12.448932  12.448932  12.448932\n",
            "Sudan       12.448932  12.448932  12.448932\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_obesidade_dif = df_copia.groupby('Country')['Obesity'].apply(lambda x: x.iloc[-1] - x.iloc[0]).reset_index()\n",
        "df_obesidade_dif.columns = ['Country', 'Crescimento da Obesidade']\n",
        "\n",
        "maior_aumento_top_3 = df_obesidade_dif.sort_values(by='Crescimento da Obesidade', ascending=False).head(3)\n",
        "\n",
        "print('Top 3 paÃ­ses com o maior aumento de obesidade durante todo o perÃ­odo:')\n",
        "print(maior_aumento_top_3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_V29wLiJB3QV",
        "outputId": "188e290d-7766-438e-ef37-3b4f2b8d8f47"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Top 3 paÃ­ses com o maior aumento de obesidade durante todo o perÃ­odo:\n",
            "    Country  Crescimento da Obesidade\n",
            "180  Tuvalu                      38.3\n",
            "126    Niue                      36.2\n",
            "148   Samoa                      34.8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dados_paises_maior_aumento = df_copia[df_copia['Country'].isin(maior_aumento_top_3['Country'])]\n",
        "plt.figure(figsize=(12, 8))\n",
        "sns.lineplot(data=dados_paises_maior_aumento, x='Year', y='Obesity', hue='Country')\n",
        "plt.xlabel('Ano')\n",
        "plt.ylabel('Taxa de Obesidade')\n",
        "plt.title('Taxa de aumento de Obesidade ao longo dos Anos')\n",
        "plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))  # Posiciona a legenda fora do grÃ¡fico\n",
        "plt.tight_layout()  # Ajusta o layout para evitar cortes\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 750
        },
        "id": "uTUBslNnNobM",
        "outputId": "ff3c19d0-e943-46a6-9433-3af637505261"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Menor taxa\n"
      ],
      "metadata": {
        "id": "QbM9NLhPOi5r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "media_obesidade = df_copia['Obesity'].mean()\n",
        "\n",
        "df_sem_media_fixa = df_copia[df_copia['Obesity'] != media_obesidade]"
      ],
      "metadata": {
        "id": "Pchlf3VlCdKo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_obesidade_dif_2 = df_sem_media_fixa.groupby('Country')['Obesity'].apply(lambda x: x.iloc[-1] - x.iloc[0]).reset_index()\n",
        "df_obesidade_dif_2.columns = ['Country', 'Crescimento de obesidade']\n",
        "\n",
        "df_sem_aumento_zero = df_obesidade_dif_2[df_obesidade_dif_2['Crescimento de obesidade'] != 0]"
      ],
      "metadata": {
        "id": "guEqUSZzHmSo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "menor_aumento_top_3 = df_sem_aumento_zero.sort_values(by='Crescimento de obesidade', ascending=False).tail(3)\n",
        "\n",
        "print('Top 3 paÃ­ses com o menor aumento de obesidade durante todo o perÃ­odo: ')\n",
        "print(menor_aumento_top_3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eeEgerqIFYrM",
        "outputId": "0134aef4-6b31-4a3b-9be8-204d94915e08"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Top 3 paÃ­ses com o menor aumento de obesidade durante todo o perÃ­odo: \n",
            "       Country  Crescimento de obesidade\n",
            "156  Singapore                       3.3\n",
            "86       Japan                       2.7\n",
            "191   Viet Nam                       2.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dados_paises_menor_aumento = df_copia[df_copia['Country'].isin(menor_aumento_top_3['Country'])]\n",
        "plt.figure(figsize=(12, 8))\n",
        "sns.lineplot(data=dados_paises_menor_aumento, x='Year', y='Obesity', hue='Country')\n",
        "plt.xlabel('Ano')\n",
        "plt.ylabel('Taxa de Obesidade')\n",
        "plt.title('Taxa de Obesidade ao longo dos Anos para os PaÃ­ses com menor Aumento')\n",
        "plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))  # Posiciona a legenda fora do grÃ¡fico\n",
        "plt.tight_layout()  # Ajusta o layout para evitar cortes\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 750
        },
        "id": "pnZ9uYwUXovl",
        "outputId": "5f6bf777-87a6-4450-c6c1-fd2417b4c62e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Os dados entre homens mulheres sÃ£o parecidos?  Informe com nÃºmeros."
      ],
      "metadata": {
        "id": "Dr8iKpDaivbU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def criar_grafico(pais):\n",
        "    # Filtrando os dados para o paÃ­s selecionado\n",
        "    df_pais = df_copia[df_copia['Country'] == pais]\n",
        "\n",
        "    # Configurando o estilo do seaborn\n",
        "    sns.set(style=\"whitegrid\")\n",
        "\n",
        "    # Criando o grÃ¡fico\n",
        "    plt.figure(figsize=(10,6))\n",
        "    sns.lineplot(x='Year', y='Obesity', hue='Sex', data=df_pais)\n",
        "\n",
        "    # Adicionando tÃ­tulo e rÃ³tulos aos eixos\n",
        "    plt.title(f'ComparaÃ§Ã£o da Obesidade entre Homens, Mulheres e Ambos em {pais}')\n",
        "    plt.xlabel('Ano')\n",
        "    plt.ylabel('Obesidade (%)')\n",
        "\n",
        "    # Mostrando o grÃ¡fico\n",
        "    plt.show()\n",
        "\n",
        "# Criando o widget interativo\n",
        "paises = df_copia['Country'].unique()\n",
        "interact(criar_grafico, pais=paises)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "referenced_widgets": [
            "33dd73dd59914d8eacff790b9fd12e9c",
            "ae9e26f122164073beee5e8b184fba82",
            "27f9c468cdbe4e55913441db7f9b7f1d",
            "fa443dc0cbcf4c01825d73271aa27d59",
            "6332bf3aa7864a40897cd528c58503ef",
            "41e7eab1d20047b09782c624b0b73ca6",
            "5555e18a5d2e4db99b7e3e71dbcab3be"
          ],
          "height": 691
        },
        "id": "ZYTeAeklWpuC",
        "outputId": "5dcdcbc7-d7e6-4d3d-de9f-d783fb836ef1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "interactive(children=(Dropdown(description='pais', options=('Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Aâ¦"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "33dd73dd59914d8eacff790b9fd12e9c"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function __main__.criar_grafico(pais)>"
            ],
            "text/html": [
              "<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n",
              "      pre.function-repr-contents {\n",
              "        overflow-x: auto;\n",
              "        padding: 8px 12px;\n",
              "        max-height: 500px;\n",
              "      }\n",
              "\n",
              "      pre.function-repr-contents.function-repr-contents-collapsed {\n",
              "        cursor: pointer;\n",
              "        max-height: 100px;\n",
              "      }\n",
              "    </style>\n",
              "    <pre style=\"white-space: initial; background:\n",
              "         var(--colab-secondary-surface-color); padding: 8px 12px;\n",
              "         border-bottom: 1px solid var(--colab-border-color);\"><b>criar_grafico</b><br/>def criar_grafico(pais)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/content/&lt;ipython-input-151-2b5c29b0dd9c&gt;</a>&lt;no docstring&gt;</pre></div>"
            ]
          },
          "metadata": {},
          "execution_count": 151
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##  Qual o percentual mÃ©dio de obesidade por sexo na amÃ©rica do norte no ano de 2010?"
      ],
      "metadata": {
        "id": "HF60prlHl_Tm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_2010 = df_copia[(df_copia['Year'] == 2010) & (df_copia['Country'].isin(['Canada', 'United States of America', 'Mexico']))]\n",
        "\n",
        "media_obesidade = df_2010.groupby('Sex')['Obesity'].mean()\n",
        "\n",
        "print(media_obesidade)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NQ2fBRovohNj",
        "outputId": "df8c3e1a-3d77-4587-a841-824f7e15f6bc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sex\n",
            "Both sexes    28.033333\n",
            "Female        29.766667\n",
            "Male          26.033333\n",
            "Name: Obesity, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calcular a mÃ©dia de obesidade para 'Male' e 'Female'\n",
        "media_male = df_2010[df_2010['Sex'] == 'Male']['Obesity'].mean()\n",
        "media_female = df_2010[df_2010['Sex'] == 'Female']['Obesity'].mean()\n",
        "\n",
        "# Calcular a mÃ©dia de 'Male' e 'Female'\n",
        "media_male_female = (media_male + media_female) / 2\n",
        "\n",
        "# Calcular a mÃ©dia de obesidade para 'Both sexes'\n",
        "media_both = df_2010[df_2010['Sex'] == 'Both sexes']['Obesity'].mean()\n",
        "\n",
        "# Verificar se a mÃ©dia de 'Male' e 'Female' Ã© igual a 'Both sexes'\n",
        "print(f\"A mÃ©dia de 'Male' e 'Female' Ã© igual a 'Both sexes'? {'Sim' if abs(media_male_female - media_both) < 1e-6 else 'NÃ£o'}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w7hfpvtyrJVn",
        "outputId": "4395a778-5e99-428b-ad58-66d802af5a93"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "A mÃ©dia de 'Male' e 'Female' Ã© igual a 'Both sexes'? NÃ£o\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Criar um grÃ¡fico de barras com seaborn\n",
        "sns.catplot(x='Country', y='Obesity', hue='Sex', kind='bar', data=df_2010, height=8, aspect=1.5)\n",
        "plt.xlabel('PaÃ­s')\n",
        "plt.ylabel('Obesidade MÃ©dia (%)')\n",
        "plt.title('Percentual MÃ©dio de Obesidade por Sexo na AmÃ©rica do Norte em 2010')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 691
        },
        "id": "tI5XxRaBovrx",
        "outputId": "d72d027b-cdcc-4cb7-fcd3-65751cb9717d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1338.62x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_copia[df_copia['Country'] == 'Brazil']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "Y8tBa3wPuaIF",
        "outputId": "f5d938d6-91c9-4b2f-f1c6-214d9afb2eb9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Country  Obesity  Year         Sex\n",
              "2898  Brazil      5.2  1975  Both sexes\n",
              "2899  Brazil      3.0  1975        Male\n",
              "2900  Brazil      7.3  1975      Female\n",
              "2901  Brazil      5.5  1976  Both sexes\n",
              "2902  Brazil      3.2  1976        Male\n",
              "...      ...      ...   ...         ...\n",
              "3019  Brazil     18.0  2015        Male\n",
              "3020  Brazil     24.9  2015      Female\n",
              "3021  Brazil     22.1  2016  Both sexes\n",
              "3022  Brazil     18.5  2016        Male\n",
              "3023  Brazil     25.4  2016      Female\n",
              "\n",
              "[126 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-57759c64-3a31-4e95-ae15-b91622fc350b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Obesity</th>\n",
              "      <th>Year</th>\n",
              "      <th>Sex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2898</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>5.2</td>\n",
              "      <td>1975</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2899</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1975</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2900</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>7.3</td>\n",
              "      <td>1975</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2901</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>5.5</td>\n",
              "      <td>1976</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2902</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1976</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3019</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>18.0</td>\n",
              "      <td>2015</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3020</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>24.9</td>\n",
              "      <td>2015</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3021</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>22.1</td>\n",
              "      <td>2016</td>\n",
              "      <td>Both sexes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3022</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>18.5</td>\n",
              "      <td>2016</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3023</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>25.4</td>\n",
              "      <td>2016</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>126 rows Ã 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-57759c64-3a31-4e95-ae15-b91622fc350b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-57759c64-3a31-4e95-ae15-b91622fc350b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-57759c64-3a31-4e95-ae15-b91622fc350b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-170a3d4f-fc34-471d-b61f-cdf89b53fc16\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-170a3d4f-fc34-471d-b61f-cdf89b53fc16')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-170a3d4f-fc34-471d-b61f-cdf89b53fc16 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_copia[df_copia['Country'] == 'Brazil']\",\n  \"rows\": 126,\n  \"fields\": [\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Brazil\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Obesity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.705926520760451,\n        \"min\": 3.0,\n        \"max\": 25.4,\n        \"num_unique_values\": 96,\n        \"samples\": [\n          22.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 1975,\n        \"max\": 2016,\n        \"num_unique_values\": 42,\n        \"samples\": [\n          2000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Both sexes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 155
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_brasil = df_copia[df_copia['Country'] == 'Brazil'].groupby('Country')['Obesity'].apply(lambda x: x.iloc[-1] - x.iloc[0]).reset_index()\n",
        "df_brasil"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "Ljzlk-VtvDve",
        "outputId": "00b23692-24ad-42ce-a2fd-0fb0f17ac534"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Country  Obesity\n",
              "0  Brazil     20.2"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2319185d-5bf0-4810-af54-d6ed6cd62a37\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Obesity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Brazil</td>\n",
              "      <td>20.2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2319185d-5bf0-4810-af54-d6ed6cd62a37')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2319185d-5bf0-4810-af54-d6ed6cd62a37 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2319185d-5bf0-4810-af54-d6ed6cd62a37');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_ea509402-364e-43a0-b995-52799de1ccdc\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_brasil')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ea509402-364e-43a0-b995-52799de1ccdc button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_brasil');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_brasil",
              "summary": "{\n  \"name\": \"df_brasil\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Brazil\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Obesity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 20.2,\n        \"max\": 20.2,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          20.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 156
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "GUADLXLSvS0Z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# PIB Per Capita\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "xiGQsGb_cpC1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy import interpolate\n",
        "from ipywidgets import interact\n",
        "import seaborn as sns\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "5G-eN3EWc463"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "url = '/content/GDP.csv'\n",
        "df = pd.read_csv(url)\n",
        "df"
      ],
      "metadata": {
        "id": "G8vZQX8SdGGB",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "outputId": "c776b39f-5e7f-414c-c265-b0e8520718f3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Country                                         Region      Year  \\\n",
              "0     Afghanistan  Middle East, North Africa, and Greater Arabia  1/1/1901   \n",
              "1     Afghanistan  Middle East, North Africa, and Greater Arabia  1/1/1906   \n",
              "2     Afghanistan  Middle East, North Africa, and Greater Arabia  1/1/1911   \n",
              "3     Afghanistan  Middle East, North Africa, and Greater Arabia  1/1/1916   \n",
              "4     Afghanistan  Middle East, North Africa, and Greater Arabia  1/1/1921   \n",
              "...           ...                                            ...       ...   \n",
              "4414     Zimbabwe                             Sub-Saharan Africa  1/1/1991   \n",
              "4415     Zimbabwe                             Sub-Saharan Africa  1/1/1996   \n",
              "4416     Zimbabwe                             Sub-Saharan Africa  1/1/2001   \n",
              "4417     Zimbabwe                             Sub-Saharan Africa  1/1/2006   \n",
              "4418     Zimbabwe                             Sub-Saharan Africa  1/1/2011   \n",
              "\n",
              "       GDP_pp   \n",
              "0      613.99   \n",
              "1      624.04   \n",
              "2      634.25   \n",
              "3      647.28   \n",
              "4      662.40   \n",
              "...        ...  \n",
              "4414   782.09   \n",
              "4415   781.50   \n",
              "4416   719.96   \n",
              "4417   520.17   \n",
              "4418   526.33   \n",
              "\n",
              "[4419 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-de880c99-8899-4c9e-b91b-4f523a613132\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Region</th>\n",
              "      <th>Year</th>\n",
              "      <th>GDP_pp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Middle East, North Africa, and Greater Arabia</td>\n",
              "      <td>1/1/1901</td>\n",
              "      <td>613.99</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Middle East, North Africa, and Greater Arabia</td>\n",
              "      <td>1/1/1906</td>\n",
              "      <td>624.04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Middle East, North Africa, and Greater Arabia</td>\n",
              "      <td>1/1/1911</td>\n",
              "      <td>634.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Middle East, North Africa, and Greater Arabia</td>\n",
              "      <td>1/1/1916</td>\n",
              "      <td>647.28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Middle East, North Africa, and Greater Arabia</td>\n",
              "      <td>1/1/1921</td>\n",
              "      <td>662.40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4414</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>1/1/1991</td>\n",
              "      <td>782.09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4415</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>1/1/1996</td>\n",
              "      <td>781.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4416</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>1/1/2001</td>\n",
              "      <td>719.96</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4417</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>1/1/2006</td>\n",
              "      <td>520.17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4418</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>1/1/2011</td>\n",
              "      <td>526.33</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4419 rows Ã 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-de880c99-8899-4c9e-b91b-4f523a613132')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-de880c99-8899-4c9e-b91b-4f523a613132 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-de880c99-8899-4c9e-b91b-4f523a613132');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f7cd5130-6cb3-4b15-bd8e-ce7be21e9880\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f7cd5130-6cb3-4b15-bd8e-ce7be21e9880')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f7cd5130-6cb3-4b15-bd8e-ce7be21e9880 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_e0995eff-6f88-4986-aeee-8f501df04d58\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_e0995eff-6f88-4986-aeee-8f501df04d58 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 4419,\n  \"fields\": [\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 193,\n        \"samples\": [\n          \"Djibouti\",\n          \"Portugal\",\n          \"Iraq\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Europe\",\n          \"Australia and Oceania\",\n          \"Middle East, North Africa, and Greater Arabia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 23,\n        \"samples\": [\n          \"1/1/1976\",\n          \"1/1/1946\",\n          \"1/1/1901\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \" GDP_pp \",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4387,\n        \"samples\": [\n          \" 3,826.90 \",\n          \" 1,535.27 \",\n          \" 1,189.06 \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 158
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Converter a coluna 'Year' para o formato datetime\n",
        "df['Year'] = pd.to_datetime(df['Year'])\n",
        "\n",
        "# Extrair o ano como um inteiro\n",
        "df['Year'] = df['Year'].dt.year\n",
        "\n",
        "# Remover espaÃ§os em branco das colunas e converter GDP_pp para float\n",
        "df.columns = df.columns.str.strip()\n",
        "df['GDP_pp'] = df['GDP_pp'].str.replace(',', '').astype(float)\n",
        "\n",
        "# Configurar o Ã­ndice como 'Year' para facilitar a interpolaÃ§Ã£o\n",
        "df.set_index('Year', inplace=True)\n",
        "\n",
        "# Interpolar os valores de 'GDP_pp'\n",
        "df['GDP_pp'] = df['GDP_pp'].interpolate()\n",
        "\n",
        "# Resetar o Ã­ndice para retornar ao formato original\n",
        "df.reset_index(inplace=True)\n",
        "\n",
        "# Criar um intervalo de anos com um passo de 5 anos\n",
        "year_range = range(df['Year'].min(), df['Year'].max() + 1, 5)\n",
        "\n",
        "# Filtrar os dados para incluir apenas os anos no intervalo especificado\n",
        "filtered_df = df[df['Year'].isin(year_range)]\n",
        "\n",
        "# Exibir os dados interpolados e filtrados\n",
        "print(filtered_df.head())\n",
        "\n",
        "# Opcional: salvar os dados interpolados em um novo arquivo CSV\n",
        "filtered_df.to_csv('/content/Interpolated_GDP.csv', index=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SR6zoqFuwYRX",
        "outputId": "ec3b5e07-172c-4860-b722-f12a0ad60619"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Year      Country                                         Region  GDP_pp\n",
            "0  1901  Afghanistan  Middle East, North Africa, and Greater Arabia  613.99\n",
            "1  1906  Afghanistan  Middle East, North Africa, and Greater Arabia  624.04\n",
            "2  1911  Afghanistan  Middle East, North Africa, and Greater Arabia  634.25\n",
            "3  1916  Afghanistan  Middle East, North Africa, and Greater Arabia  647.28\n",
            "4  1921  Afghanistan  Middle East, North Africa, and Greater Arabia  662.40\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Primeiro, vamos criar um DataFrame que inclui todos os anos possÃ­veis\n",
        "all_years = pd.DataFrame({'Year': range(df['Year'].min(), df['Year'].max() + 1)})\n",
        "\n",
        "# Agora, vamos criar um novo DataFrame para cada paÃ­s e preencher os anos faltantes\n",
        "df_all = pd.DataFrame()\n",
        "\n",
        "for country in df['Country'].unique():\n",
        "    df_country = df[df['Country'] == country]\n",
        "    df_country = pd.merge(all_years, df_country, on='Year', how='left')\n",
        "    df_country['Country'].fillna(country, inplace=True)\n",
        "    df_country['Region'].fillna(method='ffill', inplace=True)\n",
        "    df_country['GDP_pp'].interpolate(inplace=True)\n",
        "    df_all = pd.concat([df_all, df_country])\n",
        "\n",
        "df_all[(df_all['Country'] == 'Brazil') & (df_all['Year'] == 2000)]\n",
        "df_all['Year'] = df_all['Year'].astype(int)"
      ],
      "metadata": {
        "id": "rwGQOBO0wbQh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_all['Year'].dtype"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PS40_eI5yYUV",
        "outputId": "2011c41a-6f06-46f0-e205-bdc0837c2abf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dtype('int64')"
            ]
          },
          "metadata": {},
          "execution_count": 161
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_all"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "R9aSHYOQwcpz",
        "outputId": "66afaa04-f553-4129-ee6d-85bc441ecfb5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Year      Country                                         Region   GDP_pp\n",
              "0    1901  Afghanistan  Middle East, North Africa, and Greater Arabia  613.990\n",
              "1    1902  Afghanistan  Middle East, North Africa, and Greater Arabia  616.000\n",
              "2    1903  Afghanistan  Middle East, North Africa, and Greater Arabia  618.010\n",
              "3    1904  Afghanistan  Middle East, North Africa, and Greater Arabia  620.020\n",
              "4    1905  Afghanistan  Middle East, North Africa, and Greater Arabia  622.030\n",
              "..    ...          ...                                            ...      ...\n",
              "106  2007     Zimbabwe                             Sub-Saharan Africa  521.402\n",
              "107  2008     Zimbabwe                             Sub-Saharan Africa  522.634\n",
              "108  2009     Zimbabwe                             Sub-Saharan Africa  523.866\n",
              "109  2010     Zimbabwe                             Sub-Saharan Africa  525.098\n",
              "110  2011     Zimbabwe                             Sub-Saharan Africa  526.330\n",
              "\n",
              "[21423 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4ab4b717-971c-452e-8357-52f12eff4f4b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Country</th>\n",
              "      <th>Region</th>\n",
              "      <th>GDP_pp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1901</td>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Middle East, North Africa, and Greater Arabia</td>\n",
              "      <td>613.990</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1902</td>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Middle East, North Africa, and Greater Arabia</td>\n",
              "      <td>616.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1903</td>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Middle East, North Africa, and Greater Arabia</td>\n",
              "      <td>618.010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1904</td>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Middle East, North Africa, and Greater Arabia</td>\n",
              "      <td>620.020</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1905</td>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Middle East, North Africa, and Greater Arabia</td>\n",
              "      <td>622.030</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>106</th>\n",
              "      <td>2007</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>521.402</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>107</th>\n",
              "      <td>2008</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>522.634</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>108</th>\n",
              "      <td>2009</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>523.866</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>109</th>\n",
              "      <td>2010</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>525.098</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>110</th>\n",
              "      <td>2011</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>526.330</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>21423 rows Ã 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4ab4b717-971c-452e-8357-52f12eff4f4b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4ab4b717-971c-452e-8357-52f12eff4f4b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4ab4b717-971c-452e-8357-52f12eff4f4b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-17b3b2ff-8b61-4f32-b98a-1481a86b6273\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-17b3b2ff-8b61-4f32-b98a-1481a86b6273')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-17b3b2ff-8b61-4f32-b98a-1481a86b6273 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_3609832f-b055-447d-96e8-7434d7a8012e\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_all')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_3609832f-b055-447d-96e8-7434d7a8012e button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_all');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_all",
              "summary": "{\n  \"name\": \"df_all\",\n  \"rows\": 21423,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32,\n        \"min\": 1901,\n        \"max\": 2011,\n        \"num_unique_values\": 111,\n        \"samples\": [\n          1979,\n          1911,\n          1905\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 193,\n        \"samples\": [\n          \"Djibouti\",\n          \"Portugal\",\n          \"Iraq\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Europe\",\n          \"Australia and Oceania\",\n          \"Middle East, North Africa, and Greater Arabia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GDP_pp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9124.388469975824,\n        \"min\": 285.15,\n        \"max\": 118681.3,\n        \"num_unique_values\": 21184,\n        \"samples\": [\n          760.054,\n          1597.77,\n          353.14\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 162
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_all[df_all['Country'] == 'Brazil']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "cvK1_RXDwept",
        "outputId": "96676501-2c72-40ff-faf7-4132b374177d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Year Country         Region     GDP_pp\n",
              "0    1901  Brazil  South America    648.480\n",
              "1    1902  Brazil  South America    658.178\n",
              "2    1903  Brazil  South America    667.876\n",
              "3    1904  Brazil  South America    677.574\n",
              "4    1905  Brazil  South America    687.272\n",
              "..    ...     ...            ...        ...\n",
              "106  2007  Brazil  South America   9150.558\n",
              "107  2008  Brazil  South America   9458.686\n",
              "108  2009  Brazil  South America   9766.814\n",
              "109  2010  Brazil  South America  10074.942\n",
              "110  2011  Brazil  South America  10383.070\n",
              "\n",
              "[111 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9680918a-749f-4d13-a47a-6015e4e5793a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Country</th>\n",
              "      <th>Region</th>\n",
              "      <th>GDP_pp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1901</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>South America</td>\n",
              "      <td>648.480</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1902</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>South America</td>\n",
              "      <td>658.178</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1903</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>South America</td>\n",
              "      <td>667.876</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1904</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>South America</td>\n",
              "      <td>677.574</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1905</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>South America</td>\n",
              "      <td>687.272</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>106</th>\n",
              "      <td>2007</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>South America</td>\n",
              "      <td>9150.558</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>107</th>\n",
              "      <td>2008</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>South America</td>\n",
              "      <td>9458.686</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>108</th>\n",
              "      <td>2009</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>South America</td>\n",
              "      <td>9766.814</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>109</th>\n",
              "      <td>2010</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>South America</td>\n",
              "      <td>10074.942</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>110</th>\n",
              "      <td>2011</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>South America</td>\n",
              "      <td>10383.070</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>111 rows Ã 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9680918a-749f-4d13-a47a-6015e4e5793a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9680918a-749f-4d13-a47a-6015e4e5793a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9680918a-749f-4d13-a47a-6015e4e5793a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9f350d12-f985-481c-b1a7-402edc30c2c8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9f350d12-f985-481c-b1a7-402edc30c2c8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9f350d12-f985-481c-b1a7-402edc30c2c8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_all[df_all['Country'] == 'Brazil']\",\n  \"rows\": 111,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32,\n        \"min\": 1901,\n        \"max\": 2011,\n        \"num_unique_values\": 111,\n        \"samples\": [\n          1979,\n          1911,\n          1905\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Brazil\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"South America\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GDP_pp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3078.068660616676,\n        \"min\": 648.48,\n        \"max\": 10383.07,\n        \"num_unique_values\": 111,\n        \"samples\": [\n          6877.546\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 163
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_all[df_all['Region'] == 'Asia']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "f9QzbA5mxDu7",
        "outputId": "ca80fdc1-9e56-42f7-8af8-8a79c095bb52"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Year     Country Region    GDP_pp\n",
              "0    1901  Bangladesh   Asia   690.520\n",
              "1    1902  Bangladesh   Asia   701.772\n",
              "2    1903  Bangladesh   Asia   713.024\n",
              "3    1904  Bangladesh   Asia   724.276\n",
              "4    1905  Bangladesh   Asia   735.528\n",
              "..    ...         ...    ...       ...\n",
              "106  2007     Vietnam   Asia  2423.838\n",
              "107  2008     Vietnam   Asia  2558.336\n",
              "108  2009     Vietnam   Asia  2692.834\n",
              "109  2010     Vietnam   Asia  2827.332\n",
              "110  2011     Vietnam   Asia  2961.830\n",
              "\n",
              "[2997 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4ebc9f8d-fc9f-4551-b6e7-f717085e55f3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Country</th>\n",
              "      <th>Region</th>\n",
              "      <th>GDP_pp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1901</td>\n",
              "      <td>Bangladesh</td>\n",
              "      <td>Asia</td>\n",
              "      <td>690.520</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1902</td>\n",
              "      <td>Bangladesh</td>\n",
              "      <td>Asia</td>\n",
              "      <td>701.772</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1903</td>\n",
              "      <td>Bangladesh</td>\n",
              "      <td>Asia</td>\n",
              "      <td>713.024</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1904</td>\n",
              "      <td>Bangladesh</td>\n",
              "      <td>Asia</td>\n",
              "      <td>724.276</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1905</td>\n",
              "      <td>Bangladesh</td>\n",
              "      <td>Asia</td>\n",
              "      <td>735.528</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>106</th>\n",
              "      <td>2007</td>\n",
              "      <td>Vietnam</td>\n",
              "      <td>Asia</td>\n",
              "      <td>2423.838</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>107</th>\n",
              "      <td>2008</td>\n",
              "      <td>Vietnam</td>\n",
              "      <td>Asia</td>\n",
              "      <td>2558.336</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>108</th>\n",
              "      <td>2009</td>\n",
              "      <td>Vietnam</td>\n",
              "      <td>Asia</td>\n",
              "      <td>2692.834</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>109</th>\n",
              "      <td>2010</td>\n",
              "      <td>Vietnam</td>\n",
              "      <td>Asia</td>\n",
              "      <td>2827.332</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>110</th>\n",
              "      <td>2011</td>\n",
              "      <td>Vietnam</td>\n",
              "      <td>Asia</td>\n",
              "      <td>2961.830</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2997 rows Ã 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4ebc9f8d-fc9f-4551-b6e7-f717085e55f3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4ebc9f8d-fc9f-4551-b6e7-f717085e55f3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4ebc9f8d-fc9f-4551-b6e7-f717085e55f3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-142534ae-b7c9-4ddf-ac33-6658f19ab5b2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-142534ae-b7c9-4ddf-ac33-6658f19ab5b2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-142534ae-b7c9-4ddf-ac33-6658f19ab5b2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_all[df_all['Region'] == 'Asia']\",\n  \"rows\": 2997,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32,\n        \"min\": 1901,\n        \"max\": 2011,\n        \"num_unique_values\": 111,\n        \"samples\": [\n          1979,\n          1911,\n          1905\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"Kazakhstan\",\n          \"Malaysia\",\n          \"Korea, Dem. Rep.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Asia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GDP_pp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8456.392740526726,\n        \"min\": 355.0,\n        \"max\": 67973.72,\n        \"num_unique_values\": 2978,\n        \"samples\": [\n          15942.58\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 164
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_all['Year'].dtype"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "APNonbV2yDbp",
        "outputId": "9fa11d8c-47ea-4c10-ecf7-8887abda2063"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dtype('int64')"
            ]
          },
          "metadata": {},
          "execution_count": 165
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "region = 'Sub-Saharan Africa'\n",
        "region_data = df_all[df_all['Region'] == region]\n",
        "region_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "8yJbAl4T4KmY",
        "outputId": "b4cd1820-96c0-4e57-a006-79c5d4551003"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Year   Country              Region   GDP_pp\n",
              "0    1901    Angola  Sub-Saharan Africa  525.760\n",
              "1    1902    Angola  Sub-Saharan Africa  528.248\n",
              "2    1903    Angola  Sub-Saharan Africa  530.736\n",
              "3    1904    Angola  Sub-Saharan Africa  533.224\n",
              "4    1905    Angola  Sub-Saharan Africa  535.712\n",
              "..    ...       ...                 ...      ...\n",
              "106  2007  Zimbabwe  Sub-Saharan Africa  521.402\n",
              "107  2008  Zimbabwe  Sub-Saharan Africa  522.634\n",
              "108  2009  Zimbabwe  Sub-Saharan Africa  523.866\n",
              "109  2010  Zimbabwe  Sub-Saharan Africa  525.098\n",
              "110  2011  Zimbabwe  Sub-Saharan Africa  526.330\n",
              "\n",
              "[5106 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cb3c83df-4776-445a-90cd-4f422b7f0091\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Country</th>\n",
              "      <th>Region</th>\n",
              "      <th>GDP_pp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1901</td>\n",
              "      <td>Angola</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>525.760</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1902</td>\n",
              "      <td>Angola</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>528.248</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1903</td>\n",
              "      <td>Angola</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>530.736</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1904</td>\n",
              "      <td>Angola</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>533.224</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1905</td>\n",
              "      <td>Angola</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>535.712</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>106</th>\n",
              "      <td>2007</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>521.402</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>107</th>\n",
              "      <td>2008</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>522.634</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>108</th>\n",
              "      <td>2009</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>523.866</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>109</th>\n",
              "      <td>2010</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>525.098</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>110</th>\n",
              "      <td>2011</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>526.330</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5106 rows Ã 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cb3c83df-4776-445a-90cd-4f422b7f0091')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cb3c83df-4776-445a-90cd-4f422b7f0091 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cb3c83df-4776-445a-90cd-4f422b7f0091');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ad148628-2a8f-4220-9d32-41797eb19b4e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ad148628-2a8f-4220-9d32-41797eb19b4e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ad148628-2a8f-4220-9d32-41797eb19b4e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_3c906133-14ca-4b97-81ad-28217167e6d4\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('region_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_3c906133-14ca-4b97-81ad-28217167e6d4 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('region_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "region_data",
              "summary": "{\n  \"name\": \"region_data\",\n  \"rows\": 5106,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32,\n        \"min\": 1901,\n        \"max\": 2011,\n        \"num_unique_values\": 111,\n        \"samples\": [\n          1979,\n          1911,\n          1905\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 46,\n        \"samples\": [\n          \"Sudan\",\n          \"Mali\",\n          \"Mauritania\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Sub-Saharan Africa\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GDP_pp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2201.6618686648094,\n        \"min\": 285.15,\n        \"max\": 25536.95,\n        \"num_unique_values\": 5089,\n        \"samples\": [\n          932.812\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 182
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##  Informe as regiÃµes de maiores crescimentos de PIB. Use grÃ¡ficos para finalizar a resposta."
      ],
      "metadata": {
        "id": "Sm0emSIz4xbS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "regions = df_all['Region'].unique()"
      ],
      "metadata": {
        "id": "6gNyAvj6zqM0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_all['Decada'] = (df_all['Year'] // 10) * 10\n",
        "df_all['GDP_crescimento'] = df_all.groupby('Country')['GDP_pp'].pct_change() + 1\n",
        "\n",
        "def plot_decada(decada):\n",
        "\n",
        "    df_decada = df_all[df_all['Decada'] == decada]\n",
        "\n",
        "    crescimento_medio = df_decada.groupby('Region')['GDP_crescimento'].mean().sort_values(ascending=False)\n",
        "\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    sns.barplot(x=crescimento_medio.values, y=crescimento_medio.index)\n",
        "    plt.xlabel('Crescimento mÃ©dio do PIB %')\n",
        "    plt.ylabel('RegiÃ£o')\n",
        "    plt.title(f'RegiÃµes de maiores crescimentos de PIB na dÃ©cada de {decada}')\n",
        "    plt.show()\n",
        "\n",
        "\n",
        "decadas = np.sort(df_all['Decada'].unique())\n",
        "interact(plot_decada, decada=decadas)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "referenced_widgets": [
            "730db4340a12420dbd6ad91c2c824c10",
            "d848eb6514e84b168ace505e1ac29412",
            "94e5004ce7ab4b9aa3811ca2e9fd84b8",
            "47f06373879f47be8a31c1bb6c434d36",
            "a1860df0825d47ce89989d587e1ebaa4",
            "6552f3934d7840cf99c1bd58b220527c",
            "d0a4fd2d5ce5460097b7331e3e76cbd3"
          ],
          "height": 658
        },
        "id": "-D-k4fWw4M_r",
        "outputId": "45c356f0-b14a-45bb-f365-3a6fe0bbcc08"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "interactive(children=(Dropdown(description='decada', options=(1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, â¦"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "730db4340a12420dbd6ad91c2c824c10"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function __main__.plot_decada(decada)>"
            ],
            "text/html": [
              "<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n",
              "      pre.function-repr-contents {\n",
              "        overflow-x: auto;\n",
              "        padding: 8px 12px;\n",
              "        max-height: 500px;\n",
              "      }\n",
              "\n",
              "      pre.function-repr-contents.function-repr-contents-collapsed {\n",
              "        cursor: pointer;\n",
              "        max-height: 100px;\n",
              "      }\n",
              "    </style>\n",
              "    <pre style=\"white-space: initial; background:\n",
              "         var(--colab-secondary-surface-color); padding: 8px 12px;\n",
              "         border-bottom: 1px solid var(--colab-border-color);\"><b>plot_decada</b><br/>def plot_decada(decada)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/content/&lt;ipython-input-183-df7f0c87a45b&gt;</a>&lt;no docstring&gt;</pre></div>"
            ]
          },
          "metadata": {},
          "execution_count": 183
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## MÃ©dia entre um valor e outro, dÃ­vida por 5, e interpolaÃ§Ã£o desses valores."
      ],
      "metadata": {
        "id": "v6SCZl7eko1N"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy import interpolate\n",
        "from ipywidgets import interact"
      ],
      "metadata": {
        "id": "w9R2JcsilFyV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "url = '/content/GDP.csv'\n",
        "df = pd.read_csv(url)\n",
        "df"
      ],
      "metadata": {
        "id": "SNGjciF1lP6J",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "outputId": "1f29f60e-09d0-491b-e50d-83e7b80d719e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Country                                         Region      Year  \\\n",
              "0     Afghanistan  Middle East, North Africa, and Greater Arabia  1/1/1901   \n",
              "1     Afghanistan  Middle East, North Africa, and Greater Arabia  1/1/1906   \n",
              "2     Afghanistan  Middle East, North Africa, and Greater Arabia  1/1/1911   \n",
              "3     Afghanistan  Middle East, North Africa, and Greater Arabia  1/1/1916   \n",
              "4     Afghanistan  Middle East, North Africa, and Greater Arabia  1/1/1921   \n",
              "...           ...                                            ...       ...   \n",
              "4414     Zimbabwe                             Sub-Saharan Africa  1/1/1991   \n",
              "4415     Zimbabwe                             Sub-Saharan Africa  1/1/1996   \n",
              "4416     Zimbabwe                             Sub-Saharan Africa  1/1/2001   \n",
              "4417     Zimbabwe                             Sub-Saharan Africa  1/1/2006   \n",
              "4418     Zimbabwe                             Sub-Saharan Africa  1/1/2011   \n",
              "\n",
              "       GDP_pp   \n",
              "0      613.99   \n",
              "1      624.04   \n",
              "2      634.25   \n",
              "3      647.28   \n",
              "4      662.40   \n",
              "...        ...  \n",
              "4414   782.09   \n",
              "4415   781.50   \n",
              "4416   719.96   \n",
              "4417   520.17   \n",
              "4418   526.33   \n",
              "\n",
              "[4419 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fdd8bef3-47c0-4444-90e7-3aa507bd819b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Region</th>\n",
              "      <th>Year</th>\n",
              "      <th>GDP_pp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Middle East, North Africa, and Greater Arabia</td>\n",
              "      <td>1/1/1901</td>\n",
              "      <td>613.99</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Middle East, North Africa, and Greater Arabia</td>\n",
              "      <td>1/1/1906</td>\n",
              "      <td>624.04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Middle East, North Africa, and Greater Arabia</td>\n",
              "      <td>1/1/1911</td>\n",
              "      <td>634.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Middle East, North Africa, and Greater Arabia</td>\n",
              "      <td>1/1/1916</td>\n",
              "      <td>647.28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Middle East, North Africa, and Greater Arabia</td>\n",
              "      <td>1/1/1921</td>\n",
              "      <td>662.40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4414</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>1/1/1991</td>\n",
              "      <td>782.09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4415</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>1/1/1996</td>\n",
              "      <td>781.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4416</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>1/1/2001</td>\n",
              "      <td>719.96</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4417</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>1/1/2006</td>\n",
              "      <td>520.17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4418</th>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>1/1/2011</td>\n",
              "      <td>526.33</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4419 rows Ã 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fdd8bef3-47c0-4444-90e7-3aa507bd819b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fdd8bef3-47c0-4444-90e7-3aa507bd819b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fdd8bef3-47c0-4444-90e7-3aa507bd819b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e4ac0e2a-5e07-485a-b722-432456c60095\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e4ac0e2a-5e07-485a-b722-432456c60095')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e4ac0e2a-5e07-485a-b722-432456c60095 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_934d3ddb-bd8e-480b-8edd-864efba6a6e8\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_934d3ddb-bd8e-480b-8edd-864efba6a6e8 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 4419,\n  \"fields\": [\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 193,\n        \"samples\": [\n          \"Djibouti\",\n          \"Portugal\",\n          \"Iraq\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Europe\",\n          \"Australia and Oceania\",\n          \"Middle East, North Africa, and Greater Arabia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 23,\n        \"samples\": [\n          \"1/1/1976\",\n          \"1/1/1946\",\n          \"1/1/1901\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \" GDP_pp \",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4387,\n        \"samples\": [\n          \" 3,826.90 \",\n          \" 1,535.27 \",\n          \" 1,189.06 \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 170
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Converter a coluna 'Year' para o formato datetime\n",
        "df['Year'] = pd.to_datetime(df['Year'])\n",
        "\n",
        "# Extrair o ano como um inteiro\n",
        "df['Year'] = df['Year'].dt.year\n",
        "\n",
        "# Remover espaÃ§os em branco das colunas e converter GDP_pp para float\n",
        "df.columns = df.columns.str.strip()\n",
        "df['GDP_pp'] = df['GDP_pp'].str.replace(',', '').astype(float)\n",
        "\n",
        "# Configurar o Ã­ndice como 'Year' para facilitar a interpolaÃ§Ã£o\n",
        "df.set_index('Year', inplace=True)\n",
        "\n",
        "# Interpolar os valores de 'GDP_pp'\n",
        "df['GDP_pp'] = df['GDP_pp'].interpolate()\n",
        "\n",
        "# Resetar o Ã­ndice para retornar ao formato original\n",
        "df.reset_index(inplace=True)\n",
        "\n",
        "# Criar um intervalo de anos com um passo de 5 anos\n",
        "year_range = range(df['Year'].min(), df['Year'].max() + 1, 5)\n",
        "\n",
        "# Filtrar os dados para incluir apenas os anos no intervalo especificado\n",
        "filtered_df = df[df['Year'].isin(year_range)]\n",
        "\n",
        "# Exibir os dados interpolados e filtrados\n",
        "print(filtered_df.head())\n",
        "\n",
        "# Opcional: salvar os dados interpolados em um novo arquivo CSV\n",
        "filtered_df.to_csv('/content/Interpolated_GDP.csv', index=False)"
      ],
      "metadata": {
        "id": "c0MzZuc-lQFT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1e37e289-ef6a-4cee-904f-82f4c8746c7d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Year      Country                                         Region  GDP_pp\n",
            "0  1901  Afghanistan  Middle East, North Africa, and Greater Arabia  613.99\n",
            "1  1906  Afghanistan  Middle East, North Africa, and Greater Arabia  624.04\n",
            "2  1911  Afghanistan  Middle East, North Africa, and Greater Arabia  634.25\n",
            "3  1916  Afghanistan  Middle East, North Africa, and Greater Arabia  647.28\n",
            "4  1921  Afghanistan  Middle East, North Africa, and Greater Arabia  662.40\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "id": "TI_4HeizlQJZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "outputId": "a836223f-7059-4632-a27e-c39acf4d25fd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Year      Country                                         Region  GDP_pp\n",
              "0     1901  Afghanistan  Middle East, North Africa, and Greater Arabia  613.99\n",
              "1     1906  Afghanistan  Middle East, North Africa, and Greater Arabia  624.04\n",
              "2     1911  Afghanistan  Middle East, North Africa, and Greater Arabia  634.25\n",
              "3     1916  Afghanistan  Middle East, North Africa, and Greater Arabia  647.28\n",
              "4     1921  Afghanistan  Middle East, North Africa, and Greater Arabia  662.40\n",
              "...    ...          ...                                            ...     ...\n",
              "4414  1991     Zimbabwe                             Sub-Saharan Africa  782.09\n",
              "4415  1996     Zimbabwe                             Sub-Saharan Africa  781.50\n",
              "4416  2001     Zimbabwe                             Sub-Saharan Africa  719.96\n",
              "4417  2006     Zimbabwe                             Sub-Saharan Africa  520.17\n",
              "4418  2011     Zimbabwe                             Sub-Saharan Africa  526.33\n",
              "\n",
              "[4419 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d30cb3ba-c567-470d-9a4c-ba3296a94e35\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Country</th>\n",
              "      <th>Region</th>\n",
              "      <th>GDP_pp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1901</td>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Middle East, North Africa, and Greater Arabia</td>\n",
              "      <td>613.99</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1906</td>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Middle East, North Africa, and Greater Arabia</td>\n",
              "      <td>624.04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1911</td>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Middle East, North Africa, and Greater Arabia</td>\n",
              "      <td>634.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1916</td>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Middle East, North Africa, and Greater Arabia</td>\n",
              "      <td>647.28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1921</td>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>Middle East, North Africa, and Greater Arabia</td>\n",
              "      <td>662.40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4414</th>\n",
              "      <td>1991</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>782.09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4415</th>\n",
              "      <td>1996</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>781.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4416</th>\n",
              "      <td>2001</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>719.96</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4417</th>\n",
              "      <td>2006</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>520.17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4418</th>\n",
              "      <td>2011</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>526.33</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4419 rows Ã 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d30cb3ba-c567-470d-9a4c-ba3296a94e35')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d30cb3ba-c567-470d-9a4c-ba3296a94e35 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d30cb3ba-c567-470d-9a4c-ba3296a94e35');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d3f2c605-8198-45ee-8bf2-9e1fa26411ac\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d3f2c605-8198-45ee-8bf2-9e1fa26411ac')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d3f2c605-8198-45ee-8bf2-9e1fa26411ac button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_018f6e51-4b9f-4587-8916-e93816d9d610\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_018f6e51-4b9f-4587-8916-e93816d9d610 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 4419,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 23,\n        \"samples\": [\n          1976,\n          1946,\n          1901\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 193,\n        \"samples\": [\n          \"Djibouti\",\n          \"Portugal\",\n          \"Iraq\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Europe\",\n          \"Australia and Oceania\",\n          \"Middle East, North Africa, and Greater Arabia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GDP_pp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9300.076226565676,\n        \"min\": 285.15,\n        \"max\": 118681.3,\n        \"num_unique_values\": 4387,\n        \"samples\": [\n          3826.9,\n          1535.27,\n          1189.06\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 172
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Primeiro, vamos criar um DataFrame que inclui todos os anos possÃ­veis\n",
        "all_years = pd.DataFrame({'Year': range(df['Year'].min(), df['Year'].max() + 1)})\n",
        "\n",
        "# Agora, vamos criar um novo DataFrame para cada paÃ­s e preencher os anos faltantes\n",
        "df_all = pd.DataFrame()\n",
        "\n",
        "for country in df['Country'].unique():\n",
        "    df_country = df[df['Country'] == country]\n",
        "    df_country = pd.merge(all_years, df_country, on='Year', how='left')\n",
        "    df_country['Country'].fillna(country, inplace=True)\n",
        "    df_country['Region'].fillna(method='ffill', inplace=True)\n",
        "    df_country['GDP_pp'].interpolate(inplace=True)\n",
        "    df_all = pd.concat([df_all, df_country])\n",
        "\n",
        "df_all[(df_all['Country'] == 'Brazil') & (df_all['Year'] == 2000)]"
      ],
      "metadata": {
        "id": "cD6a1C1qlQNc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "outputId": "c31f0660-6543-436c-a537-29f20246ff97"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Year Country         Region    GDP_pp\n",
              "99  2000  Brazil  South America  7980.056"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3a37b276-4893-4aaf-8b9a-e16ca545a00c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Country</th>\n",
              "      <th>Region</th>\n",
              "      <th>GDP_pp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>2000</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>South America</td>\n",
              "      <td>7980.056</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3a37b276-4893-4aaf-8b9a-e16ca545a00c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3a37b276-4893-4aaf-8b9a-e16ca545a00c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3a37b276-4893-4aaf-8b9a-e16ca545a00c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_all[(df_all['Country'] == 'Brazil') & (df_all['Year'] == 2000)]\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2000,\n        \"max\": 2000,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Brazil\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"South America\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GDP_pp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 7980.0560000000005,\n        \"max\": 7980.0560000000005,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          7980.0560000000005\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 173
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_all[df_all['Country'] == 'Brazil']"
      ],
      "metadata": {
        "id": "1xcW8JrllfsQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "outputId": "4bbaadbc-0828-4d5a-8d87-947827265bb9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Year Country         Region     GDP_pp\n",
              "0    1901  Brazil  South America    648.480\n",
              "1    1902  Brazil  South America    658.178\n",
              "2    1903  Brazil  South America    667.876\n",
              "3    1904  Brazil  South America    677.574\n",
              "4    1905  Brazil  South America    687.272\n",
              "..    ...     ...            ...        ...\n",
              "106  2007  Brazil  South America   9150.558\n",
              "107  2008  Brazil  South America   9458.686\n",
              "108  2009  Brazil  South America   9766.814\n",
              "109  2010  Brazil  South America  10074.942\n",
              "110  2011  Brazil  South America  10383.070\n",
              "\n",
              "[111 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c42945ab-0bab-43f7-84b9-81a91def31a7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>Country</th>\n",
              "      <th>Region</th>\n",
              "      <th>GDP_pp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1901</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>South America</td>\n",
              "      <td>648.480</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1902</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>South America</td>\n",
              "      <td>658.178</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1903</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>South America</td>\n",
              "      <td>667.876</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1904</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>South America</td>\n",
              "      <td>677.574</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1905</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>South America</td>\n",
              "      <td>687.272</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>106</th>\n",
              "      <td>2007</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>South America</td>\n",
              "      <td>9150.558</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>107</th>\n",
              "      <td>2008</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>South America</td>\n",
              "      <td>9458.686</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>108</th>\n",
              "      <td>2009</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>South America</td>\n",
              "      <td>9766.814</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>109</th>\n",
              "      <td>2010</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>South America</td>\n",
              "      <td>10074.942</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>110</th>\n",
              "      <td>2011</td>\n",
              "      <td>Brazil</td>\n",
              "      <td>South America</td>\n",
              "      <td>10383.070</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>111 rows Ã 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c42945ab-0bab-43f7-84b9-81a91def31a7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c42945ab-0bab-43f7-84b9-81a91def31a7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c42945ab-0bab-43f7-84b9-81a91def31a7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3badf123-99f8-4dd9-aef8-a0fe9451d883\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3badf123-99f8-4dd9-aef8-a0fe9451d883')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3badf123-99f8-4dd9-aef8-a0fe9451d883 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_all[df_all['Country'] == 'Brazil']\",\n  \"rows\": 111,\n  \"fields\": [\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32,\n        \"min\": 1901,\n        \"max\": 2011,\n        \"num_unique_values\": 111,\n        \"samples\": [\n          1979,\n          1911,\n          1905\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Brazil\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"South America\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GDP_pp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3078.068660616676,\n        \"min\": 648.48,\n        \"max\": 10383.07,\n        \"num_unique_values\": 111,\n        \"samples\": [\n          6877.546\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 174
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def criar_grafico(pais):\n",
        "    plt.figure(figsize=(12, 6))\n",
        "    #for country in filtered_df['Country'].unique():\n",
        "    country_data = df_all[df_all['Country'] == pais]\n",
        "    plt.plot(country_data['Year'], country_data['GDP_pp'], label=pais)\n",
        "\n",
        "    plt.title(f'PIB per capita Interpolado {pais}')\n",
        "    plt.xlabel('Ano')\n",
        "    plt.ylabel('Pib per capita')\n",
        "    plt.legend(loc='upper left', bbox_to_anchor=(1, 1), ncol=1)\n",
        "    plt.grid(True)\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "paises = df_all['Country'].unique()\n",
        "interact(criar_grafico, pais=paises)"
      ],
      "metadata": {
        "id": "QeJEJC50lf1Q",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "referenced_widgets": [
            "2e5119e96ebe4aba9adf63dd3895bf54",
            "f7ab767d271248e78f6bd410eac62621",
            "ed1e382a71f547eea530d437d26e5f1d",
            "9c755ac41a624ff389b3665756709437",
            "f02f8fa32af94420b1d614964fd21749",
            "411efc5aa5104021b6f2e4a221405dee",
            "675ab026de094e9f898705eeab27d1a6"
          ],
          "height": 681
        },
        "outputId": "9c6bc5e0-b782-47c5-f259-05238ea18b8e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "interactive(children=(Dropdown(description='pais', options=('Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Aâ¦"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "2e5119e96ebe4aba9adf63dd3895bf54"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function __main__.criar_grafico(pais)>"
            ],
            "text/html": [
              "<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n",
              "      pre.function-repr-contents {\n",
              "        overflow-x: auto;\n",
              "        padding: 8px 12px;\n",
              "        max-height: 500px;\n",
              "      }\n",
              "\n",
              "      pre.function-repr-contents.function-repr-contents-collapsed {\n",
              "        cursor: pointer;\n",
              "        max-height: 100px;\n",
              "      }\n",
              "    </style>\n",
              "    <pre style=\"white-space: initial; background:\n",
              "         var(--colab-secondary-surface-color); padding: 8px 12px;\n",
              "         border-bottom: 1px solid var(--colab-border-color);\"><b>criar_grafico</b><br/>def criar_grafico(pais)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/content/&lt;ipython-input-175-36e9bdfffe13&gt;</a>&lt;no docstring&gt;</pre></div>"
            ]
          },
          "metadata": {},
          "execution_count": 175
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Quanto mais dinheiro, mais obeso? /  O resultado em 1 Ã© o mesmo no Brasil? Qual a diferenÃ§a entre Brasil, USA e Portugal?"
      ],
      "metadata": {
        "id": "TlIDTEl-tjRS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "tohgf_Z55hFn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_copia['Obesity'].dtype"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ITVmyfN3Ducu",
        "outputId": "f8cfdc87-0971-4763-e0e8-fee701a53cd4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dtype('float64')"
            ]
          },
          "metadata": {},
          "execution_count": 177
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "from ipywidgets import interact\n",
        "\n",
        "# Suponha que seus dataframes sejam df_copia e df_all\n",
        "# df_copia = pd.read_csv('obesity.csv')\n",
        "# df_all = pd.read_csv('gdp.csv')\n",
        "\n",
        "def plot_data(country):\n",
        "    # Filtrar dados para o paÃ­s selecionado e anos de 1975 a 2011, pulando de 5 em 5 anos\n",
        "    years = np.arange(1975, 2012, 5)\n",
        "    obesity_country = df_copia[(df_copia['Country'] == country) & (df_copia['Year'].isin(years))]\n",
        "    gdp_country = df_all[(df_all['Country'] == country) & (df_all['Year'].isin(years))]\n",
        "\n",
        "    # Criar figura e eixos com tamanho maior\n",
        "    fig, ax1 = plt.subplots(figsize=(12, 6))\n",
        "\n",
        "    # GrÃ¡fico de barras para PIB\n",
        "    sns.barplot(x='Year', y='GDP_pp', data=gdp_country, ax=ax1, color='lightblue', label='PIB')\n",
        "\n",
        "    # Criar segundo eixo\n",
        "    ax2 = ax1.twinx()\n",
        "\n",
        "    # GrÃ¡fico de barras para taxa de obesidade\n",
        "    sns.barplot(x='Year', y='Obesity', data=obesity_country, ax=ax2, color='darkblue', label='Obesidade', alpha=0.5)\n",
        "\n",
        "    # Configurar rÃ³tulos e tÃ­tulo\n",
        "    ax1.set_xlabel('Ano')\n",
        "    ax1.set_ylabel('PIB')\n",
        "    ax2.set_ylabel('Taxa de Obesidade %')\n",
        "    plt.title('Taxa de obesidade com relaÃ§Ã£o ao PIB')\n",
        "    fig.legend(loc='upper right')\n",
        "\n",
        "    # Mostrar grÃ¡fico\n",
        "    plt.show()\n",
        "\n",
        "# Criar widget interativo\n",
        "interact(plot_data, country=df_copia['Country'].unique())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "referenced_widgets": [
            "d07506676a7c430ba6d6c6deeb4fd5a6",
            "dd5cea396f91418e86a1bd4507f2f246",
            "9f7e325810a24fde95559f57d0213656",
            "e6c488c9cd4641bfbd21fdd61c2455a4",
            "cf28a66e6b9949188b9cdf6db5d29204",
            "4d07d28f5ba74ec9a57d037f7515b1c5",
            "d24cddc667ba447dbc936b42fb67e523"
          ],
          "height": 717
        },
        "id": "YvqRfqypDHTL",
        "outputId": "9cd61bfa-ee17-4a4c-b817-ab4d9e8c6983"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "interactive(children=(Dropdown(description='country', options=('Afghanistan', 'Albania', 'Algeria', 'Andorra',â¦"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "d07506676a7c430ba6d6c6deeb4fd5a6"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function __main__.plot_data(country)>"
            ],
            "text/html": [
              "<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n",
              "      pre.function-repr-contents {\n",
              "        overflow-x: auto;\n",
              "        padding: 8px 12px;\n",
              "        max-height: 500px;\n",
              "      }\n",
              "\n",
              "      pre.function-repr-contents.function-repr-contents-collapsed {\n",
              "        cursor: pointer;\n",
              "        max-height: 100px;\n",
              "      }\n",
              "    </style>\n",
              "    <pre style=\"white-space: initial; background:\n",
              "         var(--colab-secondary-surface-color); padding: 8px 12px;\n",
              "         border-bottom: 1px solid var(--colab-border-color);\"><b>plot_data</b><br/>def plot_data(country)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/content/&lt;ipython-input-178-e4803fde9b25&gt;</a>&lt;no docstring&gt;</pre></div>"
            ]
          },
          "metadata": {},
          "execution_count": 178
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_copia['Year']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gvtldPIXDVi3",
        "outputId": "62753c8d-eb5a-4842-b95d-45eaf1ce642a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0        1975\n",
              "1        1975\n",
              "2        1975\n",
              "3        1976\n",
              "4        1976\n",
              "         ... \n",
              "24565    2015\n",
              "24566    2015\n",
              "24567    2016\n",
              "24568    2016\n",
              "24569    2016\n",
              "Name: Year, Length: 24570, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 179
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_all['Year']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QIpHkOefDSrh",
        "outputId": "a6e5330a-6dec-4bb9-fab0-a23a177605d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      1901\n",
              "1      1902\n",
              "2      1903\n",
              "3      1904\n",
              "4      1905\n",
              "       ... \n",
              "106    2007\n",
              "107    2008\n",
              "108    2009\n",
              "109    2010\n",
              "110    2011\n",
              "Name: Year, Length: 21423, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 180
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_merge = pd.merge(df_all, df_copia, on=['Country', 'Year'])\n",
        "region_means = df_merge.groupby('Region')[['GDP_pp', 'Obesity']].mean()\n",
        "region_means.plot(kind='bar', subplots=True)\n",
        "plt.ylabel('MÃ©dia')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 811
        },
        "id": "o4nzUEQV9j0C",
        "outputId": "0bade50a-d9d5-4592-9996-baf9220f4550"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}
